
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftNOTleftGTLTGEQLEQleftEQNEQleftPLUSMINUSleftMULTDIVMODleftUMENOSrightPOTENCIAnonassocGRUPOAND ASSIGN BOOL BREAK COLON COMMA CONTINUE DEDENT DEF DIV ELIF ELSE ENDMARKER EQ FLOAT FOR GEQ GT IF IN INDENT INT LBRA LEQ LIST LPAR LT MINUS MOD MULT NAME NEQ NEWLINE NOT NUMBER OR PLUS POTENCIA RBRA RETURN RPAR SEMICOLON STR STRING STRUCT WHILE WSfile_input_end : file_input ENDMARKERfile_input : file_input NEWLINE\n                  | file_input stmt\n                  | NEWLINE\n                  | stmtfuncdef : DEF NAME parameters COLON suiteparameters : LPAR RPAR\n                  | LPAR varargslist RPARvarargslist : varargslist COMMA NAME COLON type\n                   | varargslist COMMA NAME\n                   | NAME COLON type\n                   | NAME\n    type : STR\n            | INT\n            | FLOAT\n            | BOOL\n            | LIST\n            | NAME\n    stmt : simple_stmtstmt : compound_stmtsimple_stmt : small_stmts NEWLINE\n                   | small_stmts SEMICOLON NEWLINEsmall_stmts : small_stmts SEMICOLON small_stmt\n                   | small_stmtsmall_stmt : flow_stmt\n                  | expr_stmtexpr_stmt : testlist ASSIGN testlist\n                 | testlist COLON type ASSIGN testlist\n                 | testlist ASSIGN list_def\n                 | testlist COLON type ASSIGN list_def\n                 | testlist list_def : LBRA list_elem RBRA\n     list_elem : list_elem COMMA test\n                  | list_elem COMMA list_def\n                  | test\n                  | list_def\n    flow_stmt : return_stmt\n                 | continue_stmt\n                 | break_stmt\n    return_stmt : RETURN testlist\n                   | RETURN\n    continue_stmt : CONTINUE\n    break_stmt : BREAK\n    compound_stmt : if_stmt\n                     | funcdef\n                     | while_loop\n                     | for_loop\n                     | struct_defwhile_loop : WHILE test COLON suite\n    for_loop : FOR NAME IN range COLON suite\n    range : STRING\n             | list_def\n             | NAME\n             | atom trailer\n    struct_def : STRUCT NAME COLON struct_body\n    struct_body : NEWLINE INDENT struct_fields DEDENT\n    struct_fields : struct_field struct_fields\n                     | struct_field \n    struct_field : NAME COLON type NEWLINE\n                    | NAME NEWLINE\n    if_stmt : IF test COLON suite\n               | IF test COLON suite ELSE COLON suite\n               | IF test COLON suite else_if_list\n    else_if_list     : ELIF test COLON suite\n                        | ELIF test COLON suite ELSE COLON suite\n                        | ELIF test COLON suite else_if_listsuite : simple_stmt\n             | NEWLINE INDENT stmts DEDENTstmts : stmts stmt\n             | stmtcomparison : comparison PLUS comparison\n                  | comparison MINUS comparison\n                  | comparison MULT comparison\n                  | comparison DIV comparison\n                  | comparison MOD comparison\n                  | comparison POTENCIA comparison\n                  | MINUS comparison %prec UMENOS\n                  | comparison NEQ comparison\n                  | comparison EQ comparison\n                  | comparison LT comparison\n                  | comparison GT comparison\n                  | comparison LEQ comparison\n                  | comparison GEQ comparison\n                  | comparison AND comparison\n                  | comparison OR comparison\n                  | NOT comparison\n                  | LPAR comparison RPAR %prec GRUPO\n                  | powerpower : atom\n             | atom trailer\n             | atom list_indexatom : NAMEatom : NUMBERatom : FLOATatom : STRINGtrailer : LPAR arglist RPARlist_index : LBRA test RBRA\n                  | list_index LBRA test RBRA\n    testlist : testlist_multi COMMA\n                | testlist_multi testlist_multi : testlist_multi COMMA test\n                      | testtest : comparisonarglist : arglist COMMA argument\n               | argumentargument : test'
    
_lr_action_items = {'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,17,21,22,23,24,25,26,27,28,29,30,31,35,36,37,38,39,41,42,43,44,52,53,68,69,71,72,75,76,77,80,82,83,84,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,114,115,117,121,127,134,136,138,141,145,148,150,151,152,154,160,163,166,167,168,171,175,177,179,181,182,],[3,41,-4,-5,-19,-20,43,-44,-45,-46,-47,-48,-24,-102,-92,-25,-26,-37,-38,-39,-31,-41,-42,-43,-100,-103,-88,-89,-93,-94,-95,-2,-3,-21,75,-40,-99,-77,-86,-90,-91,-22,-23,116,116,128,-27,-29,-13,-14,-15,-16,-17,-18,-101,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-82,-83,-84,-85,-87,-61,-67,116,-49,-55,-96,-97,-63,-6,116,-32,-28,-30,-98,116,-50,174,-62,116,-68,-56,-64,180,-66,116,-65,]),'IF':([0,2,3,4,5,6,8,9,10,11,12,41,42,43,75,114,115,121,127,138,140,141,156,157,160,166,168,169,171,175,179,182,],[14,14,-4,-5,-19,-20,-44,-45,-46,-47,-48,-2,-3,-21,-22,-61,-67,-49,-55,-63,14,-6,14,-70,-50,-62,-68,-69,-56,-64,-66,-65,]),'DEF':([0,2,3,4,5,6,8,9,10,11,12,41,42,43,75,114,115,121,127,138,140,141,156,157,160,166,168,169,171,175,179,182,],[16,16,-4,-5,-19,-20,-44,-45,-46,-47,-48,-2,-3,-21,-22,-61,-67,-49,-55,-63,16,-6,16,-70,-50,-62,-68,-69,-56,-64,-66,-65,]),'WHILE':([0,2,3,4,5,6,8,9,10,11,12,41,42,43,75,114,115,121,127,138,140,141,156,157,160,166,168,169,171,175,179,182,],[18,18,-4,-5,-19,-20,-44,-45,-46,-47,-48,-2,-3,-21,-22,-61,-67,-49,-55,-63,18,-6,18,-70,-50,-62,-68,-69,-56,-64,-66,-65,]),'FOR':([0,2,3,4,5,6,8,9,10,11,12,41,42,43,75,114,115,121,127,138,140,141,156,157,160,166,168,169,171,175,179,182,],[19,19,-4,-5,-19,-20,-44,-45,-46,-47,-48,-2,-3,-21,-22,-61,-67,-49,-55,-63,19,-6,19,-70,-50,-62,-68,-69,-56,-64,-66,-65,]),'STRUCT':([0,2,3,4,5,6,8,9,10,11,12,41,42,43,75,114,115,121,127,138,140,141,156,157,160,166,168,169,171,175,179,182,],[20,20,-4,-5,-19,-20,-44,-45,-46,-47,-48,-2,-3,-21,-22,-61,-67,-49,-55,-63,20,-6,20,-70,-50,-62,-68,-69,-56,-64,-66,-65,]),'RETURN':([0,2,3,4,5,6,8,9,10,11,12,41,42,43,44,75,77,80,114,115,117,121,127,138,140,141,145,154,156,157,160,166,167,168,169,171,175,179,181,182,],[27,27,-4,-5,-19,-20,-44,-45,-46,-47,-48,-2,-3,-21,27,-22,27,27,-61,-67,27,-49,-55,-63,27,-6,27,27,27,-70,-50,-62,27,-68,-69,-56,-64,-66,27,-65,]),'CONTINUE':([0,2,3,4,5,6,8,9,10,11,12,41,42,43,44,75,77,80,114,115,117,121,127,138,140,141,145,154,156,157,160,166,167,168,169,171,175,179,181,182,],[28,28,-4,-5,-19,-20,-44,-45,-46,-47,-48,-2,-3,-21,28,-22,28,28,-61,-67,28,-49,-55,-63,28,-6,28,28,28,-70,-50,-62,28,-68,-69,-56,-64,-66,28,-65,]),'BREAK':([0,2,3,4,5,6,8,9,10,11,12,41,42,43,44,75,77,80,114,115,117,121,127,138,140,141,145,154,156,157,160,166,167,168,169,171,175,179,181,182,],[29,29,-4,-5,-19,-20,-44,-45,-46,-47,-48,-2,-3,-21,29,-22,29,29,-61,-67,29,-49,-55,-63,29,-6,29,29,29,-70,-50,-62,29,-68,-69,-56,-64,-66,29,-65,]),'MINUS':([0,2,3,4,5,6,8,9,10,11,12,14,17,18,27,31,32,33,34,35,36,37,38,39,41,42,43,44,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,80,85,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,114,115,117,121,127,132,134,135,136,138,139,140,141,145,149,152,154,156,157,160,166,167,168,169,171,175,179,181,182,],[32,32,-4,-5,-19,-20,-44,-45,-46,-47,-48,32,-92,32,32,55,32,32,32,-88,-89,-93,-94,-95,-2,-3,-21,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-77,55,55,-90,-91,32,32,-22,32,32,32,-71,-72,-73,-74,-75,-76,55,55,55,55,55,55,55,55,-87,32,-61,-67,32,-49,-55,32,-96,32,-97,-63,32,32,-6,32,32,-98,32,32,-70,-50,-62,32,-68,-69,-56,-64,-66,32,-65,]),'NOT':([0,2,3,4,5,6,8,9,10,11,12,14,18,27,32,33,34,41,42,43,44,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,73,74,75,77,80,85,109,114,115,117,121,127,132,135,138,139,140,141,145,149,154,156,157,160,166,167,168,169,171,175,179,181,182,],[33,33,-4,-5,-19,-20,-44,-45,-46,-47,-48,33,33,33,33,33,33,-2,-3,-21,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-22,33,33,33,33,-61,-67,33,-49,-55,33,33,-63,33,33,-6,33,33,33,33,-70,-50,-62,33,-68,-69,-56,-64,-66,33,-65,]),'LPAR':([0,2,3,4,5,6,8,9,10,11,12,14,17,18,27,32,33,34,36,37,38,39,41,42,43,44,46,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,73,74,75,77,80,85,109,114,115,117,121,122,124,126,127,132,135,138,139,140,141,145,149,154,156,157,160,166,167,168,169,171,175,179,181,182,],[34,34,-4,-5,-19,-20,-44,-45,-46,-47,-48,34,-92,34,34,34,34,34,73,-93,-94,-95,-2,-3,-21,34,79,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-22,34,34,34,34,-61,-67,34,-49,-92,-95,73,-55,34,34,-63,34,34,-6,34,34,34,34,-70,-50,-62,34,-68,-69,-56,-64,-66,34,-65,]),'NAME':([0,2,3,4,5,6,8,9,10,11,12,14,16,18,19,20,27,32,33,34,41,42,43,44,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,73,74,75,77,79,80,81,85,109,114,115,117,121,127,132,135,138,139,140,141,143,144,145,147,149,154,156,157,160,162,166,167,168,169,170,171,173,174,175,179,180,181,182,],[17,17,-4,-5,-19,-20,-44,-45,-46,-47,-48,17,46,17,48,49,17,17,17,17,-2,-3,-21,17,17,92,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-22,17,120,17,122,17,17,-61,-67,17,-49,-55,17,17,-63,17,17,-6,158,92,17,163,17,17,17,-70,-50,163,-62,17,-68,-69,92,-56,92,-60,-64,-66,-59,17,-65,]),'NUMBER':([0,2,3,4,5,6,8,9,10,11,12,14,18,27,32,33,34,41,42,43,44,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,73,74,75,77,80,81,85,109,114,115,117,121,127,132,135,138,139,140,141,145,149,154,156,157,160,166,167,168,169,171,175,179,181,182,],[37,37,-4,-5,-19,-20,-44,-45,-46,-47,-48,37,37,37,37,37,37,-2,-3,-21,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-22,37,37,37,37,37,-61,-67,37,-49,-55,37,37,-63,37,37,-6,37,37,37,37,-70,-50,-62,37,-68,-69,-56,-64,-66,37,-65,]),'FLOAT':([0,2,3,4,5,6,8,9,10,11,12,14,18,27,32,33,34,41,42,43,44,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,73,74,75,77,80,81,85,109,114,115,117,121,127,132,135,138,139,140,141,144,145,149,154,156,157,160,166,167,168,169,170,171,173,175,179,181,182,],[38,38,-4,-5,-19,-20,-44,-45,-46,-47,-48,38,38,38,38,38,38,-2,-3,-21,38,38,89,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-22,38,38,38,38,38,-61,-67,38,-49,-55,38,38,-63,38,38,-6,89,38,38,38,38,-70,-50,-62,38,-68,-69,89,-56,89,-64,-66,38,-65,]),'STRING':([0,2,3,4,5,6,8,9,10,11,12,14,18,27,32,33,34,41,42,43,44,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,73,74,75,77,80,81,85,109,114,115,117,121,127,132,135,138,139,140,141,145,149,154,156,157,160,166,167,168,169,171,175,179,181,182,],[39,39,-4,-5,-19,-20,-44,-45,-46,-47,-48,39,39,39,39,39,39,-2,-3,-21,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-22,39,39,124,39,39,-61,-67,39,-49,-55,39,39,-63,39,39,-6,39,39,39,39,-70,-50,-62,39,-68,-69,-56,-64,-66,39,-65,]),'$end':([1,40,],[0,-1,]),'ENDMARKER':([2,3,4,5,6,8,9,10,11,12,41,42,43,75,114,115,121,127,138,141,160,166,168,171,175,179,182,],[40,-4,-5,-19,-20,-44,-45,-46,-47,-48,-2,-3,-21,-22,-61,-67,-49,-55,-63,-6,-50,-62,-68,-56,-64,-66,-65,]),'DEDENT':([5,6,8,9,10,11,12,43,75,114,115,121,127,138,141,156,157,160,161,162,166,168,169,171,172,174,175,179,180,182,],[-19,-20,-44,-45,-46,-47,-48,-21,-22,-61,-67,-49,-55,-63,-6,168,-70,-50,171,-58,-62,-68,-69,-56,-57,-60,-64,-66,-59,-65,]),'SEMICOLON':([7,13,15,17,21,22,23,24,25,26,27,28,29,30,31,35,36,37,38,39,52,53,68,69,71,72,76,83,84,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,134,136,148,150,151,152,],[44,-24,-102,-92,-25,-26,-37,-38,-39,-31,-41,-42,-43,-100,-103,-88,-89,-93,-94,-95,-40,-99,-77,-86,-90,-91,-23,-27,-29,-101,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-82,-83,-84,-85,-87,-96,-97,-32,-28,-30,-98,]),'COMMA':([15,17,30,31,35,36,37,38,39,68,69,71,72,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,112,119,120,129,130,131,134,136,148,152,153,158,159,164,165,176,],[-102,-92,53,-103,-88,-89,-93,-94,-95,-77,-86,-90,-91,-13,-14,-15,-16,-17,-18,-101,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-82,-83,-84,-85,-87,135,-105,-106,143,-12,149,-35,-36,-96,-97,-32,-98,-104,-10,-11,-33,-34,-9,]),'ASSIGN':([15,17,26,30,31,35,36,37,38,39,53,68,69,71,72,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,134,136,152,],[-102,-92,50,-100,-103,-88,-89,-93,-94,-95,-99,-77,-86,-90,-91,132,-13,-14,-15,-16,-17,-18,-101,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-82,-83,-84,-85,-87,-96,-97,-98,]),'COLON':([15,17,26,30,31,35,36,37,38,39,45,47,49,53,68,69,71,72,78,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,118,120,122,123,124,125,134,136,137,142,146,148,152,155,158,163,178,],[-102,-92,51,-100,-103,-88,-89,-93,-94,-95,77,80,82,-99,-77,-86,-90,-91,117,-101,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-82,-83,-84,-85,-87,-7,144,-53,145,-51,-52,-96,-97,154,-8,-54,-32,-98,167,170,173,181,]),'LBRA':([17,36,37,38,39,50,72,81,85,132,136,149,152,],[-92,74,-93,-94,-95,85,109,85,85,85,-97,85,-98,]),'PLUS':([17,31,35,36,37,38,39,68,69,70,71,72,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,134,136,152,],[-92,54,-88,-89,-93,-94,-95,-77,54,54,-90,-91,-71,-72,-73,-74,-75,-76,54,54,54,54,54,54,54,54,-87,-96,-97,-98,]),'MULT':([17,31,35,36,37,38,39,68,69,70,71,72,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,134,136,152,],[-92,56,-88,-89,-93,-94,-95,-77,56,56,-90,-91,56,56,-73,-74,-75,-76,56,56,56,56,56,56,56,56,-87,-96,-97,-98,]),'DIV':([17,31,35,36,37,38,39,68,69,70,71,72,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,134,136,152,],[-92,57,-88,-89,-93,-94,-95,-77,57,57,-90,-91,57,57,-73,-74,-75,-76,57,57,57,57,57,57,57,57,-87,-96,-97,-98,]),'MOD':([17,31,35,36,37,38,39,68,69,70,71,72,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,134,136,152,],[-92,58,-88,-89,-93,-94,-95,-77,58,58,-90,-91,58,58,-73,-74,-75,-76,58,58,58,58,58,58,58,58,-87,-96,-97,-98,]),'POTENCIA':([17,31,35,36,37,38,39,68,69,70,71,72,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,134,136,152,],[-92,59,-88,-89,-93,-94,-95,59,59,59,-90,-91,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-87,-96,-97,-98,]),'NEQ':([17,31,35,36,37,38,39,68,69,70,71,72,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,134,136,152,],[-92,60,-88,-89,-93,-94,-95,-77,60,60,-90,-91,-71,-72,-73,-74,-75,-76,-78,-79,60,60,60,60,60,60,-87,-96,-97,-98,]),'EQ':([17,31,35,36,37,38,39,68,69,70,71,72,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,134,136,152,],[-92,61,-88,-89,-93,-94,-95,-77,61,61,-90,-91,-71,-72,-73,-74,-75,-76,-78,-79,61,61,61,61,61,61,-87,-96,-97,-98,]),'LT':([17,31,35,36,37,38,39,68,69,70,71,72,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,134,136,152,],[-92,62,-88,-89,-93,-94,-95,-77,62,62,-90,-91,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-82,-83,62,62,-87,-96,-97,-98,]),'GT':([17,31,35,36,37,38,39,68,69,70,71,72,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,134,136,152,],[-92,63,-88,-89,-93,-94,-95,-77,63,63,-90,-91,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-82,-83,63,63,-87,-96,-97,-98,]),'LEQ':([17,31,35,36,37,38,39,68,69,70,71,72,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,134,136,152,],[-92,64,-88,-89,-93,-94,-95,-77,64,64,-90,-91,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-82,-83,64,64,-87,-96,-97,-98,]),'GEQ':([17,31,35,36,37,38,39,68,69,70,71,72,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,134,136,152,],[-92,65,-88,-89,-93,-94,-95,-77,65,65,-90,-91,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-82,-83,65,65,-87,-96,-97,-98,]),'AND':([17,31,35,36,37,38,39,68,69,70,71,72,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,134,136,152,],[-92,66,-88,-89,-93,-94,-95,-77,-86,66,-90,-91,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-82,-83,-84,66,-87,-96,-97,-98,]),'OR':([17,31,35,36,37,38,39,68,69,70,71,72,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,134,136,152,],[-92,67,-88,-89,-93,-94,-95,-77,-86,67,-90,-91,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-82,-83,-84,-85,-87,-96,-97,-98,]),'RPAR':([17,31,35,36,37,38,39,68,69,70,71,72,79,87,88,89,90,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,112,119,120,134,136,152,153,158,159,176,],[-92,-103,-88,-89,-93,-94,-95,-77,-86,108,-90,-91,118,-13,-14,-15,-16,-17,-18,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-82,-83,-84,-85,-87,134,-105,-106,142,-12,-96,-97,-98,-104,-10,-11,-9,]),'RBRA':([17,31,35,36,37,38,39,68,69,71,72,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,113,129,130,131,133,134,136,148,152,164,165,],[-92,-103,-88,-89,-93,-94,-95,-77,-86,-90,-91,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-82,-83,-84,-85,-87,136,148,-35,-36,152,-96,-97,-32,-98,-33,-34,]),'ELSE':([43,75,114,115,168,175,],[-21,-22,137,-67,-68,178,]),'ELIF':([43,75,114,115,168,175,],[-21,-22,139,-67,-68,139,]),'IN':([48,],[81,]),'STR':([51,144,170,173,],[87,87,87,87,]),'INT':([51,144,170,173,],[88,88,88,88,]),'BOOL':([51,144,170,173,],[90,90,90,90,]),'LIST':([51,144,170,173,],[91,91,91,91,]),'INDENT':([116,128,],[140,147,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file_input_end':([0,],[1,]),'file_input':([0,],[2,]),'stmt':([0,2,140,156,],[4,42,157,169,]),'simple_stmt':([0,2,77,80,117,140,145,154,156,167,181,],[5,5,115,115,115,5,115,115,5,115,115,]),'compound_stmt':([0,2,140,156,],[6,6,6,6,]),'small_stmts':([0,2,77,80,117,140,145,154,156,167,181,],[7,7,7,7,7,7,7,7,7,7,7,]),'if_stmt':([0,2,140,156,],[8,8,8,8,]),'funcdef':([0,2,140,156,],[9,9,9,9,]),'while_loop':([0,2,140,156,],[10,10,10,10,]),'for_loop':([0,2,140,156,],[11,11,11,11,]),'struct_def':([0,2,140,156,],[12,12,12,12,]),'small_stmt':([0,2,44,77,80,117,140,145,154,156,167,181,],[13,13,76,13,13,13,13,13,13,13,13,13,]),'test':([0,2,14,18,27,44,50,53,73,74,77,80,85,109,117,132,135,139,140,145,149,154,156,167,181,],[15,15,45,47,15,15,15,93,112,113,15,15,130,133,15,15,112,155,15,15,164,15,15,15,15,]),'flow_stmt':([0,2,44,77,80,117,140,145,154,156,167,181,],[21,21,21,21,21,21,21,21,21,21,21,21,]),'expr_stmt':([0,2,44,77,80,117,140,145,154,156,167,181,],[22,22,22,22,22,22,22,22,22,22,22,22,]),'return_stmt':([0,2,44,77,80,117,140,145,154,156,167,181,],[23,23,23,23,23,23,23,23,23,23,23,23,]),'continue_stmt':([0,2,44,77,80,117,140,145,154,156,167,181,],[24,24,24,24,24,24,24,24,24,24,24,24,]),'break_stmt':([0,2,44,77,80,117,140,145,154,156,167,181,],[25,25,25,25,25,25,25,25,25,25,25,25,]),'testlist':([0,2,27,44,50,77,80,117,132,140,145,154,156,167,181,],[26,26,52,26,83,26,26,26,150,26,26,26,26,26,26,]),'testlist_multi':([0,2,27,44,50,77,80,117,132,140,145,154,156,167,181,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'comparison':([0,2,14,18,27,32,33,34,44,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,73,74,77,80,85,109,117,132,135,139,140,145,149,154,156,167,181,],[31,31,31,31,31,68,69,70,31,31,31,94,95,96,97,98,99,100,101,102,103,104,105,106,107,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'power':([0,2,14,18,27,32,33,34,44,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,73,74,77,80,85,109,117,132,135,139,140,145,149,154,156,167,181,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'atom':([0,2,14,18,27,32,33,34,44,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,73,74,77,80,81,85,109,117,132,135,139,140,145,149,154,156,167,181,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,126,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'trailer':([36,126,],[71,146,]),'list_index':([36,],[72,]),'parameters':([46,],[78,]),'list_def':([50,81,85,132,149,],[84,125,131,151,165,]),'type':([51,144,170,173,],[86,159,176,177,]),'arglist':([73,],[110,]),'argument':([73,135,],[111,153,]),'suite':([77,80,117,145,154,167,181,],[114,121,141,160,166,175,182,]),'varargslist':([79,],[119,]),'range':([81,],[123,]),'struct_body':([82,],[127,]),'list_elem':([85,],[129,]),'else_if_list':([114,175,],[138,179,]),'stmts':([140,],[156,]),'struct_fields':([147,162,],[161,172,]),'struct_field':([147,162,],[162,162,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file_input_end","S'",1,None,None,None),
  ('file_input_end -> file_input ENDMARKER','file_input_end',2,'p_file_input_end','ptp_parser.py',429),
  ('file_input -> file_input NEWLINE','file_input',2,'p_file_input','ptp_parser.py',436),
  ('file_input -> file_input stmt','file_input',2,'p_file_input','ptp_parser.py',437),
  ('file_input -> NEWLINE','file_input',1,'p_file_input','ptp_parser.py',438),
  ('file_input -> stmt','file_input',1,'p_file_input','ptp_parser.py',439),
  ('funcdef -> DEF NAME parameters COLON suite','funcdef',5,'p_funcdef','ptp_parser.py',466),
  ('parameters -> LPAR RPAR','parameters',2,'p_parameters','ptp_parser.py',477),
  ('parameters -> LPAR varargslist RPAR','parameters',3,'p_parameters','ptp_parser.py',478),
  ('varargslist -> varargslist COMMA NAME COLON type','varargslist',5,'p_varargslist','ptp_parser.py',488),
  ('varargslist -> varargslist COMMA NAME','varargslist',3,'p_varargslist','ptp_parser.py',489),
  ('varargslist -> NAME COLON type','varargslist',3,'p_varargslist','ptp_parser.py',490),
  ('varargslist -> NAME','varargslist',1,'p_varargslist','ptp_parser.py',491),
  ('type -> STR','type',1,'p_type','ptp_parser.py',527),
  ('type -> INT','type',1,'p_type','ptp_parser.py',528),
  ('type -> FLOAT','type',1,'p_type','ptp_parser.py',529),
  ('type -> BOOL','type',1,'p_type','ptp_parser.py',530),
  ('type -> LIST','type',1,'p_type','ptp_parser.py',531),
  ('type -> NAME','type',1,'p_type','ptp_parser.py',532),
  ('stmt -> simple_stmt','stmt',1,'p_stmt_simple','ptp_parser.py',541),
  ('stmt -> compound_stmt','stmt',1,'p_stmt_compound','ptp_parser.py',548),
  ('simple_stmt -> small_stmts NEWLINE','simple_stmt',2,'p_simple_stmt','ptp_parser.py',555),
  ('simple_stmt -> small_stmts SEMICOLON NEWLINE','simple_stmt',3,'p_simple_stmt','ptp_parser.py',556),
  ('small_stmts -> small_stmts SEMICOLON small_stmt','small_stmts',3,'p_small_stmts','ptp_parser.py',563),
  ('small_stmts -> small_stmt','small_stmts',1,'p_small_stmts','ptp_parser.py',564),
  ('small_stmt -> flow_stmt','small_stmt',1,'p_small_stmt','ptp_parser.py',579),
  ('small_stmt -> expr_stmt','small_stmt',1,'p_small_stmt','ptp_parser.py',580),
  ('expr_stmt -> testlist ASSIGN testlist','expr_stmt',3,'p_expr_stmt','ptp_parser.py',592),
  ('expr_stmt -> testlist COLON type ASSIGN testlist','expr_stmt',5,'p_expr_stmt','ptp_parser.py',593),
  ('expr_stmt -> testlist ASSIGN list_def','expr_stmt',3,'p_expr_stmt','ptp_parser.py',594),
  ('expr_stmt -> testlist COLON type ASSIGN list_def','expr_stmt',5,'p_expr_stmt','ptp_parser.py',595),
  ('expr_stmt -> testlist','expr_stmt',1,'p_expr_stmt','ptp_parser.py',596),
  ('list_def -> LBRA list_elem RBRA','list_def',3,'p_list_def','ptp_parser.py',618),
  ('list_elem -> list_elem COMMA test','list_elem',3,'p_list_elem','ptp_parser.py',626),
  ('list_elem -> list_elem COMMA list_def','list_elem',3,'p_list_elem','ptp_parser.py',627),
  ('list_elem -> test','list_elem',1,'p_list_elem','ptp_parser.py',628),
  ('list_elem -> list_def','list_elem',1,'p_list_elem','ptp_parser.py',629),
  ('flow_stmt -> return_stmt','flow_stmt',1,'p_flow_stmt','ptp_parser.py',641),
  ('flow_stmt -> continue_stmt','flow_stmt',1,'p_flow_stmt','ptp_parser.py',642),
  ('flow_stmt -> break_stmt','flow_stmt',1,'p_flow_stmt','ptp_parser.py',643),
  ('return_stmt -> RETURN testlist','return_stmt',2,'p_return_stmt','ptp_parser.py',651),
  ('return_stmt -> RETURN','return_stmt',1,'p_return_stmt','ptp_parser.py',652),
  ('continue_stmt -> CONTINUE','continue_stmt',1,'p_continue_stmt','ptp_parser.py',663),
  ('break_stmt -> BREAK','break_stmt',1,'p_break_stmt','ptp_parser.py',672),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','ptp_parser.py',680),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','ptp_parser.py',681),
  ('compound_stmt -> while_loop','compound_stmt',1,'p_compound_stmt','ptp_parser.py',682),
  ('compound_stmt -> for_loop','compound_stmt',1,'p_compound_stmt','ptp_parser.py',683),
  ('compound_stmt -> struct_def','compound_stmt',1,'p_compound_stmt','ptp_parser.py',684),
  ('while_loop -> WHILE test COLON suite','while_loop',4,'p_while_loop','ptp_parser.py',688),
  ('for_loop -> FOR NAME IN range COLON suite','for_loop',6,'p_for_loop','ptp_parser.py',696),
  ('range -> STRING','range',1,'p_range','ptp_parser.py',706),
  ('range -> list_def','range',1,'p_range','ptp_parser.py',707),
  ('range -> NAME','range',1,'p_range','ptp_parser.py',708),
  ('range -> atom trailer','range',2,'p_range','ptp_parser.py',709),
  ('struct_def -> STRUCT NAME COLON struct_body','struct_def',4,'p_struct_def','ptp_parser.py',726),
  ('struct_body -> NEWLINE INDENT struct_fields DEDENT','struct_body',4,'p_struct_body','ptp_parser.py',734),
  ('struct_fields -> struct_field struct_fields','struct_fields',2,'p_struct_fields','ptp_parser.py',739),
  ('struct_fields -> struct_field','struct_fields',1,'p_struct_fields','ptp_parser.py',740),
  ('struct_field -> NAME COLON type NEWLINE','struct_field',4,'p_struct_field','ptp_parser.py',748),
  ('struct_field -> NAME NEWLINE','struct_field',2,'p_struct_field','ptp_parser.py',749),
  ('if_stmt -> IF test COLON suite','if_stmt',4,'p_if_stmt','ptp_parser.py',759),
  ('if_stmt -> IF test COLON suite ELSE COLON suite','if_stmt',7,'p_if_stmt','ptp_parser.py',760),
  ('if_stmt -> IF test COLON suite else_if_list','if_stmt',5,'p_if_stmt','ptp_parser.py',761),
  ('else_if_list -> ELIF test COLON suite','else_if_list',4,'p_else_if_list','ptp_parser.py',785),
  ('else_if_list -> ELIF test COLON suite ELSE COLON suite','else_if_list',7,'p_else_if_list','ptp_parser.py',786),
  ('else_if_list -> ELIF test COLON suite else_if_list','else_if_list',5,'p_else_if_list','ptp_parser.py',787),
  ('suite -> simple_stmt','suite',1,'p_suite','ptp_parser.py',808),
  ('suite -> NEWLINE INDENT stmts DEDENT','suite',4,'p_suite','ptp_parser.py',809),
  ('stmts -> stmts stmt','stmts',2,'p_stmts','ptp_parser.py',817),
  ('stmts -> stmt','stmts',1,'p_stmts','ptp_parser.py',818),
  ('comparison -> comparison PLUS comparison','comparison',3,'p_comparison','ptp_parser.py',887),
  ('comparison -> comparison MINUS comparison','comparison',3,'p_comparison','ptp_parser.py',888),
  ('comparison -> comparison MULT comparison','comparison',3,'p_comparison','ptp_parser.py',889),
  ('comparison -> comparison DIV comparison','comparison',3,'p_comparison','ptp_parser.py',890),
  ('comparison -> comparison MOD comparison','comparison',3,'p_comparison','ptp_parser.py',891),
  ('comparison -> comparison POTENCIA comparison','comparison',3,'p_comparison','ptp_parser.py',892),
  ('comparison -> MINUS comparison','comparison',2,'p_comparison','ptp_parser.py',893),
  ('comparison -> comparison NEQ comparison','comparison',3,'p_comparison','ptp_parser.py',894),
  ('comparison -> comparison EQ comparison','comparison',3,'p_comparison','ptp_parser.py',895),
  ('comparison -> comparison LT comparison','comparison',3,'p_comparison','ptp_parser.py',896),
  ('comparison -> comparison GT comparison','comparison',3,'p_comparison','ptp_parser.py',897),
  ('comparison -> comparison LEQ comparison','comparison',3,'p_comparison','ptp_parser.py',898),
  ('comparison -> comparison GEQ comparison','comparison',3,'p_comparison','ptp_parser.py',899),
  ('comparison -> comparison AND comparison','comparison',3,'p_comparison','ptp_parser.py',900),
  ('comparison -> comparison OR comparison','comparison',3,'p_comparison','ptp_parser.py',901),
  ('comparison -> NOT comparison','comparison',2,'p_comparison','ptp_parser.py',902),
  ('comparison -> LPAR comparison RPAR','comparison',3,'p_comparison','ptp_parser.py',903),
  ('comparison -> power','comparison',1,'p_comparison','ptp_parser.py',904),
  ('power -> atom','power',1,'p_power','ptp_parser.py',926),
  ('power -> atom trailer','power',2,'p_power','ptp_parser.py',927),
  ('power -> atom list_index','power',2,'p_power','ptp_parser.py',928),
  ('atom -> NAME','atom',1,'p_atom_name','ptp_parser.py',949),
  ('atom -> NUMBER','atom',1,'p_atom_number','ptp_parser.py',955),
  ('atom -> FLOAT','atom',1,'p_atom_float','ptp_parser.py',960),
  ('atom -> STRING','atom',1,'p_atom_string','ptp_parser.py',966),
  ('trailer -> LPAR arglist RPAR','trailer',3,'p_trailer','ptp_parser.py',978),
  ('list_index -> LBRA test RBRA','list_index',3,'p_list','ptp_parser.py',982),
  ('list_index -> list_index LBRA test RBRA','list_index',4,'p_list','ptp_parser.py',983),
  ('testlist -> testlist_multi COMMA','testlist',2,'p_testlist','ptp_parser.py',996),
  ('testlist -> testlist_multi','testlist',1,'p_testlist','ptp_parser.py',997),
  ('testlist_multi -> testlist_multi COMMA test','testlist_multi',3,'p_testlist_multi','ptp_parser.py',1014),
  ('testlist_multi -> test','testlist_multi',1,'p_testlist_multi','ptp_parser.py',1015),
  ('test -> comparison','test',1,'p_test','ptp_parser.py',1033),
  ('arglist -> arglist COMMA argument','arglist',3,'p_arglist','ptp_parser.py',1040),
  ('arglist -> argument','arglist',1,'p_arglist','ptp_parser.py',1041),
  ('argument -> test','argument',1,'p_argument','ptp_parser.py',1051),
]
