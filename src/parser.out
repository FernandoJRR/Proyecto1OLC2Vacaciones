Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    WS

Grammar

Rule 0     S' -> file_input_end
Rule 1     file_input_end -> file_input ENDMARKER
Rule 2     file_input -> file_input NEWLINE
Rule 3     file_input -> file_input stmt
Rule 4     file_input -> NEWLINE
Rule 5     file_input -> stmt
Rule 6     funcdef -> DEF NAME parameters COLON suite
Rule 7     funcdef -> DEF NAME parameters RETYPE type COLON suite
Rule 8     parameters -> LPAR RPAR
Rule 9     parameters -> LPAR varargslist RPAR
Rule 10    varargslist -> varargslist COMMA NAME COLON type
Rule 11    varargslist -> varargslist COMMA NAME
Rule 12    varargslist -> NAME COLON type
Rule 13    varargslist -> NAME
Rule 14    type -> STR
Rule 15    type -> INT
Rule 16    type -> FLOAT
Rule 17    type -> BOOL
Rule 18    type -> LIST
Rule 19    type -> NAME
Rule 20    stmt -> simple_stmt
Rule 21    stmt -> compound_stmt
Rule 22    simple_stmt -> small_stmts NEWLINE
Rule 23    simple_stmt -> small_stmts SEMICOLON NEWLINE
Rule 24    small_stmts -> small_stmts SEMICOLON small_stmt
Rule 25    small_stmts -> small_stmt
Rule 26    small_stmt -> flow_stmt
Rule 27    small_stmt -> expr_stmt
Rule 28    expr_stmt -> testlist ASSIGN testlist
Rule 29    expr_stmt -> atom list_index ASSIGN testlist
Rule 30    expr_stmt -> testlist COLON type ASSIGN testlist
Rule 31    expr_stmt -> testlist ASSIGN list_def
Rule 32    expr_stmt -> testlist COLON type ASSIGN list_def
Rule 33    expr_stmt -> testlist
Rule 34    list_def -> LBRA list_elem RBRA
Rule 35    list_elem -> list_elem COMMA test
Rule 36    list_elem -> list_elem COMMA list_def
Rule 37    list_elem -> test
Rule 38    list_elem -> list_def
Rule 39    flow_stmt -> return_stmt
Rule 40    flow_stmt -> continue_stmt
Rule 41    flow_stmt -> break_stmt
Rule 42    return_stmt -> RETURN testlist
Rule 43    return_stmt -> RETURN
Rule 44    continue_stmt -> CONTINUE
Rule 45    break_stmt -> BREAK
Rule 46    compound_stmt -> if_stmt
Rule 47    compound_stmt -> funcdef
Rule 48    compound_stmt -> while_loop
Rule 49    compound_stmt -> for_loop
Rule 50    compound_stmt -> struct_def
Rule 51    while_loop -> WHILE test COLON suite
Rule 52    for_loop -> FOR NAME IN range COLON suite
Rule 53    range -> string_range
Rule 54    range -> name_range
Rule 55    range -> list_def
Rule 56    range -> atom trailer
Rule 57    range -> atom list_index
Rule 58    string_range -> STRING
Rule 59    name_range -> NAME
Rule 60    struct_def -> STRUCT NAME COLON struct_body
Rule 61    struct_body -> NEWLINE INDENT struct_fields DEDENT
Rule 62    struct_fields -> struct_field struct_fields
Rule 63    struct_fields -> struct_field
Rule 64    struct_field -> NAME COLON type NEWLINE
Rule 65    struct_field -> NAME NEWLINE
Rule 66    par_test -> LPAR atom RPAR
Rule 67    par_test -> test
Rule 68    if_stmt -> IF par_test COLON suite
Rule 69    if_stmt -> IF par_test COLON suite ELSE COLON suite
Rule 70    if_stmt -> IF par_test COLON suite else_if_list
Rule 71    else_if_list -> ELIF par_test COLON suite
Rule 72    else_if_list -> ELIF par_test COLON suite ELSE COLON suite
Rule 73    else_if_list -> ELIF par_test COLON suite else_if_list
Rule 74    suite -> simple_stmt
Rule 75    suite -> NEWLINE INDENT stmts DEDENT
Rule 76    stmts -> stmts stmt
Rule 77    stmts -> stmt
Rule 78    comparison -> comparison PLUS comparison
Rule 79    comparison -> comparison MINUS comparison
Rule 80    comparison -> comparison MULT comparison
Rule 81    comparison -> comparison DIV comparison
Rule 82    comparison -> comparison MOD comparison
Rule 83    comparison -> comparison POTENCIA comparison
Rule 84    comparison -> MINUS comparison
Rule 85    comparison -> comparison NEQ comparison
Rule 86    comparison -> comparison EQ comparison
Rule 87    comparison -> comparison LT comparison
Rule 88    comparison -> comparison GT comparison
Rule 89    comparison -> comparison LEQ comparison
Rule 90    comparison -> comparison GEQ comparison
Rule 91    comparison -> comparison AND comparison
Rule 92    comparison -> comparison OR comparison
Rule 93    comparison -> NOT comparison
Rule 94    comparison -> LPAR comparison RPAR
Rule 95    comparison -> power
Rule 96    power -> atom
Rule 97    power -> atom trailer
Rule 98    power -> atom list_index
Rule 99    power -> method
Rule 100   power -> attribute
Rule 101   atom -> NAME
Rule 102   atom -> NUMBER
Rule 103   atom -> FLOAT
Rule 104   atom -> STRING
Rule 105   atom -> TRUE
Rule 106   atom -> FALSE
Rule 107   method -> NAME DOT NAME trailer
Rule 108   method -> LPAR atom RPAR DOT NAME trailer
Rule 109   attribute -> NAME DOT NAME
Rule 110   trailer -> LPAR arglist RPAR
Rule 111   trailer -> LPAR RPAR
Rule 112   list_index -> LBRA test RBRA
Rule 113   list_index -> list_index LBRA test RBRA
Rule 114   testlist -> testlist_multi COMMA
Rule 115   testlist -> testlist_multi
Rule 116   testlist_multi -> testlist_multi COMMA test
Rule 117   testlist_multi -> test
Rule 118   test -> comparison
Rule 119   arglist -> arglist COMMA argument
Rule 120   arglist -> argument
Rule 121   argument -> test

Terminals, with rules where they appear

AND                  : 91
ASSIGN               : 28 29 30 31 32
BOOL                 : 17
BREAK                : 45
COLON                : 6 7 10 12 30 32 51 52 60 64 68 69 69 70 71 72 72 73
COMMA                : 10 11 35 36 114 116 119
CONTINUE             : 44
DEDENT               : 61 75
DEF                  : 6 7
DIV                  : 81
DOT                  : 107 108 109
ELIF                 : 71 72 73
ELSE                 : 69 72
ENDMARKER            : 1
EQ                   : 86
FALSE                : 106
FLOAT                : 16 103
FOR                  : 52
GEQ                  : 90
GT                   : 88
IF                   : 68 69 70
IN                   : 52
INDENT               : 61 75
INT                  : 15
LBRA                 : 34 112 113
LEQ                  : 89
LIST                 : 18
LPAR                 : 8 9 66 94 108 110 111
LT                   : 87
MINUS                : 79 84
MOD                  : 82
MULT                 : 80
NAME                 : 6 7 10 11 12 13 19 52 59 60 64 65 101 107 107 108 109 109
NEQ                  : 85
NEWLINE              : 2 4 22 23 61 64 65 75
NOT                  : 93
NUMBER               : 102
OR                   : 92
PLUS                 : 78
POTENCIA             : 83
RBRA                 : 34 112 113
RETURN               : 42 43
RETYPE               : 7
RPAR                 : 8 9 66 94 108 110 111
SEMICOLON            : 23 24
STR                  : 14
STRING               : 58 104
STRUCT               : 60
TRUE                 : 105
WHILE                : 51
WS                   : 
error                : 

Nonterminals, with rules where they appear

arglist              : 110 119
argument             : 119 120
atom                 : 29 56 57 66 96 97 98 108
attribute            : 100
break_stmt           : 41
comparison           : 78 78 79 79 80 80 81 81 82 82 83 83 84 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 94 118
compound_stmt        : 21
continue_stmt        : 40
else_if_list         : 70 73
expr_stmt            : 27
file_input           : 1 2 3
file_input_end       : 0
flow_stmt            : 26
for_loop             : 49
funcdef              : 47
if_stmt              : 46
list_def             : 31 32 36 38 55
list_elem            : 34 35 36
list_index           : 29 57 98 113
method               : 99
name_range           : 54
par_test             : 68 69 70 71 72 73
parameters           : 6 7
power                : 95
range                : 52
return_stmt          : 39
simple_stmt          : 20 74
small_stmt           : 24 25
small_stmts          : 22 23 24
stmt                 : 3 5 76 77
stmts                : 75 76
string_range         : 53
struct_body          : 60
struct_def           : 50
struct_field         : 62 63
struct_fields        : 61 62
suite                : 6 7 51 52 68 69 69 70 71 72 72 73
test                 : 35 37 51 67 112 113 116 117 121
testlist             : 28 28 29 30 30 31 32 33 42
testlist_multi       : 114 115 116
trailer              : 56 97 107 108
type                 : 7 10 12 30 32 64
varargslist          : 9 10 11
while_loop           : 48

Parsing method: LALR

state 0

    (0) S' -> . file_input_end
    (1) file_input_end -> . file_input ENDMARKER
    (2) file_input -> . file_input NEWLINE
    (3) file_input -> . file_input stmt
    (4) file_input -> . NEWLINE
    (5) file_input -> . stmt
    (20) stmt -> . simple_stmt
    (21) stmt -> . compound_stmt
    (22) simple_stmt -> . small_stmts NEWLINE
    (23) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (46) compound_stmt -> . if_stmt
    (47) compound_stmt -> . funcdef
    (48) compound_stmt -> . while_loop
    (49) compound_stmt -> . for_loop
    (50) compound_stmt -> . struct_def
    (24) small_stmts -> . small_stmts SEMICOLON small_stmt
    (25) small_stmts -> . small_stmt
    (68) if_stmt -> . IF par_test COLON suite
    (69) if_stmt -> . IF par_test COLON suite ELSE COLON suite
    (70) if_stmt -> . IF par_test COLON suite else_if_list
    (6) funcdef -> . DEF NAME parameters COLON suite
    (7) funcdef -> . DEF NAME parameters RETYPE type COLON suite
    (51) while_loop -> . WHILE test COLON suite
    (52) for_loop -> . FOR NAME IN range COLON suite
    (60) struct_def -> . STRUCT NAME COLON struct_body
    (26) small_stmt -> . flow_stmt
    (27) small_stmt -> . expr_stmt
    (39) flow_stmt -> . return_stmt
    (40) flow_stmt -> . continue_stmt
    (41) flow_stmt -> . break_stmt
    (28) expr_stmt -> . testlist ASSIGN testlist
    (29) expr_stmt -> . atom list_index ASSIGN testlist
    (30) expr_stmt -> . testlist COLON type ASSIGN testlist
    (31) expr_stmt -> . testlist ASSIGN list_def
    (32) expr_stmt -> . testlist COLON type ASSIGN list_def
    (33) expr_stmt -> . testlist
    (42) return_stmt -> . RETURN testlist
    (43) return_stmt -> . RETURN
    (44) continue_stmt -> . CONTINUE
    (45) break_stmt -> . BREAK
    (114) testlist -> . testlist_multi COMMA
    (115) testlist -> . testlist_multi
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (116) testlist_multi -> . testlist_multi COMMA test
    (117) testlist_multi -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    NEWLINE         shift and go to state 3
    IF              shift and go to state 14
    DEF             shift and go to state 15
    WHILE           shift and go to state 17
    FOR             shift and go to state 19
    STRUCT          shift and go to state 20
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40

    file_input_end                 shift and go to state 1
    file_input                     shift and go to state 2
    stmt                           shift and go to state 4
    simple_stmt                    shift and go to state 5
    compound_stmt                  shift and go to state 6
    small_stmts                    shift and go to state 7
    if_stmt                        shift and go to state 8
    funcdef                        shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    struct_def                     shift and go to state 12
    small_stmt                     shift and go to state 13
    test                           shift and go to state 18
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    atom                           shift and go to state 27
    testlist_multi                 shift and go to state 31
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 1

    (0) S' -> file_input_end .



state 2

    (1) file_input_end -> file_input . ENDMARKER
    (2) file_input -> file_input . NEWLINE
    (3) file_input -> file_input . stmt
    (20) stmt -> . simple_stmt
    (21) stmt -> . compound_stmt
    (22) simple_stmt -> . small_stmts NEWLINE
    (23) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (46) compound_stmt -> . if_stmt
    (47) compound_stmt -> . funcdef
    (48) compound_stmt -> . while_loop
    (49) compound_stmt -> . for_loop
    (50) compound_stmt -> . struct_def
    (24) small_stmts -> . small_stmts SEMICOLON small_stmt
    (25) small_stmts -> . small_stmt
    (68) if_stmt -> . IF par_test COLON suite
    (69) if_stmt -> . IF par_test COLON suite ELSE COLON suite
    (70) if_stmt -> . IF par_test COLON suite else_if_list
    (6) funcdef -> . DEF NAME parameters COLON suite
    (7) funcdef -> . DEF NAME parameters RETYPE type COLON suite
    (51) while_loop -> . WHILE test COLON suite
    (52) for_loop -> . FOR NAME IN range COLON suite
    (60) struct_def -> . STRUCT NAME COLON struct_body
    (26) small_stmt -> . flow_stmt
    (27) small_stmt -> . expr_stmt
    (39) flow_stmt -> . return_stmt
    (40) flow_stmt -> . continue_stmt
    (41) flow_stmt -> . break_stmt
    (28) expr_stmt -> . testlist ASSIGN testlist
    (29) expr_stmt -> . atom list_index ASSIGN testlist
    (30) expr_stmt -> . testlist COLON type ASSIGN testlist
    (31) expr_stmt -> . testlist ASSIGN list_def
    (32) expr_stmt -> . testlist COLON type ASSIGN list_def
    (33) expr_stmt -> . testlist
    (42) return_stmt -> . RETURN testlist
    (43) return_stmt -> . RETURN
    (44) continue_stmt -> . CONTINUE
    (45) break_stmt -> . BREAK
    (114) testlist -> . testlist_multi COMMA
    (115) testlist -> . testlist_multi
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (116) testlist_multi -> . testlist_multi COMMA test
    (117) testlist_multi -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    ENDMARKER       shift and go to state 44
    NEWLINE         shift and go to state 45
    IF              shift and go to state 14
    DEF             shift and go to state 15
    WHILE           shift and go to state 17
    FOR             shift and go to state 19
    STRUCT          shift and go to state 20
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40

    stmt                           shift and go to state 46
    simple_stmt                    shift and go to state 5
    compound_stmt                  shift and go to state 6
    small_stmts                    shift and go to state 7
    if_stmt                        shift and go to state 8
    funcdef                        shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    struct_def                     shift and go to state 12
    small_stmt                     shift and go to state 13
    test                           shift and go to state 18
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    atom                           shift and go to state 27
    testlist_multi                 shift and go to state 31
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 3

    (4) file_input -> NEWLINE .

    ENDMARKER       reduce using rule 4 (file_input -> NEWLINE .)
    NEWLINE         reduce using rule 4 (file_input -> NEWLINE .)
    IF              reduce using rule 4 (file_input -> NEWLINE .)
    DEF             reduce using rule 4 (file_input -> NEWLINE .)
    WHILE           reduce using rule 4 (file_input -> NEWLINE .)
    FOR             reduce using rule 4 (file_input -> NEWLINE .)
    STRUCT          reduce using rule 4 (file_input -> NEWLINE .)
    RETURN          reduce using rule 4 (file_input -> NEWLINE .)
    CONTINUE        reduce using rule 4 (file_input -> NEWLINE .)
    BREAK           reduce using rule 4 (file_input -> NEWLINE .)
    NAME            reduce using rule 4 (file_input -> NEWLINE .)
    NUMBER          reduce using rule 4 (file_input -> NEWLINE .)
    FLOAT           reduce using rule 4 (file_input -> NEWLINE .)
    STRING          reduce using rule 4 (file_input -> NEWLINE .)
    TRUE            reduce using rule 4 (file_input -> NEWLINE .)
    FALSE           reduce using rule 4 (file_input -> NEWLINE .)
    MINUS           reduce using rule 4 (file_input -> NEWLINE .)
    NOT             reduce using rule 4 (file_input -> NEWLINE .)
    LPAR            reduce using rule 4 (file_input -> NEWLINE .)


state 4

    (5) file_input -> stmt .

    ENDMARKER       reduce using rule 5 (file_input -> stmt .)
    NEWLINE         reduce using rule 5 (file_input -> stmt .)
    IF              reduce using rule 5 (file_input -> stmt .)
    DEF             reduce using rule 5 (file_input -> stmt .)
    WHILE           reduce using rule 5 (file_input -> stmt .)
    FOR             reduce using rule 5 (file_input -> stmt .)
    STRUCT          reduce using rule 5 (file_input -> stmt .)
    RETURN          reduce using rule 5 (file_input -> stmt .)
    CONTINUE        reduce using rule 5 (file_input -> stmt .)
    BREAK           reduce using rule 5 (file_input -> stmt .)
    NAME            reduce using rule 5 (file_input -> stmt .)
    NUMBER          reduce using rule 5 (file_input -> stmt .)
    FLOAT           reduce using rule 5 (file_input -> stmt .)
    STRING          reduce using rule 5 (file_input -> stmt .)
    TRUE            reduce using rule 5 (file_input -> stmt .)
    FALSE           reduce using rule 5 (file_input -> stmt .)
    MINUS           reduce using rule 5 (file_input -> stmt .)
    NOT             reduce using rule 5 (file_input -> stmt .)
    LPAR            reduce using rule 5 (file_input -> stmt .)


state 5

    (20) stmt -> simple_stmt .

    ENDMARKER       reduce using rule 20 (stmt -> simple_stmt .)
    NEWLINE         reduce using rule 20 (stmt -> simple_stmt .)
    IF              reduce using rule 20 (stmt -> simple_stmt .)
    DEF             reduce using rule 20 (stmt -> simple_stmt .)
    WHILE           reduce using rule 20 (stmt -> simple_stmt .)
    FOR             reduce using rule 20 (stmt -> simple_stmt .)
    STRUCT          reduce using rule 20 (stmt -> simple_stmt .)
    RETURN          reduce using rule 20 (stmt -> simple_stmt .)
    CONTINUE        reduce using rule 20 (stmt -> simple_stmt .)
    BREAK           reduce using rule 20 (stmt -> simple_stmt .)
    NAME            reduce using rule 20 (stmt -> simple_stmt .)
    NUMBER          reduce using rule 20 (stmt -> simple_stmt .)
    FLOAT           reduce using rule 20 (stmt -> simple_stmt .)
    STRING          reduce using rule 20 (stmt -> simple_stmt .)
    TRUE            reduce using rule 20 (stmt -> simple_stmt .)
    FALSE           reduce using rule 20 (stmt -> simple_stmt .)
    MINUS           reduce using rule 20 (stmt -> simple_stmt .)
    NOT             reduce using rule 20 (stmt -> simple_stmt .)
    LPAR            reduce using rule 20 (stmt -> simple_stmt .)
    DEDENT          reduce using rule 20 (stmt -> simple_stmt .)


state 6

    (21) stmt -> compound_stmt .

    ENDMARKER       reduce using rule 21 (stmt -> compound_stmt .)
    NEWLINE         reduce using rule 21 (stmt -> compound_stmt .)
    IF              reduce using rule 21 (stmt -> compound_stmt .)
    DEF             reduce using rule 21 (stmt -> compound_stmt .)
    WHILE           reduce using rule 21 (stmt -> compound_stmt .)
    FOR             reduce using rule 21 (stmt -> compound_stmt .)
    STRUCT          reduce using rule 21 (stmt -> compound_stmt .)
    RETURN          reduce using rule 21 (stmt -> compound_stmt .)
    CONTINUE        reduce using rule 21 (stmt -> compound_stmt .)
    BREAK           reduce using rule 21 (stmt -> compound_stmt .)
    NAME            reduce using rule 21 (stmt -> compound_stmt .)
    NUMBER          reduce using rule 21 (stmt -> compound_stmt .)
    FLOAT           reduce using rule 21 (stmt -> compound_stmt .)
    STRING          reduce using rule 21 (stmt -> compound_stmt .)
    TRUE            reduce using rule 21 (stmt -> compound_stmt .)
    FALSE           reduce using rule 21 (stmt -> compound_stmt .)
    MINUS           reduce using rule 21 (stmt -> compound_stmt .)
    NOT             reduce using rule 21 (stmt -> compound_stmt .)
    LPAR            reduce using rule 21 (stmt -> compound_stmt .)
    DEDENT          reduce using rule 21 (stmt -> compound_stmt .)


state 7

    (22) simple_stmt -> small_stmts . NEWLINE
    (23) simple_stmt -> small_stmts . SEMICOLON NEWLINE
    (24) small_stmts -> small_stmts . SEMICOLON small_stmt

    NEWLINE         shift and go to state 47
    SEMICOLON       shift and go to state 48


state 8

    (46) compound_stmt -> if_stmt .

    ENDMARKER       reduce using rule 46 (compound_stmt -> if_stmt .)
    NEWLINE         reduce using rule 46 (compound_stmt -> if_stmt .)
    IF              reduce using rule 46 (compound_stmt -> if_stmt .)
    DEF             reduce using rule 46 (compound_stmt -> if_stmt .)
    WHILE           reduce using rule 46 (compound_stmt -> if_stmt .)
    FOR             reduce using rule 46 (compound_stmt -> if_stmt .)
    STRUCT          reduce using rule 46 (compound_stmt -> if_stmt .)
    RETURN          reduce using rule 46 (compound_stmt -> if_stmt .)
    CONTINUE        reduce using rule 46 (compound_stmt -> if_stmt .)
    BREAK           reduce using rule 46 (compound_stmt -> if_stmt .)
    NAME            reduce using rule 46 (compound_stmt -> if_stmt .)
    NUMBER          reduce using rule 46 (compound_stmt -> if_stmt .)
    FLOAT           reduce using rule 46 (compound_stmt -> if_stmt .)
    STRING          reduce using rule 46 (compound_stmt -> if_stmt .)
    TRUE            reduce using rule 46 (compound_stmt -> if_stmt .)
    FALSE           reduce using rule 46 (compound_stmt -> if_stmt .)
    MINUS           reduce using rule 46 (compound_stmt -> if_stmt .)
    NOT             reduce using rule 46 (compound_stmt -> if_stmt .)
    LPAR            reduce using rule 46 (compound_stmt -> if_stmt .)
    DEDENT          reduce using rule 46 (compound_stmt -> if_stmt .)


state 9

    (47) compound_stmt -> funcdef .

    ENDMARKER       reduce using rule 47 (compound_stmt -> funcdef .)
    NEWLINE         reduce using rule 47 (compound_stmt -> funcdef .)
    IF              reduce using rule 47 (compound_stmt -> funcdef .)
    DEF             reduce using rule 47 (compound_stmt -> funcdef .)
    WHILE           reduce using rule 47 (compound_stmt -> funcdef .)
    FOR             reduce using rule 47 (compound_stmt -> funcdef .)
    STRUCT          reduce using rule 47 (compound_stmt -> funcdef .)
    RETURN          reduce using rule 47 (compound_stmt -> funcdef .)
    CONTINUE        reduce using rule 47 (compound_stmt -> funcdef .)
    BREAK           reduce using rule 47 (compound_stmt -> funcdef .)
    NAME            reduce using rule 47 (compound_stmt -> funcdef .)
    NUMBER          reduce using rule 47 (compound_stmt -> funcdef .)
    FLOAT           reduce using rule 47 (compound_stmt -> funcdef .)
    STRING          reduce using rule 47 (compound_stmt -> funcdef .)
    TRUE            reduce using rule 47 (compound_stmt -> funcdef .)
    FALSE           reduce using rule 47 (compound_stmt -> funcdef .)
    MINUS           reduce using rule 47 (compound_stmt -> funcdef .)
    NOT             reduce using rule 47 (compound_stmt -> funcdef .)
    LPAR            reduce using rule 47 (compound_stmt -> funcdef .)
    DEDENT          reduce using rule 47 (compound_stmt -> funcdef .)


state 10

    (48) compound_stmt -> while_loop .

    ENDMARKER       reduce using rule 48 (compound_stmt -> while_loop .)
    NEWLINE         reduce using rule 48 (compound_stmt -> while_loop .)
    IF              reduce using rule 48 (compound_stmt -> while_loop .)
    DEF             reduce using rule 48 (compound_stmt -> while_loop .)
    WHILE           reduce using rule 48 (compound_stmt -> while_loop .)
    FOR             reduce using rule 48 (compound_stmt -> while_loop .)
    STRUCT          reduce using rule 48 (compound_stmt -> while_loop .)
    RETURN          reduce using rule 48 (compound_stmt -> while_loop .)
    CONTINUE        reduce using rule 48 (compound_stmt -> while_loop .)
    BREAK           reduce using rule 48 (compound_stmt -> while_loop .)
    NAME            reduce using rule 48 (compound_stmt -> while_loop .)
    NUMBER          reduce using rule 48 (compound_stmt -> while_loop .)
    FLOAT           reduce using rule 48 (compound_stmt -> while_loop .)
    STRING          reduce using rule 48 (compound_stmt -> while_loop .)
    TRUE            reduce using rule 48 (compound_stmt -> while_loop .)
    FALSE           reduce using rule 48 (compound_stmt -> while_loop .)
    MINUS           reduce using rule 48 (compound_stmt -> while_loop .)
    NOT             reduce using rule 48 (compound_stmt -> while_loop .)
    LPAR            reduce using rule 48 (compound_stmt -> while_loop .)
    DEDENT          reduce using rule 48 (compound_stmt -> while_loop .)


state 11

    (49) compound_stmt -> for_loop .

    ENDMARKER       reduce using rule 49 (compound_stmt -> for_loop .)
    NEWLINE         reduce using rule 49 (compound_stmt -> for_loop .)
    IF              reduce using rule 49 (compound_stmt -> for_loop .)
    DEF             reduce using rule 49 (compound_stmt -> for_loop .)
    WHILE           reduce using rule 49 (compound_stmt -> for_loop .)
    FOR             reduce using rule 49 (compound_stmt -> for_loop .)
    STRUCT          reduce using rule 49 (compound_stmt -> for_loop .)
    RETURN          reduce using rule 49 (compound_stmt -> for_loop .)
    CONTINUE        reduce using rule 49 (compound_stmt -> for_loop .)
    BREAK           reduce using rule 49 (compound_stmt -> for_loop .)
    NAME            reduce using rule 49 (compound_stmt -> for_loop .)
    NUMBER          reduce using rule 49 (compound_stmt -> for_loop .)
    FLOAT           reduce using rule 49 (compound_stmt -> for_loop .)
    STRING          reduce using rule 49 (compound_stmt -> for_loop .)
    TRUE            reduce using rule 49 (compound_stmt -> for_loop .)
    FALSE           reduce using rule 49 (compound_stmt -> for_loop .)
    MINUS           reduce using rule 49 (compound_stmt -> for_loop .)
    NOT             reduce using rule 49 (compound_stmt -> for_loop .)
    LPAR            reduce using rule 49 (compound_stmt -> for_loop .)
    DEDENT          reduce using rule 49 (compound_stmt -> for_loop .)


state 12

    (50) compound_stmt -> struct_def .

    ENDMARKER       reduce using rule 50 (compound_stmt -> struct_def .)
    NEWLINE         reduce using rule 50 (compound_stmt -> struct_def .)
    IF              reduce using rule 50 (compound_stmt -> struct_def .)
    DEF             reduce using rule 50 (compound_stmt -> struct_def .)
    WHILE           reduce using rule 50 (compound_stmt -> struct_def .)
    FOR             reduce using rule 50 (compound_stmt -> struct_def .)
    STRUCT          reduce using rule 50 (compound_stmt -> struct_def .)
    RETURN          reduce using rule 50 (compound_stmt -> struct_def .)
    CONTINUE        reduce using rule 50 (compound_stmt -> struct_def .)
    BREAK           reduce using rule 50 (compound_stmt -> struct_def .)
    NAME            reduce using rule 50 (compound_stmt -> struct_def .)
    NUMBER          reduce using rule 50 (compound_stmt -> struct_def .)
    FLOAT           reduce using rule 50 (compound_stmt -> struct_def .)
    STRING          reduce using rule 50 (compound_stmt -> struct_def .)
    TRUE            reduce using rule 50 (compound_stmt -> struct_def .)
    FALSE           reduce using rule 50 (compound_stmt -> struct_def .)
    MINUS           reduce using rule 50 (compound_stmt -> struct_def .)
    NOT             reduce using rule 50 (compound_stmt -> struct_def .)
    LPAR            reduce using rule 50 (compound_stmt -> struct_def .)
    DEDENT          reduce using rule 50 (compound_stmt -> struct_def .)


state 13

    (25) small_stmts -> small_stmt .

    NEWLINE         reduce using rule 25 (small_stmts -> small_stmt .)
    SEMICOLON       reduce using rule 25 (small_stmts -> small_stmt .)


state 14

    (68) if_stmt -> IF . par_test COLON suite
    (69) if_stmt -> IF . par_test COLON suite ELSE COLON suite
    (70) if_stmt -> IF . par_test COLON suite else_if_list
    (66) par_test -> . LPAR atom RPAR
    (67) par_test -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    LPAR            shift and go to state 50
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    par_test                       shift and go to state 49
    atom                           shift and go to state 51
    test                           shift and go to state 52
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 15

    (6) funcdef -> DEF . NAME parameters COLON suite
    (7) funcdef -> DEF . NAME parameters RETYPE type COLON suite

    NAME            shift and go to state 53


state 16

    (101) atom -> NAME .
    (107) method -> NAME . DOT NAME trailer
    (109) attribute -> NAME . DOT NAME

    LBRA            reduce using rule 101 (atom -> NAME .)
    LPAR            reduce using rule 101 (atom -> NAME .)
    PLUS            reduce using rule 101 (atom -> NAME .)
    MINUS           reduce using rule 101 (atom -> NAME .)
    MULT            reduce using rule 101 (atom -> NAME .)
    DIV             reduce using rule 101 (atom -> NAME .)
    MOD             reduce using rule 101 (atom -> NAME .)
    POTENCIA        reduce using rule 101 (atom -> NAME .)
    NEQ             reduce using rule 101 (atom -> NAME .)
    EQ              reduce using rule 101 (atom -> NAME .)
    LT              reduce using rule 101 (atom -> NAME .)
    GT              reduce using rule 101 (atom -> NAME .)
    LEQ             reduce using rule 101 (atom -> NAME .)
    GEQ             reduce using rule 101 (atom -> NAME .)
    AND             reduce using rule 101 (atom -> NAME .)
    OR              reduce using rule 101 (atom -> NAME .)
    COMMA           reduce using rule 101 (atom -> NAME .)
    ASSIGN          reduce using rule 101 (atom -> NAME .)
    COLON           reduce using rule 101 (atom -> NAME .)
    NEWLINE         reduce using rule 101 (atom -> NAME .)
    SEMICOLON       reduce using rule 101 (atom -> NAME .)
    RPAR            reduce using rule 101 (atom -> NAME .)
    RBRA            reduce using rule 101 (atom -> NAME .)
    DOT             shift and go to state 54


state 17

    (51) while_loop -> WHILE . test COLON suite
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    test                           shift and go to state 55
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 18

    (117) testlist_multi -> test .

    COMMA           reduce using rule 117 (testlist_multi -> test .)
    ASSIGN          reduce using rule 117 (testlist_multi -> test .)
    COLON           reduce using rule 117 (testlist_multi -> test .)
    NEWLINE         reduce using rule 117 (testlist_multi -> test .)
    SEMICOLON       reduce using rule 117 (testlist_multi -> test .)


state 19

    (52) for_loop -> FOR . NAME IN range COLON suite

    NAME            shift and go to state 56


state 20

    (60) struct_def -> STRUCT . NAME COLON struct_body

    NAME            shift and go to state 57


state 21

    (26) small_stmt -> flow_stmt .

    NEWLINE         reduce using rule 26 (small_stmt -> flow_stmt .)
    SEMICOLON       reduce using rule 26 (small_stmt -> flow_stmt .)


state 22

    (27) small_stmt -> expr_stmt .

    NEWLINE         reduce using rule 27 (small_stmt -> expr_stmt .)
    SEMICOLON       reduce using rule 27 (small_stmt -> expr_stmt .)


state 23

    (39) flow_stmt -> return_stmt .

    NEWLINE         reduce using rule 39 (flow_stmt -> return_stmt .)
    SEMICOLON       reduce using rule 39 (flow_stmt -> return_stmt .)


state 24

    (40) flow_stmt -> continue_stmt .

    NEWLINE         reduce using rule 40 (flow_stmt -> continue_stmt .)
    SEMICOLON       reduce using rule 40 (flow_stmt -> continue_stmt .)


state 25

    (41) flow_stmt -> break_stmt .

    NEWLINE         reduce using rule 41 (flow_stmt -> break_stmt .)
    SEMICOLON       reduce using rule 41 (flow_stmt -> break_stmt .)


state 26

    (28) expr_stmt -> testlist . ASSIGN testlist
    (30) expr_stmt -> testlist . COLON type ASSIGN testlist
    (31) expr_stmt -> testlist . ASSIGN list_def
    (32) expr_stmt -> testlist . COLON type ASSIGN list_def
    (33) expr_stmt -> testlist .

    ASSIGN          shift and go to state 58
    COLON           shift and go to state 59
    NEWLINE         reduce using rule 33 (expr_stmt -> testlist .)
    SEMICOLON       reduce using rule 33 (expr_stmt -> testlist .)


state 27

    (29) expr_stmt -> atom . list_index ASSIGN testlist
    (96) power -> atom .
    (97) power -> atom . trailer
    (98) power -> atom . list_index
    (112) list_index -> . LBRA test RBRA
    (113) list_index -> . list_index LBRA test RBRA
    (110) trailer -> . LPAR arglist RPAR
    (111) trailer -> . LPAR RPAR

    PLUS            reduce using rule 96 (power -> atom .)
    MINUS           reduce using rule 96 (power -> atom .)
    MULT            reduce using rule 96 (power -> atom .)
    DIV             reduce using rule 96 (power -> atom .)
    MOD             reduce using rule 96 (power -> atom .)
    POTENCIA        reduce using rule 96 (power -> atom .)
    NEQ             reduce using rule 96 (power -> atom .)
    EQ              reduce using rule 96 (power -> atom .)
    LT              reduce using rule 96 (power -> atom .)
    GT              reduce using rule 96 (power -> atom .)
    LEQ             reduce using rule 96 (power -> atom .)
    GEQ             reduce using rule 96 (power -> atom .)
    AND             reduce using rule 96 (power -> atom .)
    OR              reduce using rule 96 (power -> atom .)
    COMMA           reduce using rule 96 (power -> atom .)
    ASSIGN          reduce using rule 96 (power -> atom .)
    COLON           reduce using rule 96 (power -> atom .)
    NEWLINE         reduce using rule 96 (power -> atom .)
    SEMICOLON       reduce using rule 96 (power -> atom .)
    LBRA            shift and go to state 62
    LPAR            shift and go to state 63

    list_index                     shift and go to state 60
    trailer                        shift and go to state 61

state 28

    (42) return_stmt -> RETURN . testlist
    (43) return_stmt -> RETURN .
    (114) testlist -> . testlist_multi COMMA
    (115) testlist -> . testlist_multi
    (116) testlist_multi -> . testlist_multi COMMA test
    (117) testlist_multi -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    NEWLINE         reduce using rule 43 (return_stmt -> RETURN .)
    SEMICOLON       reduce using rule 43 (return_stmt -> RETURN .)
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    testlist                       shift and go to state 64
    testlist_multi                 shift and go to state 31
    test                           shift and go to state 18
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 29

    (44) continue_stmt -> CONTINUE .

    NEWLINE         reduce using rule 44 (continue_stmt -> CONTINUE .)
    SEMICOLON       reduce using rule 44 (continue_stmt -> CONTINUE .)


state 30

    (45) break_stmt -> BREAK .

    NEWLINE         reduce using rule 45 (break_stmt -> BREAK .)
    SEMICOLON       reduce using rule 45 (break_stmt -> BREAK .)


state 31

    (114) testlist -> testlist_multi . COMMA
    (115) testlist -> testlist_multi .
    (116) testlist_multi -> testlist_multi . COMMA test

    COMMA           shift and go to state 65
    ASSIGN          reduce using rule 115 (testlist -> testlist_multi .)
    COLON           reduce using rule 115 (testlist -> testlist_multi .)
    NEWLINE         reduce using rule 115 (testlist -> testlist_multi .)
    SEMICOLON       reduce using rule 115 (testlist -> testlist_multi .)


state 32

    (102) atom -> NUMBER .

    LBRA            reduce using rule 102 (atom -> NUMBER .)
    LPAR            reduce using rule 102 (atom -> NUMBER .)
    PLUS            reduce using rule 102 (atom -> NUMBER .)
    MINUS           reduce using rule 102 (atom -> NUMBER .)
    MULT            reduce using rule 102 (atom -> NUMBER .)
    DIV             reduce using rule 102 (atom -> NUMBER .)
    MOD             reduce using rule 102 (atom -> NUMBER .)
    POTENCIA        reduce using rule 102 (atom -> NUMBER .)
    NEQ             reduce using rule 102 (atom -> NUMBER .)
    EQ              reduce using rule 102 (atom -> NUMBER .)
    LT              reduce using rule 102 (atom -> NUMBER .)
    GT              reduce using rule 102 (atom -> NUMBER .)
    LEQ             reduce using rule 102 (atom -> NUMBER .)
    GEQ             reduce using rule 102 (atom -> NUMBER .)
    AND             reduce using rule 102 (atom -> NUMBER .)
    OR              reduce using rule 102 (atom -> NUMBER .)
    COMMA           reduce using rule 102 (atom -> NUMBER .)
    ASSIGN          reduce using rule 102 (atom -> NUMBER .)
    COLON           reduce using rule 102 (atom -> NUMBER .)
    NEWLINE         reduce using rule 102 (atom -> NUMBER .)
    SEMICOLON       reduce using rule 102 (atom -> NUMBER .)
    RPAR            reduce using rule 102 (atom -> NUMBER .)
    RBRA            reduce using rule 102 (atom -> NUMBER .)


state 33

    (103) atom -> FLOAT .

    LBRA            reduce using rule 103 (atom -> FLOAT .)
    LPAR            reduce using rule 103 (atom -> FLOAT .)
    PLUS            reduce using rule 103 (atom -> FLOAT .)
    MINUS           reduce using rule 103 (atom -> FLOAT .)
    MULT            reduce using rule 103 (atom -> FLOAT .)
    DIV             reduce using rule 103 (atom -> FLOAT .)
    MOD             reduce using rule 103 (atom -> FLOAT .)
    POTENCIA        reduce using rule 103 (atom -> FLOAT .)
    NEQ             reduce using rule 103 (atom -> FLOAT .)
    EQ              reduce using rule 103 (atom -> FLOAT .)
    LT              reduce using rule 103 (atom -> FLOAT .)
    GT              reduce using rule 103 (atom -> FLOAT .)
    LEQ             reduce using rule 103 (atom -> FLOAT .)
    GEQ             reduce using rule 103 (atom -> FLOAT .)
    AND             reduce using rule 103 (atom -> FLOAT .)
    OR              reduce using rule 103 (atom -> FLOAT .)
    COMMA           reduce using rule 103 (atom -> FLOAT .)
    ASSIGN          reduce using rule 103 (atom -> FLOAT .)
    COLON           reduce using rule 103 (atom -> FLOAT .)
    NEWLINE         reduce using rule 103 (atom -> FLOAT .)
    SEMICOLON       reduce using rule 103 (atom -> FLOAT .)
    RPAR            reduce using rule 103 (atom -> FLOAT .)
    RBRA            reduce using rule 103 (atom -> FLOAT .)


state 34

    (104) atom -> STRING .

    LBRA            reduce using rule 104 (atom -> STRING .)
    LPAR            reduce using rule 104 (atom -> STRING .)
    PLUS            reduce using rule 104 (atom -> STRING .)
    MINUS           reduce using rule 104 (atom -> STRING .)
    MULT            reduce using rule 104 (atom -> STRING .)
    DIV             reduce using rule 104 (atom -> STRING .)
    MOD             reduce using rule 104 (atom -> STRING .)
    POTENCIA        reduce using rule 104 (atom -> STRING .)
    NEQ             reduce using rule 104 (atom -> STRING .)
    EQ              reduce using rule 104 (atom -> STRING .)
    LT              reduce using rule 104 (atom -> STRING .)
    GT              reduce using rule 104 (atom -> STRING .)
    LEQ             reduce using rule 104 (atom -> STRING .)
    GEQ             reduce using rule 104 (atom -> STRING .)
    AND             reduce using rule 104 (atom -> STRING .)
    OR              reduce using rule 104 (atom -> STRING .)
    COMMA           reduce using rule 104 (atom -> STRING .)
    ASSIGN          reduce using rule 104 (atom -> STRING .)
    COLON           reduce using rule 104 (atom -> STRING .)
    NEWLINE         reduce using rule 104 (atom -> STRING .)
    SEMICOLON       reduce using rule 104 (atom -> STRING .)
    RPAR            reduce using rule 104 (atom -> STRING .)
    RBRA            reduce using rule 104 (atom -> STRING .)


state 35

    (105) atom -> TRUE .

    LBRA            reduce using rule 105 (atom -> TRUE .)
    LPAR            reduce using rule 105 (atom -> TRUE .)
    PLUS            reduce using rule 105 (atom -> TRUE .)
    MINUS           reduce using rule 105 (atom -> TRUE .)
    MULT            reduce using rule 105 (atom -> TRUE .)
    DIV             reduce using rule 105 (atom -> TRUE .)
    MOD             reduce using rule 105 (atom -> TRUE .)
    POTENCIA        reduce using rule 105 (atom -> TRUE .)
    NEQ             reduce using rule 105 (atom -> TRUE .)
    EQ              reduce using rule 105 (atom -> TRUE .)
    LT              reduce using rule 105 (atom -> TRUE .)
    GT              reduce using rule 105 (atom -> TRUE .)
    LEQ             reduce using rule 105 (atom -> TRUE .)
    GEQ             reduce using rule 105 (atom -> TRUE .)
    AND             reduce using rule 105 (atom -> TRUE .)
    OR              reduce using rule 105 (atom -> TRUE .)
    COMMA           reduce using rule 105 (atom -> TRUE .)
    ASSIGN          reduce using rule 105 (atom -> TRUE .)
    COLON           reduce using rule 105 (atom -> TRUE .)
    NEWLINE         reduce using rule 105 (atom -> TRUE .)
    SEMICOLON       reduce using rule 105 (atom -> TRUE .)
    RPAR            reduce using rule 105 (atom -> TRUE .)
    RBRA            reduce using rule 105 (atom -> TRUE .)


state 36

    (106) atom -> FALSE .

    LBRA            reduce using rule 106 (atom -> FALSE .)
    LPAR            reduce using rule 106 (atom -> FALSE .)
    PLUS            reduce using rule 106 (atom -> FALSE .)
    MINUS           reduce using rule 106 (atom -> FALSE .)
    MULT            reduce using rule 106 (atom -> FALSE .)
    DIV             reduce using rule 106 (atom -> FALSE .)
    MOD             reduce using rule 106 (atom -> FALSE .)
    POTENCIA        reduce using rule 106 (atom -> FALSE .)
    NEQ             reduce using rule 106 (atom -> FALSE .)
    EQ              reduce using rule 106 (atom -> FALSE .)
    LT              reduce using rule 106 (atom -> FALSE .)
    GT              reduce using rule 106 (atom -> FALSE .)
    LEQ             reduce using rule 106 (atom -> FALSE .)
    GEQ             reduce using rule 106 (atom -> FALSE .)
    AND             reduce using rule 106 (atom -> FALSE .)
    OR              reduce using rule 106 (atom -> FALSE .)
    COMMA           reduce using rule 106 (atom -> FALSE .)
    ASSIGN          reduce using rule 106 (atom -> FALSE .)
    COLON           reduce using rule 106 (atom -> FALSE .)
    NEWLINE         reduce using rule 106 (atom -> FALSE .)
    SEMICOLON       reduce using rule 106 (atom -> FALSE .)
    RPAR            reduce using rule 106 (atom -> FALSE .)
    RBRA            reduce using rule 106 (atom -> FALSE .)


state 37

    (118) test -> comparison .
    (78) comparison -> comparison . PLUS comparison
    (79) comparison -> comparison . MINUS comparison
    (80) comparison -> comparison . MULT comparison
    (81) comparison -> comparison . DIV comparison
    (82) comparison -> comparison . MOD comparison
    (83) comparison -> comparison . POTENCIA comparison
    (85) comparison -> comparison . NEQ comparison
    (86) comparison -> comparison . EQ comparison
    (87) comparison -> comparison . LT comparison
    (88) comparison -> comparison . GT comparison
    (89) comparison -> comparison . LEQ comparison
    (90) comparison -> comparison . GEQ comparison
    (91) comparison -> comparison . AND comparison
    (92) comparison -> comparison . OR comparison

    COMMA           reduce using rule 118 (test -> comparison .)
    ASSIGN          reduce using rule 118 (test -> comparison .)
    COLON           reduce using rule 118 (test -> comparison .)
    NEWLINE         reduce using rule 118 (test -> comparison .)
    SEMICOLON       reduce using rule 118 (test -> comparison .)
    RBRA            reduce using rule 118 (test -> comparison .)
    RPAR            reduce using rule 118 (test -> comparison .)
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    MULT            shift and go to state 68
    DIV             shift and go to state 69
    MOD             shift and go to state 70
    POTENCIA        shift and go to state 71
    NEQ             shift and go to state 72
    EQ              shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LEQ             shift and go to state 76
    GEQ             shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79


state 38

    (84) comparison -> MINUS . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    comparison                     shift and go to state 80
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 39

    (93) comparison -> NOT . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    comparison                     shift and go to state 81
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 40

    (94) comparison -> LPAR . comparison RPAR
    (108) method -> LPAR . atom RPAR DOT NAME trailer
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    comparison                     shift and go to state 82
    atom                           shift and go to state 83
    power                          shift and go to state 41
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 41

    (95) comparison -> power .

    PLUS            reduce using rule 95 (comparison -> power .)
    MINUS           reduce using rule 95 (comparison -> power .)
    MULT            reduce using rule 95 (comparison -> power .)
    DIV             reduce using rule 95 (comparison -> power .)
    MOD             reduce using rule 95 (comparison -> power .)
    POTENCIA        reduce using rule 95 (comparison -> power .)
    NEQ             reduce using rule 95 (comparison -> power .)
    EQ              reduce using rule 95 (comparison -> power .)
    LT              reduce using rule 95 (comparison -> power .)
    GT              reduce using rule 95 (comparison -> power .)
    LEQ             reduce using rule 95 (comparison -> power .)
    GEQ             reduce using rule 95 (comparison -> power .)
    AND             reduce using rule 95 (comparison -> power .)
    OR              reduce using rule 95 (comparison -> power .)
    COMMA           reduce using rule 95 (comparison -> power .)
    ASSIGN          reduce using rule 95 (comparison -> power .)
    COLON           reduce using rule 95 (comparison -> power .)
    NEWLINE         reduce using rule 95 (comparison -> power .)
    SEMICOLON       reduce using rule 95 (comparison -> power .)
    RPAR            reduce using rule 95 (comparison -> power .)
    RBRA            reduce using rule 95 (comparison -> power .)


state 42

    (99) power -> method .

    PLUS            reduce using rule 99 (power -> method .)
    MINUS           reduce using rule 99 (power -> method .)
    MULT            reduce using rule 99 (power -> method .)
    DIV             reduce using rule 99 (power -> method .)
    MOD             reduce using rule 99 (power -> method .)
    POTENCIA        reduce using rule 99 (power -> method .)
    NEQ             reduce using rule 99 (power -> method .)
    EQ              reduce using rule 99 (power -> method .)
    LT              reduce using rule 99 (power -> method .)
    GT              reduce using rule 99 (power -> method .)
    LEQ             reduce using rule 99 (power -> method .)
    GEQ             reduce using rule 99 (power -> method .)
    AND             reduce using rule 99 (power -> method .)
    OR              reduce using rule 99 (power -> method .)
    COMMA           reduce using rule 99 (power -> method .)
    ASSIGN          reduce using rule 99 (power -> method .)
    COLON           reduce using rule 99 (power -> method .)
    NEWLINE         reduce using rule 99 (power -> method .)
    SEMICOLON       reduce using rule 99 (power -> method .)
    RPAR            reduce using rule 99 (power -> method .)
    RBRA            reduce using rule 99 (power -> method .)


state 43

    (100) power -> attribute .

    PLUS            reduce using rule 100 (power -> attribute .)
    MINUS           reduce using rule 100 (power -> attribute .)
    MULT            reduce using rule 100 (power -> attribute .)
    DIV             reduce using rule 100 (power -> attribute .)
    MOD             reduce using rule 100 (power -> attribute .)
    POTENCIA        reduce using rule 100 (power -> attribute .)
    NEQ             reduce using rule 100 (power -> attribute .)
    EQ              reduce using rule 100 (power -> attribute .)
    LT              reduce using rule 100 (power -> attribute .)
    GT              reduce using rule 100 (power -> attribute .)
    LEQ             reduce using rule 100 (power -> attribute .)
    GEQ             reduce using rule 100 (power -> attribute .)
    AND             reduce using rule 100 (power -> attribute .)
    OR              reduce using rule 100 (power -> attribute .)
    COMMA           reduce using rule 100 (power -> attribute .)
    ASSIGN          reduce using rule 100 (power -> attribute .)
    COLON           reduce using rule 100 (power -> attribute .)
    NEWLINE         reduce using rule 100 (power -> attribute .)
    SEMICOLON       reduce using rule 100 (power -> attribute .)
    RPAR            reduce using rule 100 (power -> attribute .)
    RBRA            reduce using rule 100 (power -> attribute .)


state 44

    (1) file_input_end -> file_input ENDMARKER .

    $end            reduce using rule 1 (file_input_end -> file_input ENDMARKER .)


state 45

    (2) file_input -> file_input NEWLINE .

    ENDMARKER       reduce using rule 2 (file_input -> file_input NEWLINE .)
    NEWLINE         reduce using rule 2 (file_input -> file_input NEWLINE .)
    IF              reduce using rule 2 (file_input -> file_input NEWLINE .)
    DEF             reduce using rule 2 (file_input -> file_input NEWLINE .)
    WHILE           reduce using rule 2 (file_input -> file_input NEWLINE .)
    FOR             reduce using rule 2 (file_input -> file_input NEWLINE .)
    STRUCT          reduce using rule 2 (file_input -> file_input NEWLINE .)
    RETURN          reduce using rule 2 (file_input -> file_input NEWLINE .)
    CONTINUE        reduce using rule 2 (file_input -> file_input NEWLINE .)
    BREAK           reduce using rule 2 (file_input -> file_input NEWLINE .)
    NAME            reduce using rule 2 (file_input -> file_input NEWLINE .)
    NUMBER          reduce using rule 2 (file_input -> file_input NEWLINE .)
    FLOAT           reduce using rule 2 (file_input -> file_input NEWLINE .)
    STRING          reduce using rule 2 (file_input -> file_input NEWLINE .)
    TRUE            reduce using rule 2 (file_input -> file_input NEWLINE .)
    FALSE           reduce using rule 2 (file_input -> file_input NEWLINE .)
    MINUS           reduce using rule 2 (file_input -> file_input NEWLINE .)
    NOT             reduce using rule 2 (file_input -> file_input NEWLINE .)
    LPAR            reduce using rule 2 (file_input -> file_input NEWLINE .)


state 46

    (3) file_input -> file_input stmt .

    ENDMARKER       reduce using rule 3 (file_input -> file_input stmt .)
    NEWLINE         reduce using rule 3 (file_input -> file_input stmt .)
    IF              reduce using rule 3 (file_input -> file_input stmt .)
    DEF             reduce using rule 3 (file_input -> file_input stmt .)
    WHILE           reduce using rule 3 (file_input -> file_input stmt .)
    FOR             reduce using rule 3 (file_input -> file_input stmt .)
    STRUCT          reduce using rule 3 (file_input -> file_input stmt .)
    RETURN          reduce using rule 3 (file_input -> file_input stmt .)
    CONTINUE        reduce using rule 3 (file_input -> file_input stmt .)
    BREAK           reduce using rule 3 (file_input -> file_input stmt .)
    NAME            reduce using rule 3 (file_input -> file_input stmt .)
    NUMBER          reduce using rule 3 (file_input -> file_input stmt .)
    FLOAT           reduce using rule 3 (file_input -> file_input stmt .)
    STRING          reduce using rule 3 (file_input -> file_input stmt .)
    TRUE            reduce using rule 3 (file_input -> file_input stmt .)
    FALSE           reduce using rule 3 (file_input -> file_input stmt .)
    MINUS           reduce using rule 3 (file_input -> file_input stmt .)
    NOT             reduce using rule 3 (file_input -> file_input stmt .)
    LPAR            reduce using rule 3 (file_input -> file_input stmt .)


state 47

    (22) simple_stmt -> small_stmts NEWLINE .

    ENDMARKER       reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    NEWLINE         reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    IF              reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    DEF             reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    WHILE           reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    FOR             reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    STRUCT          reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    RETURN          reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    CONTINUE        reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    BREAK           reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    NAME            reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    NUMBER          reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    FLOAT           reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    STRING          reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    TRUE            reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    FALSE           reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    MINUS           reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    NOT             reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    LPAR            reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    ELSE            reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    ELIF            reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)
    DEDENT          reduce using rule 22 (simple_stmt -> small_stmts NEWLINE .)


state 48

    (23) simple_stmt -> small_stmts SEMICOLON . NEWLINE
    (24) small_stmts -> small_stmts SEMICOLON . small_stmt
    (26) small_stmt -> . flow_stmt
    (27) small_stmt -> . expr_stmt
    (39) flow_stmt -> . return_stmt
    (40) flow_stmt -> . continue_stmt
    (41) flow_stmt -> . break_stmt
    (28) expr_stmt -> . testlist ASSIGN testlist
    (29) expr_stmt -> . atom list_index ASSIGN testlist
    (30) expr_stmt -> . testlist COLON type ASSIGN testlist
    (31) expr_stmt -> . testlist ASSIGN list_def
    (32) expr_stmt -> . testlist COLON type ASSIGN list_def
    (33) expr_stmt -> . testlist
    (42) return_stmt -> . RETURN testlist
    (43) return_stmt -> . RETURN
    (44) continue_stmt -> . CONTINUE
    (45) break_stmt -> . BREAK
    (114) testlist -> . testlist_multi COMMA
    (115) testlist -> . testlist_multi
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (116) testlist_multi -> . testlist_multi COMMA test
    (117) testlist_multi -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    NEWLINE         shift and go to state 84
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40

    small_stmt                     shift and go to state 85
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    atom                           shift and go to state 27
    testlist_multi                 shift and go to state 31
    test                           shift and go to state 18
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 49

    (68) if_stmt -> IF par_test . COLON suite
    (69) if_stmt -> IF par_test . COLON suite ELSE COLON suite
    (70) if_stmt -> IF par_test . COLON suite else_if_list

    COLON           shift and go to state 86


state 50

    (66) par_test -> LPAR . atom RPAR
    (94) comparison -> LPAR . comparison RPAR
    (108) method -> LPAR . atom RPAR DOT NAME trailer
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40

    atom                           shift and go to state 87
    comparison                     shift and go to state 82
    power                          shift and go to state 41
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 51

    (96) power -> atom .
    (97) power -> atom . trailer
    (98) power -> atom . list_index
    (110) trailer -> . LPAR arglist RPAR
    (111) trailer -> . LPAR RPAR
    (112) list_index -> . LBRA test RBRA
    (113) list_index -> . list_index LBRA test RBRA

    PLUS            reduce using rule 96 (power -> atom .)
    MINUS           reduce using rule 96 (power -> atom .)
    MULT            reduce using rule 96 (power -> atom .)
    DIV             reduce using rule 96 (power -> atom .)
    MOD             reduce using rule 96 (power -> atom .)
    POTENCIA        reduce using rule 96 (power -> atom .)
    NEQ             reduce using rule 96 (power -> atom .)
    EQ              reduce using rule 96 (power -> atom .)
    LT              reduce using rule 96 (power -> atom .)
    GT              reduce using rule 96 (power -> atom .)
    LEQ             reduce using rule 96 (power -> atom .)
    GEQ             reduce using rule 96 (power -> atom .)
    AND             reduce using rule 96 (power -> atom .)
    OR              reduce using rule 96 (power -> atom .)
    COLON           reduce using rule 96 (power -> atom .)
    COMMA           reduce using rule 96 (power -> atom .)
    NEWLINE         reduce using rule 96 (power -> atom .)
    SEMICOLON       reduce using rule 96 (power -> atom .)
    ASSIGN          reduce using rule 96 (power -> atom .)
    RPAR            reduce using rule 96 (power -> atom .)
    RBRA            reduce using rule 96 (power -> atom .)
    LPAR            shift and go to state 63
    LBRA            shift and go to state 62

    trailer                        shift and go to state 61
    list_index                     shift and go to state 88

state 52

    (67) par_test -> test .

    COLON           reduce using rule 67 (par_test -> test .)


state 53

    (6) funcdef -> DEF NAME . parameters COLON suite
    (7) funcdef -> DEF NAME . parameters RETYPE type COLON suite
    (8) parameters -> . LPAR RPAR
    (9) parameters -> . LPAR varargslist RPAR

    LPAR            shift and go to state 90

    parameters                     shift and go to state 89

state 54

    (107) method -> NAME DOT . NAME trailer
    (109) attribute -> NAME DOT . NAME

    NAME            shift and go to state 91


state 55

    (51) while_loop -> WHILE test . COLON suite

    COLON           shift and go to state 92


state 56

    (52) for_loop -> FOR NAME . IN range COLON suite

    IN              shift and go to state 93


state 57

    (60) struct_def -> STRUCT NAME . COLON struct_body

    COLON           shift and go to state 94


state 58

    (28) expr_stmt -> testlist ASSIGN . testlist
    (31) expr_stmt -> testlist ASSIGN . list_def
    (114) testlist -> . testlist_multi COMMA
    (115) testlist -> . testlist_multi
    (34) list_def -> . LBRA list_elem RBRA
    (116) testlist_multi -> . testlist_multi COMMA test
    (117) testlist_multi -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    LBRA            shift and go to state 97
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    testlist                       shift and go to state 95
    list_def                       shift and go to state 96
    testlist_multi                 shift and go to state 31
    test                           shift and go to state 18
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 59

    (30) expr_stmt -> testlist COLON . type ASSIGN testlist
    (32) expr_stmt -> testlist COLON . type ASSIGN list_def
    (14) type -> . STR
    (15) type -> . INT
    (16) type -> . FLOAT
    (17) type -> . BOOL
    (18) type -> . LIST
    (19) type -> . NAME

    STR             shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    BOOL            shift and go to state 102
    LIST            shift and go to state 103
    NAME            shift and go to state 104

    type                           shift and go to state 98

state 60

    (29) expr_stmt -> atom list_index . ASSIGN testlist
    (98) power -> atom list_index .
    (113) list_index -> list_index . LBRA test RBRA

  ! shift/reduce conflict for ASSIGN resolved as shift
    ASSIGN          shift and go to state 105
    PLUS            reduce using rule 98 (power -> atom list_index .)
    MINUS           reduce using rule 98 (power -> atom list_index .)
    MULT            reduce using rule 98 (power -> atom list_index .)
    DIV             reduce using rule 98 (power -> atom list_index .)
    MOD             reduce using rule 98 (power -> atom list_index .)
    POTENCIA        reduce using rule 98 (power -> atom list_index .)
    NEQ             reduce using rule 98 (power -> atom list_index .)
    EQ              reduce using rule 98 (power -> atom list_index .)
    LT              reduce using rule 98 (power -> atom list_index .)
    GT              reduce using rule 98 (power -> atom list_index .)
    LEQ             reduce using rule 98 (power -> atom list_index .)
    GEQ             reduce using rule 98 (power -> atom list_index .)
    AND             reduce using rule 98 (power -> atom list_index .)
    OR              reduce using rule 98 (power -> atom list_index .)
    COMMA           reduce using rule 98 (power -> atom list_index .)
    COLON           reduce using rule 98 (power -> atom list_index .)
    NEWLINE         reduce using rule 98 (power -> atom list_index .)
    SEMICOLON       reduce using rule 98 (power -> atom list_index .)
    LBRA            shift and go to state 106

  ! ASSIGN          [ reduce using rule 98 (power -> atom list_index .) ]


state 61

    (97) power -> atom trailer .

    PLUS            reduce using rule 97 (power -> atom trailer .)
    MINUS           reduce using rule 97 (power -> atom trailer .)
    MULT            reduce using rule 97 (power -> atom trailer .)
    DIV             reduce using rule 97 (power -> atom trailer .)
    MOD             reduce using rule 97 (power -> atom trailer .)
    POTENCIA        reduce using rule 97 (power -> atom trailer .)
    NEQ             reduce using rule 97 (power -> atom trailer .)
    EQ              reduce using rule 97 (power -> atom trailer .)
    LT              reduce using rule 97 (power -> atom trailer .)
    GT              reduce using rule 97 (power -> atom trailer .)
    LEQ             reduce using rule 97 (power -> atom trailer .)
    GEQ             reduce using rule 97 (power -> atom trailer .)
    AND             reduce using rule 97 (power -> atom trailer .)
    OR              reduce using rule 97 (power -> atom trailer .)
    COMMA           reduce using rule 97 (power -> atom trailer .)
    ASSIGN          reduce using rule 97 (power -> atom trailer .)
    COLON           reduce using rule 97 (power -> atom trailer .)
    NEWLINE         reduce using rule 97 (power -> atom trailer .)
    SEMICOLON       reduce using rule 97 (power -> atom trailer .)
    RPAR            reduce using rule 97 (power -> atom trailer .)
    RBRA            reduce using rule 97 (power -> atom trailer .)


state 62

    (112) list_index -> LBRA . test RBRA
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    test                           shift and go to state 107
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 63

    (110) trailer -> LPAR . arglist RPAR
    (111) trailer -> LPAR . RPAR
    (119) arglist -> . arglist COMMA argument
    (120) arglist -> . argument
    (121) argument -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    RPAR            shift and go to state 109
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    arglist                        shift and go to state 108
    argument                       shift and go to state 110
    test                           shift and go to state 111
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 64

    (42) return_stmt -> RETURN testlist .

    NEWLINE         reduce using rule 42 (return_stmt -> RETURN testlist .)
    SEMICOLON       reduce using rule 42 (return_stmt -> RETURN testlist .)


state 65

    (114) testlist -> testlist_multi COMMA .
    (116) testlist_multi -> testlist_multi COMMA . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    ASSIGN          reduce using rule 114 (testlist -> testlist_multi COMMA .)
    COLON           reduce using rule 114 (testlist -> testlist_multi COMMA .)
    NEWLINE         reduce using rule 114 (testlist -> testlist_multi COMMA .)
    SEMICOLON       reduce using rule 114 (testlist -> testlist_multi COMMA .)
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    test                           shift and go to state 112
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 66

    (78) comparison -> comparison PLUS . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    comparison                     shift and go to state 113
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 67

    (79) comparison -> comparison MINUS . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    comparison                     shift and go to state 114
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 68

    (80) comparison -> comparison MULT . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    comparison                     shift and go to state 115
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 69

    (81) comparison -> comparison DIV . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    comparison                     shift and go to state 116
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 70

    (82) comparison -> comparison MOD . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    comparison                     shift and go to state 117
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 71

    (83) comparison -> comparison POTENCIA . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    comparison                     shift and go to state 118
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 72

    (85) comparison -> comparison NEQ . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    comparison                     shift and go to state 119
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 73

    (86) comparison -> comparison EQ . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    comparison                     shift and go to state 120
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 74

    (87) comparison -> comparison LT . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    comparison                     shift and go to state 121
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 75

    (88) comparison -> comparison GT . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    comparison                     shift and go to state 122
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 76

    (89) comparison -> comparison LEQ . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    comparison                     shift and go to state 123
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 77

    (90) comparison -> comparison GEQ . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    comparison                     shift and go to state 124
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 78

    (91) comparison -> comparison AND . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    comparison                     shift and go to state 125
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 79

    (92) comparison -> comparison OR . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    comparison                     shift and go to state 126
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 80

    (84) comparison -> MINUS comparison .
    (78) comparison -> comparison . PLUS comparison
    (79) comparison -> comparison . MINUS comparison
    (80) comparison -> comparison . MULT comparison
    (81) comparison -> comparison . DIV comparison
    (82) comparison -> comparison . MOD comparison
    (83) comparison -> comparison . POTENCIA comparison
    (85) comparison -> comparison . NEQ comparison
    (86) comparison -> comparison . EQ comparison
    (87) comparison -> comparison . LT comparison
    (88) comparison -> comparison . GT comparison
    (89) comparison -> comparison . LEQ comparison
    (90) comparison -> comparison . GEQ comparison
    (91) comparison -> comparison . AND comparison
    (92) comparison -> comparison . OR comparison

    PLUS            reduce using rule 84 (comparison -> MINUS comparison .)
    MINUS           reduce using rule 84 (comparison -> MINUS comparison .)
    MULT            reduce using rule 84 (comparison -> MINUS comparison .)
    DIV             reduce using rule 84 (comparison -> MINUS comparison .)
    MOD             reduce using rule 84 (comparison -> MINUS comparison .)
    NEQ             reduce using rule 84 (comparison -> MINUS comparison .)
    EQ              reduce using rule 84 (comparison -> MINUS comparison .)
    LT              reduce using rule 84 (comparison -> MINUS comparison .)
    GT              reduce using rule 84 (comparison -> MINUS comparison .)
    LEQ             reduce using rule 84 (comparison -> MINUS comparison .)
    GEQ             reduce using rule 84 (comparison -> MINUS comparison .)
    AND             reduce using rule 84 (comparison -> MINUS comparison .)
    OR              reduce using rule 84 (comparison -> MINUS comparison .)
    COMMA           reduce using rule 84 (comparison -> MINUS comparison .)
    ASSIGN          reduce using rule 84 (comparison -> MINUS comparison .)
    COLON           reduce using rule 84 (comparison -> MINUS comparison .)
    NEWLINE         reduce using rule 84 (comparison -> MINUS comparison .)
    SEMICOLON       reduce using rule 84 (comparison -> MINUS comparison .)
    RPAR            reduce using rule 84 (comparison -> MINUS comparison .)
    RBRA            reduce using rule 84 (comparison -> MINUS comparison .)
    POTENCIA        shift and go to state 71

  ! POTENCIA        [ reduce using rule 84 (comparison -> MINUS comparison .) ]
  ! PLUS            [ shift and go to state 66 ]
  ! MINUS           [ shift and go to state 67 ]
  ! MULT            [ shift and go to state 68 ]
  ! DIV             [ shift and go to state 69 ]
  ! MOD             [ shift and go to state 70 ]
  ! NEQ             [ shift and go to state 72 ]
  ! EQ              [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]


state 81

    (93) comparison -> NOT comparison .
    (78) comparison -> comparison . PLUS comparison
    (79) comparison -> comparison . MINUS comparison
    (80) comparison -> comparison . MULT comparison
    (81) comparison -> comparison . DIV comparison
    (82) comparison -> comparison . MOD comparison
    (83) comparison -> comparison . POTENCIA comparison
    (85) comparison -> comparison . NEQ comparison
    (86) comparison -> comparison . EQ comparison
    (87) comparison -> comparison . LT comparison
    (88) comparison -> comparison . GT comparison
    (89) comparison -> comparison . LEQ comparison
    (90) comparison -> comparison . GEQ comparison
    (91) comparison -> comparison . AND comparison
    (92) comparison -> comparison . OR comparison

    AND             reduce using rule 93 (comparison -> NOT comparison .)
    OR              reduce using rule 93 (comparison -> NOT comparison .)
    COMMA           reduce using rule 93 (comparison -> NOT comparison .)
    ASSIGN          reduce using rule 93 (comparison -> NOT comparison .)
    COLON           reduce using rule 93 (comparison -> NOT comparison .)
    NEWLINE         reduce using rule 93 (comparison -> NOT comparison .)
    SEMICOLON       reduce using rule 93 (comparison -> NOT comparison .)
    RPAR            reduce using rule 93 (comparison -> NOT comparison .)
    RBRA            reduce using rule 93 (comparison -> NOT comparison .)
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    MULT            shift and go to state 68
    DIV             shift and go to state 69
    MOD             shift and go to state 70
    POTENCIA        shift and go to state 71
    NEQ             shift and go to state 72
    EQ              shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LEQ             shift and go to state 76
    GEQ             shift and go to state 77

  ! PLUS            [ reduce using rule 93 (comparison -> NOT comparison .) ]
  ! MINUS           [ reduce using rule 93 (comparison -> NOT comparison .) ]
  ! MULT            [ reduce using rule 93 (comparison -> NOT comparison .) ]
  ! DIV             [ reduce using rule 93 (comparison -> NOT comparison .) ]
  ! MOD             [ reduce using rule 93 (comparison -> NOT comparison .) ]
  ! POTENCIA        [ reduce using rule 93 (comparison -> NOT comparison .) ]
  ! NEQ             [ reduce using rule 93 (comparison -> NOT comparison .) ]
  ! EQ              [ reduce using rule 93 (comparison -> NOT comparison .) ]
  ! LT              [ reduce using rule 93 (comparison -> NOT comparison .) ]
  ! GT              [ reduce using rule 93 (comparison -> NOT comparison .) ]
  ! LEQ             [ reduce using rule 93 (comparison -> NOT comparison .) ]
  ! GEQ             [ reduce using rule 93 (comparison -> NOT comparison .) ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]


state 82

    (94) comparison -> LPAR comparison . RPAR
    (78) comparison -> comparison . PLUS comparison
    (79) comparison -> comparison . MINUS comparison
    (80) comparison -> comparison . MULT comparison
    (81) comparison -> comparison . DIV comparison
    (82) comparison -> comparison . MOD comparison
    (83) comparison -> comparison . POTENCIA comparison
    (85) comparison -> comparison . NEQ comparison
    (86) comparison -> comparison . EQ comparison
    (87) comparison -> comparison . LT comparison
    (88) comparison -> comparison . GT comparison
    (89) comparison -> comparison . LEQ comparison
    (90) comparison -> comparison . GEQ comparison
    (91) comparison -> comparison . AND comparison
    (92) comparison -> comparison . OR comparison

    RPAR            shift and go to state 127
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    MULT            shift and go to state 68
    DIV             shift and go to state 69
    MOD             shift and go to state 70
    POTENCIA        shift and go to state 71
    NEQ             shift and go to state 72
    EQ              shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LEQ             shift and go to state 76
    GEQ             shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79


state 83

    (108) method -> LPAR atom . RPAR DOT NAME trailer
    (96) power -> atom .
    (97) power -> atom . trailer
    (98) power -> atom . list_index
    (110) trailer -> . LPAR arglist RPAR
    (111) trailer -> . LPAR RPAR
    (112) list_index -> . LBRA test RBRA
    (113) list_index -> . list_index LBRA test RBRA

  ! shift/reduce conflict for RPAR resolved as shift
    RPAR            shift and go to state 128
    PLUS            reduce using rule 96 (power -> atom .)
    MINUS           reduce using rule 96 (power -> atom .)
    MULT            reduce using rule 96 (power -> atom .)
    DIV             reduce using rule 96 (power -> atom .)
    MOD             reduce using rule 96 (power -> atom .)
    POTENCIA        reduce using rule 96 (power -> atom .)
    NEQ             reduce using rule 96 (power -> atom .)
    EQ              reduce using rule 96 (power -> atom .)
    LT              reduce using rule 96 (power -> atom .)
    GT              reduce using rule 96 (power -> atom .)
    LEQ             reduce using rule 96 (power -> atom .)
    GEQ             reduce using rule 96 (power -> atom .)
    AND             reduce using rule 96 (power -> atom .)
    OR              reduce using rule 96 (power -> atom .)
    LPAR            shift and go to state 63
    LBRA            shift and go to state 62

  ! RPAR            [ reduce using rule 96 (power -> atom .) ]

    trailer                        shift and go to state 61
    list_index                     shift and go to state 88

state 84

    (23) simple_stmt -> small_stmts SEMICOLON NEWLINE .

    ENDMARKER       reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    NEWLINE         reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    IF              reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    DEF             reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    WHILE           reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    FOR             reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    STRUCT          reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    RETURN          reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    CONTINUE        reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    BREAK           reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    NAME            reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    NUMBER          reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    FLOAT           reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    STRING          reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    TRUE            reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    FALSE           reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    MINUS           reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    NOT             reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    LPAR            reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    ELSE            reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    ELIF            reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    DEDENT          reduce using rule 23 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)


state 85

    (24) small_stmts -> small_stmts SEMICOLON small_stmt .

    NEWLINE         reduce using rule 24 (small_stmts -> small_stmts SEMICOLON small_stmt .)
    SEMICOLON       reduce using rule 24 (small_stmts -> small_stmts SEMICOLON small_stmt .)


state 86

    (68) if_stmt -> IF par_test COLON . suite
    (69) if_stmt -> IF par_test COLON . suite ELSE COLON suite
    (70) if_stmt -> IF par_test COLON . suite else_if_list
    (74) suite -> . simple_stmt
    (75) suite -> . NEWLINE INDENT stmts DEDENT
    (22) simple_stmt -> . small_stmts NEWLINE
    (23) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (24) small_stmts -> . small_stmts SEMICOLON small_stmt
    (25) small_stmts -> . small_stmt
    (26) small_stmt -> . flow_stmt
    (27) small_stmt -> . expr_stmt
    (39) flow_stmt -> . return_stmt
    (40) flow_stmt -> . continue_stmt
    (41) flow_stmt -> . break_stmt
    (28) expr_stmt -> . testlist ASSIGN testlist
    (29) expr_stmt -> . atom list_index ASSIGN testlist
    (30) expr_stmt -> . testlist COLON type ASSIGN testlist
    (31) expr_stmt -> . testlist ASSIGN list_def
    (32) expr_stmt -> . testlist COLON type ASSIGN list_def
    (33) expr_stmt -> . testlist
    (42) return_stmt -> . RETURN testlist
    (43) return_stmt -> . RETURN
    (44) continue_stmt -> . CONTINUE
    (45) break_stmt -> . BREAK
    (114) testlist -> . testlist_multi COMMA
    (115) testlist -> . testlist_multi
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (116) testlist_multi -> . testlist_multi COMMA test
    (117) testlist_multi -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    NEWLINE         shift and go to state 131
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40

    suite                          shift and go to state 129
    simple_stmt                    shift and go to state 130
    small_stmts                    shift and go to state 7
    small_stmt                     shift and go to state 13
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    atom                           shift and go to state 27
    testlist_multi                 shift and go to state 31
    test                           shift and go to state 18
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 87

    (66) par_test -> LPAR atom . RPAR
    (108) method -> LPAR atom . RPAR DOT NAME trailer
    (96) power -> atom .
    (97) power -> atom . trailer
    (98) power -> atom . list_index
    (110) trailer -> . LPAR arglist RPAR
    (111) trailer -> . LPAR RPAR
    (112) list_index -> . LBRA test RBRA
    (113) list_index -> . list_index LBRA test RBRA

  ! shift/reduce conflict for RPAR resolved as shift
    RPAR            shift and go to state 132
    PLUS            reduce using rule 96 (power -> atom .)
    MINUS           reduce using rule 96 (power -> atom .)
    MULT            reduce using rule 96 (power -> atom .)
    DIV             reduce using rule 96 (power -> atom .)
    MOD             reduce using rule 96 (power -> atom .)
    POTENCIA        reduce using rule 96 (power -> atom .)
    NEQ             reduce using rule 96 (power -> atom .)
    EQ              reduce using rule 96 (power -> atom .)
    LT              reduce using rule 96 (power -> atom .)
    GT              reduce using rule 96 (power -> atom .)
    LEQ             reduce using rule 96 (power -> atom .)
    GEQ             reduce using rule 96 (power -> atom .)
    AND             reduce using rule 96 (power -> atom .)
    OR              reduce using rule 96 (power -> atom .)
    LPAR            shift and go to state 63
    LBRA            shift and go to state 62

  ! RPAR            [ reduce using rule 96 (power -> atom .) ]

    trailer                        shift and go to state 61
    list_index                     shift and go to state 88

state 88

    (98) power -> atom list_index .
    (113) list_index -> list_index . LBRA test RBRA

    PLUS            reduce using rule 98 (power -> atom list_index .)
    MINUS           reduce using rule 98 (power -> atom list_index .)
    MULT            reduce using rule 98 (power -> atom list_index .)
    DIV             reduce using rule 98 (power -> atom list_index .)
    MOD             reduce using rule 98 (power -> atom list_index .)
    POTENCIA        reduce using rule 98 (power -> atom list_index .)
    NEQ             reduce using rule 98 (power -> atom list_index .)
    EQ              reduce using rule 98 (power -> atom list_index .)
    LT              reduce using rule 98 (power -> atom list_index .)
    GT              reduce using rule 98 (power -> atom list_index .)
    LEQ             reduce using rule 98 (power -> atom list_index .)
    GEQ             reduce using rule 98 (power -> atom list_index .)
    AND             reduce using rule 98 (power -> atom list_index .)
    OR              reduce using rule 98 (power -> atom list_index .)
    COLON           reduce using rule 98 (power -> atom list_index .)
    COMMA           reduce using rule 98 (power -> atom list_index .)
    NEWLINE         reduce using rule 98 (power -> atom list_index .)
    SEMICOLON       reduce using rule 98 (power -> atom list_index .)
    ASSIGN          reduce using rule 98 (power -> atom list_index .)
    RPAR            reduce using rule 98 (power -> atom list_index .)
    RBRA            reduce using rule 98 (power -> atom list_index .)
    LBRA            shift and go to state 106


state 89

    (6) funcdef -> DEF NAME parameters . COLON suite
    (7) funcdef -> DEF NAME parameters . RETYPE type COLON suite

    COLON           shift and go to state 133
    RETYPE          shift and go to state 134


state 90

    (8) parameters -> LPAR . RPAR
    (9) parameters -> LPAR . varargslist RPAR
    (10) varargslist -> . varargslist COMMA NAME COLON type
    (11) varargslist -> . varargslist COMMA NAME
    (12) varargslist -> . NAME COLON type
    (13) varargslist -> . NAME

    RPAR            shift and go to state 135
    NAME            shift and go to state 137

    varargslist                    shift and go to state 136

state 91

    (107) method -> NAME DOT NAME . trailer
    (109) attribute -> NAME DOT NAME .
    (110) trailer -> . LPAR arglist RPAR
    (111) trailer -> . LPAR RPAR

    PLUS            reduce using rule 109 (attribute -> NAME DOT NAME .)
    MINUS           reduce using rule 109 (attribute -> NAME DOT NAME .)
    MULT            reduce using rule 109 (attribute -> NAME DOT NAME .)
    DIV             reduce using rule 109 (attribute -> NAME DOT NAME .)
    MOD             reduce using rule 109 (attribute -> NAME DOT NAME .)
    POTENCIA        reduce using rule 109 (attribute -> NAME DOT NAME .)
    NEQ             reduce using rule 109 (attribute -> NAME DOT NAME .)
    EQ              reduce using rule 109 (attribute -> NAME DOT NAME .)
    LT              reduce using rule 109 (attribute -> NAME DOT NAME .)
    GT              reduce using rule 109 (attribute -> NAME DOT NAME .)
    LEQ             reduce using rule 109 (attribute -> NAME DOT NAME .)
    GEQ             reduce using rule 109 (attribute -> NAME DOT NAME .)
    AND             reduce using rule 109 (attribute -> NAME DOT NAME .)
    OR              reduce using rule 109 (attribute -> NAME DOT NAME .)
    COMMA           reduce using rule 109 (attribute -> NAME DOT NAME .)
    ASSIGN          reduce using rule 109 (attribute -> NAME DOT NAME .)
    COLON           reduce using rule 109 (attribute -> NAME DOT NAME .)
    NEWLINE         reduce using rule 109 (attribute -> NAME DOT NAME .)
    SEMICOLON       reduce using rule 109 (attribute -> NAME DOT NAME .)
    RPAR            reduce using rule 109 (attribute -> NAME DOT NAME .)
    RBRA            reduce using rule 109 (attribute -> NAME DOT NAME .)
    LPAR            shift and go to state 63

    trailer                        shift and go to state 138

state 92

    (51) while_loop -> WHILE test COLON . suite
    (74) suite -> . simple_stmt
    (75) suite -> . NEWLINE INDENT stmts DEDENT
    (22) simple_stmt -> . small_stmts NEWLINE
    (23) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (24) small_stmts -> . small_stmts SEMICOLON small_stmt
    (25) small_stmts -> . small_stmt
    (26) small_stmt -> . flow_stmt
    (27) small_stmt -> . expr_stmt
    (39) flow_stmt -> . return_stmt
    (40) flow_stmt -> . continue_stmt
    (41) flow_stmt -> . break_stmt
    (28) expr_stmt -> . testlist ASSIGN testlist
    (29) expr_stmt -> . atom list_index ASSIGN testlist
    (30) expr_stmt -> . testlist COLON type ASSIGN testlist
    (31) expr_stmt -> . testlist ASSIGN list_def
    (32) expr_stmt -> . testlist COLON type ASSIGN list_def
    (33) expr_stmt -> . testlist
    (42) return_stmt -> . RETURN testlist
    (43) return_stmt -> . RETURN
    (44) continue_stmt -> . CONTINUE
    (45) break_stmt -> . BREAK
    (114) testlist -> . testlist_multi COMMA
    (115) testlist -> . testlist_multi
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (116) testlist_multi -> . testlist_multi COMMA test
    (117) testlist_multi -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    NEWLINE         shift and go to state 131
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40

    test                           shift and go to state 18
    suite                          shift and go to state 139
    simple_stmt                    shift and go to state 130
    small_stmts                    shift and go to state 7
    small_stmt                     shift and go to state 13
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    atom                           shift and go to state 27
    testlist_multi                 shift and go to state 31
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 93

    (52) for_loop -> FOR NAME IN . range COLON suite
    (53) range -> . string_range
    (54) range -> . name_range
    (55) range -> . list_def
    (56) range -> . atom trailer
    (57) range -> . atom list_index
    (58) string_range -> . STRING
    (59) name_range -> . NAME
    (34) list_def -> . LBRA list_elem RBRA
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE

    STRING          shift and go to state 146
    NAME            shift and go to state 140
    LBRA            shift and go to state 97
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    range                          shift and go to state 141
    string_range                   shift and go to state 142
    name_range                     shift and go to state 143
    list_def                       shift and go to state 144
    atom                           shift and go to state 145

state 94

    (60) struct_def -> STRUCT NAME COLON . struct_body
    (61) struct_body -> . NEWLINE INDENT struct_fields DEDENT

    NEWLINE         shift and go to state 148

    struct_body                    shift and go to state 147

state 95

    (28) expr_stmt -> testlist ASSIGN testlist .

    NEWLINE         reduce using rule 28 (expr_stmt -> testlist ASSIGN testlist .)
    SEMICOLON       reduce using rule 28 (expr_stmt -> testlist ASSIGN testlist .)


state 96

    (31) expr_stmt -> testlist ASSIGN list_def .

    NEWLINE         reduce using rule 31 (expr_stmt -> testlist ASSIGN list_def .)
    SEMICOLON       reduce using rule 31 (expr_stmt -> testlist ASSIGN list_def .)


state 97

    (34) list_def -> LBRA . list_elem RBRA
    (35) list_elem -> . list_elem COMMA test
    (36) list_elem -> . list_elem COMMA list_def
    (37) list_elem -> . test
    (38) list_elem -> . list_def
    (118) test -> . comparison
    (34) list_def -> . LBRA list_elem RBRA
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    LBRA            shift and go to state 97
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    list_elem                      shift and go to state 149
    test                           shift and go to state 150
    list_def                       shift and go to state 151
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 98

    (30) expr_stmt -> testlist COLON type . ASSIGN testlist
    (32) expr_stmt -> testlist COLON type . ASSIGN list_def

    ASSIGN          shift and go to state 152


state 99

    (14) type -> STR .

    ASSIGN          reduce using rule 14 (type -> STR .)
    COLON           reduce using rule 14 (type -> STR .)
    RPAR            reduce using rule 14 (type -> STR .)
    COMMA           reduce using rule 14 (type -> STR .)
    NEWLINE         reduce using rule 14 (type -> STR .)


state 100

    (15) type -> INT .

    ASSIGN          reduce using rule 15 (type -> INT .)
    COLON           reduce using rule 15 (type -> INT .)
    RPAR            reduce using rule 15 (type -> INT .)
    COMMA           reduce using rule 15 (type -> INT .)
    NEWLINE         reduce using rule 15 (type -> INT .)


state 101

    (16) type -> FLOAT .

    ASSIGN          reduce using rule 16 (type -> FLOAT .)
    COLON           reduce using rule 16 (type -> FLOAT .)
    RPAR            reduce using rule 16 (type -> FLOAT .)
    COMMA           reduce using rule 16 (type -> FLOAT .)
    NEWLINE         reduce using rule 16 (type -> FLOAT .)


state 102

    (17) type -> BOOL .

    ASSIGN          reduce using rule 17 (type -> BOOL .)
    COLON           reduce using rule 17 (type -> BOOL .)
    RPAR            reduce using rule 17 (type -> BOOL .)
    COMMA           reduce using rule 17 (type -> BOOL .)
    NEWLINE         reduce using rule 17 (type -> BOOL .)


state 103

    (18) type -> LIST .

    ASSIGN          reduce using rule 18 (type -> LIST .)
    COLON           reduce using rule 18 (type -> LIST .)
    RPAR            reduce using rule 18 (type -> LIST .)
    COMMA           reduce using rule 18 (type -> LIST .)
    NEWLINE         reduce using rule 18 (type -> LIST .)


state 104

    (19) type -> NAME .

    ASSIGN          reduce using rule 19 (type -> NAME .)
    COLON           reduce using rule 19 (type -> NAME .)
    RPAR            reduce using rule 19 (type -> NAME .)
    COMMA           reduce using rule 19 (type -> NAME .)
    NEWLINE         reduce using rule 19 (type -> NAME .)


state 105

    (29) expr_stmt -> atom list_index ASSIGN . testlist
    (114) testlist -> . testlist_multi COMMA
    (115) testlist -> . testlist_multi
    (116) testlist_multi -> . testlist_multi COMMA test
    (117) testlist_multi -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    atom                           shift and go to state 51
    testlist                       shift and go to state 153
    testlist_multi                 shift and go to state 31
    test                           shift and go to state 18
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 106

    (113) list_index -> list_index LBRA . test RBRA
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    test                           shift and go to state 154
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 107

    (112) list_index -> LBRA test . RBRA

    RBRA            shift and go to state 155


state 108

    (110) trailer -> LPAR arglist . RPAR
    (119) arglist -> arglist . COMMA argument

    RPAR            shift and go to state 156
    COMMA           shift and go to state 157


state 109

    (111) trailer -> LPAR RPAR .

    PLUS            reduce using rule 111 (trailer -> LPAR RPAR .)
    MINUS           reduce using rule 111 (trailer -> LPAR RPAR .)
    MULT            reduce using rule 111 (trailer -> LPAR RPAR .)
    DIV             reduce using rule 111 (trailer -> LPAR RPAR .)
    MOD             reduce using rule 111 (trailer -> LPAR RPAR .)
    POTENCIA        reduce using rule 111 (trailer -> LPAR RPAR .)
    NEQ             reduce using rule 111 (trailer -> LPAR RPAR .)
    EQ              reduce using rule 111 (trailer -> LPAR RPAR .)
    LT              reduce using rule 111 (trailer -> LPAR RPAR .)
    GT              reduce using rule 111 (trailer -> LPAR RPAR .)
    LEQ             reduce using rule 111 (trailer -> LPAR RPAR .)
    GEQ             reduce using rule 111 (trailer -> LPAR RPAR .)
    AND             reduce using rule 111 (trailer -> LPAR RPAR .)
    OR              reduce using rule 111 (trailer -> LPAR RPAR .)
    COMMA           reduce using rule 111 (trailer -> LPAR RPAR .)
    ASSIGN          reduce using rule 111 (trailer -> LPAR RPAR .)
    COLON           reduce using rule 111 (trailer -> LPAR RPAR .)
    NEWLINE         reduce using rule 111 (trailer -> LPAR RPAR .)
    SEMICOLON       reduce using rule 111 (trailer -> LPAR RPAR .)
    RPAR            reduce using rule 111 (trailer -> LPAR RPAR .)
    RBRA            reduce using rule 111 (trailer -> LPAR RPAR .)


state 110

    (120) arglist -> argument .

    RPAR            reduce using rule 120 (arglist -> argument .)
    COMMA           reduce using rule 120 (arglist -> argument .)


state 111

    (121) argument -> test .

    RPAR            reduce using rule 121 (argument -> test .)
    COMMA           reduce using rule 121 (argument -> test .)


state 112

    (116) testlist_multi -> testlist_multi COMMA test .

    COMMA           reduce using rule 116 (testlist_multi -> testlist_multi COMMA test .)
    ASSIGN          reduce using rule 116 (testlist_multi -> testlist_multi COMMA test .)
    COLON           reduce using rule 116 (testlist_multi -> testlist_multi COMMA test .)
    NEWLINE         reduce using rule 116 (testlist_multi -> testlist_multi COMMA test .)
    SEMICOLON       reduce using rule 116 (testlist_multi -> testlist_multi COMMA test .)


state 113

    (78) comparison -> comparison PLUS comparison .
    (78) comparison -> comparison . PLUS comparison
    (79) comparison -> comparison . MINUS comparison
    (80) comparison -> comparison . MULT comparison
    (81) comparison -> comparison . DIV comparison
    (82) comparison -> comparison . MOD comparison
    (83) comparison -> comparison . POTENCIA comparison
    (85) comparison -> comparison . NEQ comparison
    (86) comparison -> comparison . EQ comparison
    (87) comparison -> comparison . LT comparison
    (88) comparison -> comparison . GT comparison
    (89) comparison -> comparison . LEQ comparison
    (90) comparison -> comparison . GEQ comparison
    (91) comparison -> comparison . AND comparison
    (92) comparison -> comparison . OR comparison

    PLUS            reduce using rule 78 (comparison -> comparison PLUS comparison .)
    MINUS           reduce using rule 78 (comparison -> comparison PLUS comparison .)
    NEQ             reduce using rule 78 (comparison -> comparison PLUS comparison .)
    EQ              reduce using rule 78 (comparison -> comparison PLUS comparison .)
    LT              reduce using rule 78 (comparison -> comparison PLUS comparison .)
    GT              reduce using rule 78 (comparison -> comparison PLUS comparison .)
    LEQ             reduce using rule 78 (comparison -> comparison PLUS comparison .)
    GEQ             reduce using rule 78 (comparison -> comparison PLUS comparison .)
    AND             reduce using rule 78 (comparison -> comparison PLUS comparison .)
    OR              reduce using rule 78 (comparison -> comparison PLUS comparison .)
    COMMA           reduce using rule 78 (comparison -> comparison PLUS comparison .)
    ASSIGN          reduce using rule 78 (comparison -> comparison PLUS comparison .)
    COLON           reduce using rule 78 (comparison -> comparison PLUS comparison .)
    NEWLINE         reduce using rule 78 (comparison -> comparison PLUS comparison .)
    SEMICOLON       reduce using rule 78 (comparison -> comparison PLUS comparison .)
    RPAR            reduce using rule 78 (comparison -> comparison PLUS comparison .)
    RBRA            reduce using rule 78 (comparison -> comparison PLUS comparison .)
    MULT            shift and go to state 68
    DIV             shift and go to state 69
    MOD             shift and go to state 70
    POTENCIA        shift and go to state 71

  ! MULT            [ reduce using rule 78 (comparison -> comparison PLUS comparison .) ]
  ! DIV             [ reduce using rule 78 (comparison -> comparison PLUS comparison .) ]
  ! MOD             [ reduce using rule 78 (comparison -> comparison PLUS comparison .) ]
  ! POTENCIA        [ reduce using rule 78 (comparison -> comparison PLUS comparison .) ]
  ! PLUS            [ shift and go to state 66 ]
  ! MINUS           [ shift and go to state 67 ]
  ! NEQ             [ shift and go to state 72 ]
  ! EQ              [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]


state 114

    (79) comparison -> comparison MINUS comparison .
    (78) comparison -> comparison . PLUS comparison
    (79) comparison -> comparison . MINUS comparison
    (80) comparison -> comparison . MULT comparison
    (81) comparison -> comparison . DIV comparison
    (82) comparison -> comparison . MOD comparison
    (83) comparison -> comparison . POTENCIA comparison
    (85) comparison -> comparison . NEQ comparison
    (86) comparison -> comparison . EQ comparison
    (87) comparison -> comparison . LT comparison
    (88) comparison -> comparison . GT comparison
    (89) comparison -> comparison . LEQ comparison
    (90) comparison -> comparison . GEQ comparison
    (91) comparison -> comparison . AND comparison
    (92) comparison -> comparison . OR comparison

    PLUS            reduce using rule 79 (comparison -> comparison MINUS comparison .)
    MINUS           reduce using rule 79 (comparison -> comparison MINUS comparison .)
    NEQ             reduce using rule 79 (comparison -> comparison MINUS comparison .)
    EQ              reduce using rule 79 (comparison -> comparison MINUS comparison .)
    LT              reduce using rule 79 (comparison -> comparison MINUS comparison .)
    GT              reduce using rule 79 (comparison -> comparison MINUS comparison .)
    LEQ             reduce using rule 79 (comparison -> comparison MINUS comparison .)
    GEQ             reduce using rule 79 (comparison -> comparison MINUS comparison .)
    AND             reduce using rule 79 (comparison -> comparison MINUS comparison .)
    OR              reduce using rule 79 (comparison -> comparison MINUS comparison .)
    COMMA           reduce using rule 79 (comparison -> comparison MINUS comparison .)
    ASSIGN          reduce using rule 79 (comparison -> comparison MINUS comparison .)
    COLON           reduce using rule 79 (comparison -> comparison MINUS comparison .)
    NEWLINE         reduce using rule 79 (comparison -> comparison MINUS comparison .)
    SEMICOLON       reduce using rule 79 (comparison -> comparison MINUS comparison .)
    RPAR            reduce using rule 79 (comparison -> comparison MINUS comparison .)
    RBRA            reduce using rule 79 (comparison -> comparison MINUS comparison .)
    MULT            shift and go to state 68
    DIV             shift and go to state 69
    MOD             shift and go to state 70
    POTENCIA        shift and go to state 71

  ! MULT            [ reduce using rule 79 (comparison -> comparison MINUS comparison .) ]
  ! DIV             [ reduce using rule 79 (comparison -> comparison MINUS comparison .) ]
  ! MOD             [ reduce using rule 79 (comparison -> comparison MINUS comparison .) ]
  ! POTENCIA        [ reduce using rule 79 (comparison -> comparison MINUS comparison .) ]
  ! PLUS            [ shift and go to state 66 ]
  ! MINUS           [ shift and go to state 67 ]
  ! NEQ             [ shift and go to state 72 ]
  ! EQ              [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]


state 115

    (80) comparison -> comparison MULT comparison .
    (78) comparison -> comparison . PLUS comparison
    (79) comparison -> comparison . MINUS comparison
    (80) comparison -> comparison . MULT comparison
    (81) comparison -> comparison . DIV comparison
    (82) comparison -> comparison . MOD comparison
    (83) comparison -> comparison . POTENCIA comparison
    (85) comparison -> comparison . NEQ comparison
    (86) comparison -> comparison . EQ comparison
    (87) comparison -> comparison . LT comparison
    (88) comparison -> comparison . GT comparison
    (89) comparison -> comparison . LEQ comparison
    (90) comparison -> comparison . GEQ comparison
    (91) comparison -> comparison . AND comparison
    (92) comparison -> comparison . OR comparison

    PLUS            reduce using rule 80 (comparison -> comparison MULT comparison .)
    MINUS           reduce using rule 80 (comparison -> comparison MULT comparison .)
    MULT            reduce using rule 80 (comparison -> comparison MULT comparison .)
    DIV             reduce using rule 80 (comparison -> comparison MULT comparison .)
    MOD             reduce using rule 80 (comparison -> comparison MULT comparison .)
    NEQ             reduce using rule 80 (comparison -> comparison MULT comparison .)
    EQ              reduce using rule 80 (comparison -> comparison MULT comparison .)
    LT              reduce using rule 80 (comparison -> comparison MULT comparison .)
    GT              reduce using rule 80 (comparison -> comparison MULT comparison .)
    LEQ             reduce using rule 80 (comparison -> comparison MULT comparison .)
    GEQ             reduce using rule 80 (comparison -> comparison MULT comparison .)
    AND             reduce using rule 80 (comparison -> comparison MULT comparison .)
    OR              reduce using rule 80 (comparison -> comparison MULT comparison .)
    COMMA           reduce using rule 80 (comparison -> comparison MULT comparison .)
    ASSIGN          reduce using rule 80 (comparison -> comparison MULT comparison .)
    COLON           reduce using rule 80 (comparison -> comparison MULT comparison .)
    NEWLINE         reduce using rule 80 (comparison -> comparison MULT comparison .)
    SEMICOLON       reduce using rule 80 (comparison -> comparison MULT comparison .)
    RPAR            reduce using rule 80 (comparison -> comparison MULT comparison .)
    RBRA            reduce using rule 80 (comparison -> comparison MULT comparison .)
    POTENCIA        shift and go to state 71

  ! POTENCIA        [ reduce using rule 80 (comparison -> comparison MULT comparison .) ]
  ! PLUS            [ shift and go to state 66 ]
  ! MINUS           [ shift and go to state 67 ]
  ! MULT            [ shift and go to state 68 ]
  ! DIV             [ shift and go to state 69 ]
  ! MOD             [ shift and go to state 70 ]
  ! NEQ             [ shift and go to state 72 ]
  ! EQ              [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]


state 116

    (81) comparison -> comparison DIV comparison .
    (78) comparison -> comparison . PLUS comparison
    (79) comparison -> comparison . MINUS comparison
    (80) comparison -> comparison . MULT comparison
    (81) comparison -> comparison . DIV comparison
    (82) comparison -> comparison . MOD comparison
    (83) comparison -> comparison . POTENCIA comparison
    (85) comparison -> comparison . NEQ comparison
    (86) comparison -> comparison . EQ comparison
    (87) comparison -> comparison . LT comparison
    (88) comparison -> comparison . GT comparison
    (89) comparison -> comparison . LEQ comparison
    (90) comparison -> comparison . GEQ comparison
    (91) comparison -> comparison . AND comparison
    (92) comparison -> comparison . OR comparison

    PLUS            reduce using rule 81 (comparison -> comparison DIV comparison .)
    MINUS           reduce using rule 81 (comparison -> comparison DIV comparison .)
    MULT            reduce using rule 81 (comparison -> comparison DIV comparison .)
    DIV             reduce using rule 81 (comparison -> comparison DIV comparison .)
    MOD             reduce using rule 81 (comparison -> comparison DIV comparison .)
    NEQ             reduce using rule 81 (comparison -> comparison DIV comparison .)
    EQ              reduce using rule 81 (comparison -> comparison DIV comparison .)
    LT              reduce using rule 81 (comparison -> comparison DIV comparison .)
    GT              reduce using rule 81 (comparison -> comparison DIV comparison .)
    LEQ             reduce using rule 81 (comparison -> comparison DIV comparison .)
    GEQ             reduce using rule 81 (comparison -> comparison DIV comparison .)
    AND             reduce using rule 81 (comparison -> comparison DIV comparison .)
    OR              reduce using rule 81 (comparison -> comparison DIV comparison .)
    COMMA           reduce using rule 81 (comparison -> comparison DIV comparison .)
    ASSIGN          reduce using rule 81 (comparison -> comparison DIV comparison .)
    COLON           reduce using rule 81 (comparison -> comparison DIV comparison .)
    NEWLINE         reduce using rule 81 (comparison -> comparison DIV comparison .)
    SEMICOLON       reduce using rule 81 (comparison -> comparison DIV comparison .)
    RPAR            reduce using rule 81 (comparison -> comparison DIV comparison .)
    RBRA            reduce using rule 81 (comparison -> comparison DIV comparison .)
    POTENCIA        shift and go to state 71

  ! POTENCIA        [ reduce using rule 81 (comparison -> comparison DIV comparison .) ]
  ! PLUS            [ shift and go to state 66 ]
  ! MINUS           [ shift and go to state 67 ]
  ! MULT            [ shift and go to state 68 ]
  ! DIV             [ shift and go to state 69 ]
  ! MOD             [ shift and go to state 70 ]
  ! NEQ             [ shift and go to state 72 ]
  ! EQ              [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]


state 117

    (82) comparison -> comparison MOD comparison .
    (78) comparison -> comparison . PLUS comparison
    (79) comparison -> comparison . MINUS comparison
    (80) comparison -> comparison . MULT comparison
    (81) comparison -> comparison . DIV comparison
    (82) comparison -> comparison . MOD comparison
    (83) comparison -> comparison . POTENCIA comparison
    (85) comparison -> comparison . NEQ comparison
    (86) comparison -> comparison . EQ comparison
    (87) comparison -> comparison . LT comparison
    (88) comparison -> comparison . GT comparison
    (89) comparison -> comparison . LEQ comparison
    (90) comparison -> comparison . GEQ comparison
    (91) comparison -> comparison . AND comparison
    (92) comparison -> comparison . OR comparison

    PLUS            reduce using rule 82 (comparison -> comparison MOD comparison .)
    MINUS           reduce using rule 82 (comparison -> comparison MOD comparison .)
    MULT            reduce using rule 82 (comparison -> comparison MOD comparison .)
    DIV             reduce using rule 82 (comparison -> comparison MOD comparison .)
    MOD             reduce using rule 82 (comparison -> comparison MOD comparison .)
    NEQ             reduce using rule 82 (comparison -> comparison MOD comparison .)
    EQ              reduce using rule 82 (comparison -> comparison MOD comparison .)
    LT              reduce using rule 82 (comparison -> comparison MOD comparison .)
    GT              reduce using rule 82 (comparison -> comparison MOD comparison .)
    LEQ             reduce using rule 82 (comparison -> comparison MOD comparison .)
    GEQ             reduce using rule 82 (comparison -> comparison MOD comparison .)
    AND             reduce using rule 82 (comparison -> comparison MOD comparison .)
    OR              reduce using rule 82 (comparison -> comparison MOD comparison .)
    COMMA           reduce using rule 82 (comparison -> comparison MOD comparison .)
    ASSIGN          reduce using rule 82 (comparison -> comparison MOD comparison .)
    COLON           reduce using rule 82 (comparison -> comparison MOD comparison .)
    NEWLINE         reduce using rule 82 (comparison -> comparison MOD comparison .)
    SEMICOLON       reduce using rule 82 (comparison -> comparison MOD comparison .)
    RPAR            reduce using rule 82 (comparison -> comparison MOD comparison .)
    RBRA            reduce using rule 82 (comparison -> comparison MOD comparison .)
    POTENCIA        shift and go to state 71

  ! POTENCIA        [ reduce using rule 82 (comparison -> comparison MOD comparison .) ]
  ! PLUS            [ shift and go to state 66 ]
  ! MINUS           [ shift and go to state 67 ]
  ! MULT            [ shift and go to state 68 ]
  ! DIV             [ shift and go to state 69 ]
  ! MOD             [ shift and go to state 70 ]
  ! NEQ             [ shift and go to state 72 ]
  ! EQ              [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]


state 118

    (83) comparison -> comparison POTENCIA comparison .
    (78) comparison -> comparison . PLUS comparison
    (79) comparison -> comparison . MINUS comparison
    (80) comparison -> comparison . MULT comparison
    (81) comparison -> comparison . DIV comparison
    (82) comparison -> comparison . MOD comparison
    (83) comparison -> comparison . POTENCIA comparison
    (85) comparison -> comparison . NEQ comparison
    (86) comparison -> comparison . EQ comparison
    (87) comparison -> comparison . LT comparison
    (88) comparison -> comparison . GT comparison
    (89) comparison -> comparison . LEQ comparison
    (90) comparison -> comparison . GEQ comparison
    (91) comparison -> comparison . AND comparison
    (92) comparison -> comparison . OR comparison

    PLUS            reduce using rule 83 (comparison -> comparison POTENCIA comparison .)
    MINUS           reduce using rule 83 (comparison -> comparison POTENCIA comparison .)
    MULT            reduce using rule 83 (comparison -> comparison POTENCIA comparison .)
    DIV             reduce using rule 83 (comparison -> comparison POTENCIA comparison .)
    MOD             reduce using rule 83 (comparison -> comparison POTENCIA comparison .)
    NEQ             reduce using rule 83 (comparison -> comparison POTENCIA comparison .)
    EQ              reduce using rule 83 (comparison -> comparison POTENCIA comparison .)
    LT              reduce using rule 83 (comparison -> comparison POTENCIA comparison .)
    GT              reduce using rule 83 (comparison -> comparison POTENCIA comparison .)
    LEQ             reduce using rule 83 (comparison -> comparison POTENCIA comparison .)
    GEQ             reduce using rule 83 (comparison -> comparison POTENCIA comparison .)
    AND             reduce using rule 83 (comparison -> comparison POTENCIA comparison .)
    OR              reduce using rule 83 (comparison -> comparison POTENCIA comparison .)
    COMMA           reduce using rule 83 (comparison -> comparison POTENCIA comparison .)
    ASSIGN          reduce using rule 83 (comparison -> comparison POTENCIA comparison .)
    COLON           reduce using rule 83 (comparison -> comparison POTENCIA comparison .)
    NEWLINE         reduce using rule 83 (comparison -> comparison POTENCIA comparison .)
    SEMICOLON       reduce using rule 83 (comparison -> comparison POTENCIA comparison .)
    RPAR            reduce using rule 83 (comparison -> comparison POTENCIA comparison .)
    RBRA            reduce using rule 83 (comparison -> comparison POTENCIA comparison .)
    POTENCIA        shift and go to state 71

  ! POTENCIA        [ reduce using rule 83 (comparison -> comparison POTENCIA comparison .) ]
  ! PLUS            [ shift and go to state 66 ]
  ! MINUS           [ shift and go to state 67 ]
  ! MULT            [ shift and go to state 68 ]
  ! DIV             [ shift and go to state 69 ]
  ! MOD             [ shift and go to state 70 ]
  ! NEQ             [ shift and go to state 72 ]
  ! EQ              [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]


state 119

    (85) comparison -> comparison NEQ comparison .
    (78) comparison -> comparison . PLUS comparison
    (79) comparison -> comparison . MINUS comparison
    (80) comparison -> comparison . MULT comparison
    (81) comparison -> comparison . DIV comparison
    (82) comparison -> comparison . MOD comparison
    (83) comparison -> comparison . POTENCIA comparison
    (85) comparison -> comparison . NEQ comparison
    (86) comparison -> comparison . EQ comparison
    (87) comparison -> comparison . LT comparison
    (88) comparison -> comparison . GT comparison
    (89) comparison -> comparison . LEQ comparison
    (90) comparison -> comparison . GEQ comparison
    (91) comparison -> comparison . AND comparison
    (92) comparison -> comparison . OR comparison

    NEQ             reduce using rule 85 (comparison -> comparison NEQ comparison .)
    EQ              reduce using rule 85 (comparison -> comparison NEQ comparison .)
    LT              reduce using rule 85 (comparison -> comparison NEQ comparison .)
    GT              reduce using rule 85 (comparison -> comparison NEQ comparison .)
    LEQ             reduce using rule 85 (comparison -> comparison NEQ comparison .)
    GEQ             reduce using rule 85 (comparison -> comparison NEQ comparison .)
    AND             reduce using rule 85 (comparison -> comparison NEQ comparison .)
    OR              reduce using rule 85 (comparison -> comparison NEQ comparison .)
    COMMA           reduce using rule 85 (comparison -> comparison NEQ comparison .)
    ASSIGN          reduce using rule 85 (comparison -> comparison NEQ comparison .)
    COLON           reduce using rule 85 (comparison -> comparison NEQ comparison .)
    NEWLINE         reduce using rule 85 (comparison -> comparison NEQ comparison .)
    SEMICOLON       reduce using rule 85 (comparison -> comparison NEQ comparison .)
    RPAR            reduce using rule 85 (comparison -> comparison NEQ comparison .)
    RBRA            reduce using rule 85 (comparison -> comparison NEQ comparison .)
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    MULT            shift and go to state 68
    DIV             shift and go to state 69
    MOD             shift and go to state 70
    POTENCIA        shift and go to state 71

  ! PLUS            [ reduce using rule 85 (comparison -> comparison NEQ comparison .) ]
  ! MINUS           [ reduce using rule 85 (comparison -> comparison NEQ comparison .) ]
  ! MULT            [ reduce using rule 85 (comparison -> comparison NEQ comparison .) ]
  ! DIV             [ reduce using rule 85 (comparison -> comparison NEQ comparison .) ]
  ! MOD             [ reduce using rule 85 (comparison -> comparison NEQ comparison .) ]
  ! POTENCIA        [ reduce using rule 85 (comparison -> comparison NEQ comparison .) ]
  ! NEQ             [ shift and go to state 72 ]
  ! EQ              [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]


state 120

    (86) comparison -> comparison EQ comparison .
    (78) comparison -> comparison . PLUS comparison
    (79) comparison -> comparison . MINUS comparison
    (80) comparison -> comparison . MULT comparison
    (81) comparison -> comparison . DIV comparison
    (82) comparison -> comparison . MOD comparison
    (83) comparison -> comparison . POTENCIA comparison
    (85) comparison -> comparison . NEQ comparison
    (86) comparison -> comparison . EQ comparison
    (87) comparison -> comparison . LT comparison
    (88) comparison -> comparison . GT comparison
    (89) comparison -> comparison . LEQ comparison
    (90) comparison -> comparison . GEQ comparison
    (91) comparison -> comparison . AND comparison
    (92) comparison -> comparison . OR comparison

    NEQ             reduce using rule 86 (comparison -> comparison EQ comparison .)
    EQ              reduce using rule 86 (comparison -> comparison EQ comparison .)
    LT              reduce using rule 86 (comparison -> comparison EQ comparison .)
    GT              reduce using rule 86 (comparison -> comparison EQ comparison .)
    LEQ             reduce using rule 86 (comparison -> comparison EQ comparison .)
    GEQ             reduce using rule 86 (comparison -> comparison EQ comparison .)
    AND             reduce using rule 86 (comparison -> comparison EQ comparison .)
    OR              reduce using rule 86 (comparison -> comparison EQ comparison .)
    COMMA           reduce using rule 86 (comparison -> comparison EQ comparison .)
    ASSIGN          reduce using rule 86 (comparison -> comparison EQ comparison .)
    COLON           reduce using rule 86 (comparison -> comparison EQ comparison .)
    NEWLINE         reduce using rule 86 (comparison -> comparison EQ comparison .)
    SEMICOLON       reduce using rule 86 (comparison -> comparison EQ comparison .)
    RPAR            reduce using rule 86 (comparison -> comparison EQ comparison .)
    RBRA            reduce using rule 86 (comparison -> comparison EQ comparison .)
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    MULT            shift and go to state 68
    DIV             shift and go to state 69
    MOD             shift and go to state 70
    POTENCIA        shift and go to state 71

  ! PLUS            [ reduce using rule 86 (comparison -> comparison EQ comparison .) ]
  ! MINUS           [ reduce using rule 86 (comparison -> comparison EQ comparison .) ]
  ! MULT            [ reduce using rule 86 (comparison -> comparison EQ comparison .) ]
  ! DIV             [ reduce using rule 86 (comparison -> comparison EQ comparison .) ]
  ! MOD             [ reduce using rule 86 (comparison -> comparison EQ comparison .) ]
  ! POTENCIA        [ reduce using rule 86 (comparison -> comparison EQ comparison .) ]
  ! NEQ             [ shift and go to state 72 ]
  ! EQ              [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]


state 121

    (87) comparison -> comparison LT comparison .
    (78) comparison -> comparison . PLUS comparison
    (79) comparison -> comparison . MINUS comparison
    (80) comparison -> comparison . MULT comparison
    (81) comparison -> comparison . DIV comparison
    (82) comparison -> comparison . MOD comparison
    (83) comparison -> comparison . POTENCIA comparison
    (85) comparison -> comparison . NEQ comparison
    (86) comparison -> comparison . EQ comparison
    (87) comparison -> comparison . LT comparison
    (88) comparison -> comparison . GT comparison
    (89) comparison -> comparison . LEQ comparison
    (90) comparison -> comparison . GEQ comparison
    (91) comparison -> comparison . AND comparison
    (92) comparison -> comparison . OR comparison

    LT              reduce using rule 87 (comparison -> comparison LT comparison .)
    GT              reduce using rule 87 (comparison -> comparison LT comparison .)
    LEQ             reduce using rule 87 (comparison -> comparison LT comparison .)
    GEQ             reduce using rule 87 (comparison -> comparison LT comparison .)
    AND             reduce using rule 87 (comparison -> comparison LT comparison .)
    OR              reduce using rule 87 (comparison -> comparison LT comparison .)
    COMMA           reduce using rule 87 (comparison -> comparison LT comparison .)
    ASSIGN          reduce using rule 87 (comparison -> comparison LT comparison .)
    COLON           reduce using rule 87 (comparison -> comparison LT comparison .)
    NEWLINE         reduce using rule 87 (comparison -> comparison LT comparison .)
    SEMICOLON       reduce using rule 87 (comparison -> comparison LT comparison .)
    RPAR            reduce using rule 87 (comparison -> comparison LT comparison .)
    RBRA            reduce using rule 87 (comparison -> comparison LT comparison .)
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    MULT            shift and go to state 68
    DIV             shift and go to state 69
    MOD             shift and go to state 70
    POTENCIA        shift and go to state 71
    NEQ             shift and go to state 72
    EQ              shift and go to state 73

  ! PLUS            [ reduce using rule 87 (comparison -> comparison LT comparison .) ]
  ! MINUS           [ reduce using rule 87 (comparison -> comparison LT comparison .) ]
  ! MULT            [ reduce using rule 87 (comparison -> comparison LT comparison .) ]
  ! DIV             [ reduce using rule 87 (comparison -> comparison LT comparison .) ]
  ! MOD             [ reduce using rule 87 (comparison -> comparison LT comparison .) ]
  ! POTENCIA        [ reduce using rule 87 (comparison -> comparison LT comparison .) ]
  ! NEQ             [ reduce using rule 87 (comparison -> comparison LT comparison .) ]
  ! EQ              [ reduce using rule 87 (comparison -> comparison LT comparison .) ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]


state 122

    (88) comparison -> comparison GT comparison .
    (78) comparison -> comparison . PLUS comparison
    (79) comparison -> comparison . MINUS comparison
    (80) comparison -> comparison . MULT comparison
    (81) comparison -> comparison . DIV comparison
    (82) comparison -> comparison . MOD comparison
    (83) comparison -> comparison . POTENCIA comparison
    (85) comparison -> comparison . NEQ comparison
    (86) comparison -> comparison . EQ comparison
    (87) comparison -> comparison . LT comparison
    (88) comparison -> comparison . GT comparison
    (89) comparison -> comparison . LEQ comparison
    (90) comparison -> comparison . GEQ comparison
    (91) comparison -> comparison . AND comparison
    (92) comparison -> comparison . OR comparison

    LT              reduce using rule 88 (comparison -> comparison GT comparison .)
    GT              reduce using rule 88 (comparison -> comparison GT comparison .)
    LEQ             reduce using rule 88 (comparison -> comparison GT comparison .)
    GEQ             reduce using rule 88 (comparison -> comparison GT comparison .)
    AND             reduce using rule 88 (comparison -> comparison GT comparison .)
    OR              reduce using rule 88 (comparison -> comparison GT comparison .)
    COMMA           reduce using rule 88 (comparison -> comparison GT comparison .)
    ASSIGN          reduce using rule 88 (comparison -> comparison GT comparison .)
    COLON           reduce using rule 88 (comparison -> comparison GT comparison .)
    NEWLINE         reduce using rule 88 (comparison -> comparison GT comparison .)
    SEMICOLON       reduce using rule 88 (comparison -> comparison GT comparison .)
    RPAR            reduce using rule 88 (comparison -> comparison GT comparison .)
    RBRA            reduce using rule 88 (comparison -> comparison GT comparison .)
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    MULT            shift and go to state 68
    DIV             shift and go to state 69
    MOD             shift and go to state 70
    POTENCIA        shift and go to state 71
    NEQ             shift and go to state 72
    EQ              shift and go to state 73

  ! PLUS            [ reduce using rule 88 (comparison -> comparison GT comparison .) ]
  ! MINUS           [ reduce using rule 88 (comparison -> comparison GT comparison .) ]
  ! MULT            [ reduce using rule 88 (comparison -> comparison GT comparison .) ]
  ! DIV             [ reduce using rule 88 (comparison -> comparison GT comparison .) ]
  ! MOD             [ reduce using rule 88 (comparison -> comparison GT comparison .) ]
  ! POTENCIA        [ reduce using rule 88 (comparison -> comparison GT comparison .) ]
  ! NEQ             [ reduce using rule 88 (comparison -> comparison GT comparison .) ]
  ! EQ              [ reduce using rule 88 (comparison -> comparison GT comparison .) ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]


state 123

    (89) comparison -> comparison LEQ comparison .
    (78) comparison -> comparison . PLUS comparison
    (79) comparison -> comparison . MINUS comparison
    (80) comparison -> comparison . MULT comparison
    (81) comparison -> comparison . DIV comparison
    (82) comparison -> comparison . MOD comparison
    (83) comparison -> comparison . POTENCIA comparison
    (85) comparison -> comparison . NEQ comparison
    (86) comparison -> comparison . EQ comparison
    (87) comparison -> comparison . LT comparison
    (88) comparison -> comparison . GT comparison
    (89) comparison -> comparison . LEQ comparison
    (90) comparison -> comparison . GEQ comparison
    (91) comparison -> comparison . AND comparison
    (92) comparison -> comparison . OR comparison

    LT              reduce using rule 89 (comparison -> comparison LEQ comparison .)
    GT              reduce using rule 89 (comparison -> comparison LEQ comparison .)
    LEQ             reduce using rule 89 (comparison -> comparison LEQ comparison .)
    GEQ             reduce using rule 89 (comparison -> comparison LEQ comparison .)
    AND             reduce using rule 89 (comparison -> comparison LEQ comparison .)
    OR              reduce using rule 89 (comparison -> comparison LEQ comparison .)
    COMMA           reduce using rule 89 (comparison -> comparison LEQ comparison .)
    ASSIGN          reduce using rule 89 (comparison -> comparison LEQ comparison .)
    COLON           reduce using rule 89 (comparison -> comparison LEQ comparison .)
    NEWLINE         reduce using rule 89 (comparison -> comparison LEQ comparison .)
    SEMICOLON       reduce using rule 89 (comparison -> comparison LEQ comparison .)
    RPAR            reduce using rule 89 (comparison -> comparison LEQ comparison .)
    RBRA            reduce using rule 89 (comparison -> comparison LEQ comparison .)
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    MULT            shift and go to state 68
    DIV             shift and go to state 69
    MOD             shift and go to state 70
    POTENCIA        shift and go to state 71
    NEQ             shift and go to state 72
    EQ              shift and go to state 73

  ! PLUS            [ reduce using rule 89 (comparison -> comparison LEQ comparison .) ]
  ! MINUS           [ reduce using rule 89 (comparison -> comparison LEQ comparison .) ]
  ! MULT            [ reduce using rule 89 (comparison -> comparison LEQ comparison .) ]
  ! DIV             [ reduce using rule 89 (comparison -> comparison LEQ comparison .) ]
  ! MOD             [ reduce using rule 89 (comparison -> comparison LEQ comparison .) ]
  ! POTENCIA        [ reduce using rule 89 (comparison -> comparison LEQ comparison .) ]
  ! NEQ             [ reduce using rule 89 (comparison -> comparison LEQ comparison .) ]
  ! EQ              [ reduce using rule 89 (comparison -> comparison LEQ comparison .) ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]


state 124

    (90) comparison -> comparison GEQ comparison .
    (78) comparison -> comparison . PLUS comparison
    (79) comparison -> comparison . MINUS comparison
    (80) comparison -> comparison . MULT comparison
    (81) comparison -> comparison . DIV comparison
    (82) comparison -> comparison . MOD comparison
    (83) comparison -> comparison . POTENCIA comparison
    (85) comparison -> comparison . NEQ comparison
    (86) comparison -> comparison . EQ comparison
    (87) comparison -> comparison . LT comparison
    (88) comparison -> comparison . GT comparison
    (89) comparison -> comparison . LEQ comparison
    (90) comparison -> comparison . GEQ comparison
    (91) comparison -> comparison . AND comparison
    (92) comparison -> comparison . OR comparison

    LT              reduce using rule 90 (comparison -> comparison GEQ comparison .)
    GT              reduce using rule 90 (comparison -> comparison GEQ comparison .)
    LEQ             reduce using rule 90 (comparison -> comparison GEQ comparison .)
    GEQ             reduce using rule 90 (comparison -> comparison GEQ comparison .)
    AND             reduce using rule 90 (comparison -> comparison GEQ comparison .)
    OR              reduce using rule 90 (comparison -> comparison GEQ comparison .)
    COMMA           reduce using rule 90 (comparison -> comparison GEQ comparison .)
    ASSIGN          reduce using rule 90 (comparison -> comparison GEQ comparison .)
    COLON           reduce using rule 90 (comparison -> comparison GEQ comparison .)
    NEWLINE         reduce using rule 90 (comparison -> comparison GEQ comparison .)
    SEMICOLON       reduce using rule 90 (comparison -> comparison GEQ comparison .)
    RPAR            reduce using rule 90 (comparison -> comparison GEQ comparison .)
    RBRA            reduce using rule 90 (comparison -> comparison GEQ comparison .)
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    MULT            shift and go to state 68
    DIV             shift and go to state 69
    MOD             shift and go to state 70
    POTENCIA        shift and go to state 71
    NEQ             shift and go to state 72
    EQ              shift and go to state 73

  ! PLUS            [ reduce using rule 90 (comparison -> comparison GEQ comparison .) ]
  ! MINUS           [ reduce using rule 90 (comparison -> comparison GEQ comparison .) ]
  ! MULT            [ reduce using rule 90 (comparison -> comparison GEQ comparison .) ]
  ! DIV             [ reduce using rule 90 (comparison -> comparison GEQ comparison .) ]
  ! MOD             [ reduce using rule 90 (comparison -> comparison GEQ comparison .) ]
  ! POTENCIA        [ reduce using rule 90 (comparison -> comparison GEQ comparison .) ]
  ! NEQ             [ reduce using rule 90 (comparison -> comparison GEQ comparison .) ]
  ! EQ              [ reduce using rule 90 (comparison -> comparison GEQ comparison .) ]
  ! LT              [ shift and go to state 74 ]
  ! GT              [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]


state 125

    (91) comparison -> comparison AND comparison .
    (78) comparison -> comparison . PLUS comparison
    (79) comparison -> comparison . MINUS comparison
    (80) comparison -> comparison . MULT comparison
    (81) comparison -> comparison . DIV comparison
    (82) comparison -> comparison . MOD comparison
    (83) comparison -> comparison . POTENCIA comparison
    (85) comparison -> comparison . NEQ comparison
    (86) comparison -> comparison . EQ comparison
    (87) comparison -> comparison . LT comparison
    (88) comparison -> comparison . GT comparison
    (89) comparison -> comparison . LEQ comparison
    (90) comparison -> comparison . GEQ comparison
    (91) comparison -> comparison . AND comparison
    (92) comparison -> comparison . OR comparison

    AND             reduce using rule 91 (comparison -> comparison AND comparison .)
    OR              reduce using rule 91 (comparison -> comparison AND comparison .)
    COMMA           reduce using rule 91 (comparison -> comparison AND comparison .)
    ASSIGN          reduce using rule 91 (comparison -> comparison AND comparison .)
    COLON           reduce using rule 91 (comparison -> comparison AND comparison .)
    NEWLINE         reduce using rule 91 (comparison -> comparison AND comparison .)
    SEMICOLON       reduce using rule 91 (comparison -> comparison AND comparison .)
    RPAR            reduce using rule 91 (comparison -> comparison AND comparison .)
    RBRA            reduce using rule 91 (comparison -> comparison AND comparison .)
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    MULT            shift and go to state 68
    DIV             shift and go to state 69
    MOD             shift and go to state 70
    POTENCIA        shift and go to state 71
    NEQ             shift and go to state 72
    EQ              shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LEQ             shift and go to state 76
    GEQ             shift and go to state 77

  ! PLUS            [ reduce using rule 91 (comparison -> comparison AND comparison .) ]
  ! MINUS           [ reduce using rule 91 (comparison -> comparison AND comparison .) ]
  ! MULT            [ reduce using rule 91 (comparison -> comparison AND comparison .) ]
  ! DIV             [ reduce using rule 91 (comparison -> comparison AND comparison .) ]
  ! MOD             [ reduce using rule 91 (comparison -> comparison AND comparison .) ]
  ! POTENCIA        [ reduce using rule 91 (comparison -> comparison AND comparison .) ]
  ! NEQ             [ reduce using rule 91 (comparison -> comparison AND comparison .) ]
  ! EQ              [ reduce using rule 91 (comparison -> comparison AND comparison .) ]
  ! LT              [ reduce using rule 91 (comparison -> comparison AND comparison .) ]
  ! GT              [ reduce using rule 91 (comparison -> comparison AND comparison .) ]
  ! LEQ             [ reduce using rule 91 (comparison -> comparison AND comparison .) ]
  ! GEQ             [ reduce using rule 91 (comparison -> comparison AND comparison .) ]
  ! AND             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]


state 126

    (92) comparison -> comparison OR comparison .
    (78) comparison -> comparison . PLUS comparison
    (79) comparison -> comparison . MINUS comparison
    (80) comparison -> comparison . MULT comparison
    (81) comparison -> comparison . DIV comparison
    (82) comparison -> comparison . MOD comparison
    (83) comparison -> comparison . POTENCIA comparison
    (85) comparison -> comparison . NEQ comparison
    (86) comparison -> comparison . EQ comparison
    (87) comparison -> comparison . LT comparison
    (88) comparison -> comparison . GT comparison
    (89) comparison -> comparison . LEQ comparison
    (90) comparison -> comparison . GEQ comparison
    (91) comparison -> comparison . AND comparison
    (92) comparison -> comparison . OR comparison

    OR              reduce using rule 92 (comparison -> comparison OR comparison .)
    COMMA           reduce using rule 92 (comparison -> comparison OR comparison .)
    ASSIGN          reduce using rule 92 (comparison -> comparison OR comparison .)
    COLON           reduce using rule 92 (comparison -> comparison OR comparison .)
    NEWLINE         reduce using rule 92 (comparison -> comparison OR comparison .)
    SEMICOLON       reduce using rule 92 (comparison -> comparison OR comparison .)
    RPAR            reduce using rule 92 (comparison -> comparison OR comparison .)
    RBRA            reduce using rule 92 (comparison -> comparison OR comparison .)
    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    MULT            shift and go to state 68
    DIV             shift and go to state 69
    MOD             shift and go to state 70
    POTENCIA        shift and go to state 71
    NEQ             shift and go to state 72
    EQ              shift and go to state 73
    LT              shift and go to state 74
    GT              shift and go to state 75
    LEQ             shift and go to state 76
    GEQ             shift and go to state 77
    AND             shift and go to state 78

  ! PLUS            [ reduce using rule 92 (comparison -> comparison OR comparison .) ]
  ! MINUS           [ reduce using rule 92 (comparison -> comparison OR comparison .) ]
  ! MULT            [ reduce using rule 92 (comparison -> comparison OR comparison .) ]
  ! DIV             [ reduce using rule 92 (comparison -> comparison OR comparison .) ]
  ! MOD             [ reduce using rule 92 (comparison -> comparison OR comparison .) ]
  ! POTENCIA        [ reduce using rule 92 (comparison -> comparison OR comparison .) ]
  ! NEQ             [ reduce using rule 92 (comparison -> comparison OR comparison .) ]
  ! EQ              [ reduce using rule 92 (comparison -> comparison OR comparison .) ]
  ! LT              [ reduce using rule 92 (comparison -> comparison OR comparison .) ]
  ! GT              [ reduce using rule 92 (comparison -> comparison OR comparison .) ]
  ! LEQ             [ reduce using rule 92 (comparison -> comparison OR comparison .) ]
  ! GEQ             [ reduce using rule 92 (comparison -> comparison OR comparison .) ]
  ! AND             [ reduce using rule 92 (comparison -> comparison OR comparison .) ]
  ! OR              [ shift and go to state 79 ]


state 127

    (94) comparison -> LPAR comparison RPAR .

    PLUS            reduce using rule 94 (comparison -> LPAR comparison RPAR .)
    MINUS           reduce using rule 94 (comparison -> LPAR comparison RPAR .)
    MULT            reduce using rule 94 (comparison -> LPAR comparison RPAR .)
    DIV             reduce using rule 94 (comparison -> LPAR comparison RPAR .)
    MOD             reduce using rule 94 (comparison -> LPAR comparison RPAR .)
    POTENCIA        reduce using rule 94 (comparison -> LPAR comparison RPAR .)
    NEQ             reduce using rule 94 (comparison -> LPAR comparison RPAR .)
    EQ              reduce using rule 94 (comparison -> LPAR comparison RPAR .)
    LT              reduce using rule 94 (comparison -> LPAR comparison RPAR .)
    GT              reduce using rule 94 (comparison -> LPAR comparison RPAR .)
    LEQ             reduce using rule 94 (comparison -> LPAR comparison RPAR .)
    GEQ             reduce using rule 94 (comparison -> LPAR comparison RPAR .)
    AND             reduce using rule 94 (comparison -> LPAR comparison RPAR .)
    OR              reduce using rule 94 (comparison -> LPAR comparison RPAR .)
    COMMA           reduce using rule 94 (comparison -> LPAR comparison RPAR .)
    ASSIGN          reduce using rule 94 (comparison -> LPAR comparison RPAR .)
    COLON           reduce using rule 94 (comparison -> LPAR comparison RPAR .)
    NEWLINE         reduce using rule 94 (comparison -> LPAR comparison RPAR .)
    SEMICOLON       reduce using rule 94 (comparison -> LPAR comparison RPAR .)
    RPAR            reduce using rule 94 (comparison -> LPAR comparison RPAR .)
    RBRA            reduce using rule 94 (comparison -> LPAR comparison RPAR .)


state 128

    (108) method -> LPAR atom RPAR . DOT NAME trailer

    DOT             shift and go to state 158


state 129

    (68) if_stmt -> IF par_test COLON suite .
    (69) if_stmt -> IF par_test COLON suite . ELSE COLON suite
    (70) if_stmt -> IF par_test COLON suite . else_if_list
    (71) else_if_list -> . ELIF par_test COLON suite
    (72) else_if_list -> . ELIF par_test COLON suite ELSE COLON suite
    (73) else_if_list -> . ELIF par_test COLON suite else_if_list

    ENDMARKER       reduce using rule 68 (if_stmt -> IF par_test COLON suite .)
    NEWLINE         reduce using rule 68 (if_stmt -> IF par_test COLON suite .)
    IF              reduce using rule 68 (if_stmt -> IF par_test COLON suite .)
    DEF             reduce using rule 68 (if_stmt -> IF par_test COLON suite .)
    WHILE           reduce using rule 68 (if_stmt -> IF par_test COLON suite .)
    FOR             reduce using rule 68 (if_stmt -> IF par_test COLON suite .)
    STRUCT          reduce using rule 68 (if_stmt -> IF par_test COLON suite .)
    RETURN          reduce using rule 68 (if_stmt -> IF par_test COLON suite .)
    CONTINUE        reduce using rule 68 (if_stmt -> IF par_test COLON suite .)
    BREAK           reduce using rule 68 (if_stmt -> IF par_test COLON suite .)
    NAME            reduce using rule 68 (if_stmt -> IF par_test COLON suite .)
    NUMBER          reduce using rule 68 (if_stmt -> IF par_test COLON suite .)
    FLOAT           reduce using rule 68 (if_stmt -> IF par_test COLON suite .)
    STRING          reduce using rule 68 (if_stmt -> IF par_test COLON suite .)
    TRUE            reduce using rule 68 (if_stmt -> IF par_test COLON suite .)
    FALSE           reduce using rule 68 (if_stmt -> IF par_test COLON suite .)
    MINUS           reduce using rule 68 (if_stmt -> IF par_test COLON suite .)
    NOT             reduce using rule 68 (if_stmt -> IF par_test COLON suite .)
    LPAR            reduce using rule 68 (if_stmt -> IF par_test COLON suite .)
    DEDENT          reduce using rule 68 (if_stmt -> IF par_test COLON suite .)
    ELSE            shift and go to state 159
    ELIF            shift and go to state 161

    else_if_list                   shift and go to state 160

state 130

    (74) suite -> simple_stmt .

    ELSE            reduce using rule 74 (suite -> simple_stmt .)
    ELIF            reduce using rule 74 (suite -> simple_stmt .)
    ENDMARKER       reduce using rule 74 (suite -> simple_stmt .)
    NEWLINE         reduce using rule 74 (suite -> simple_stmt .)
    IF              reduce using rule 74 (suite -> simple_stmt .)
    DEF             reduce using rule 74 (suite -> simple_stmt .)
    WHILE           reduce using rule 74 (suite -> simple_stmt .)
    FOR             reduce using rule 74 (suite -> simple_stmt .)
    STRUCT          reduce using rule 74 (suite -> simple_stmt .)
    RETURN          reduce using rule 74 (suite -> simple_stmt .)
    CONTINUE        reduce using rule 74 (suite -> simple_stmt .)
    BREAK           reduce using rule 74 (suite -> simple_stmt .)
    NAME            reduce using rule 74 (suite -> simple_stmt .)
    NUMBER          reduce using rule 74 (suite -> simple_stmt .)
    FLOAT           reduce using rule 74 (suite -> simple_stmt .)
    STRING          reduce using rule 74 (suite -> simple_stmt .)
    TRUE            reduce using rule 74 (suite -> simple_stmt .)
    FALSE           reduce using rule 74 (suite -> simple_stmt .)
    MINUS           reduce using rule 74 (suite -> simple_stmt .)
    NOT             reduce using rule 74 (suite -> simple_stmt .)
    LPAR            reduce using rule 74 (suite -> simple_stmt .)
    DEDENT          reduce using rule 74 (suite -> simple_stmt .)


state 131

    (75) suite -> NEWLINE . INDENT stmts DEDENT

    INDENT          shift and go to state 162


state 132

    (66) par_test -> LPAR atom RPAR .
    (108) method -> LPAR atom RPAR . DOT NAME trailer

    COLON           reduce using rule 66 (par_test -> LPAR atom RPAR .)
    DOT             shift and go to state 158


state 133

    (6) funcdef -> DEF NAME parameters COLON . suite
    (74) suite -> . simple_stmt
    (75) suite -> . NEWLINE INDENT stmts DEDENT
    (22) simple_stmt -> . small_stmts NEWLINE
    (23) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (24) small_stmts -> . small_stmts SEMICOLON small_stmt
    (25) small_stmts -> . small_stmt
    (26) small_stmt -> . flow_stmt
    (27) small_stmt -> . expr_stmt
    (39) flow_stmt -> . return_stmt
    (40) flow_stmt -> . continue_stmt
    (41) flow_stmt -> . break_stmt
    (28) expr_stmt -> . testlist ASSIGN testlist
    (29) expr_stmt -> . atom list_index ASSIGN testlist
    (30) expr_stmt -> . testlist COLON type ASSIGN testlist
    (31) expr_stmt -> . testlist ASSIGN list_def
    (32) expr_stmt -> . testlist COLON type ASSIGN list_def
    (33) expr_stmt -> . testlist
    (42) return_stmt -> . RETURN testlist
    (43) return_stmt -> . RETURN
    (44) continue_stmt -> . CONTINUE
    (45) break_stmt -> . BREAK
    (114) testlist -> . testlist_multi COMMA
    (115) testlist -> . testlist_multi
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (116) testlist_multi -> . testlist_multi COMMA test
    (117) testlist_multi -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    NEWLINE         shift and go to state 131
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40

    suite                          shift and go to state 163
    simple_stmt                    shift and go to state 130
    small_stmts                    shift and go to state 7
    small_stmt                     shift and go to state 13
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    atom                           shift and go to state 27
    testlist_multi                 shift and go to state 31
    test                           shift and go to state 18
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 134

    (7) funcdef -> DEF NAME parameters RETYPE . type COLON suite
    (14) type -> . STR
    (15) type -> . INT
    (16) type -> . FLOAT
    (17) type -> . BOOL
    (18) type -> . LIST
    (19) type -> . NAME

    STR             shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    BOOL            shift and go to state 102
    LIST            shift and go to state 103
    NAME            shift and go to state 104

    type                           shift and go to state 164

state 135

    (8) parameters -> LPAR RPAR .

    COLON           reduce using rule 8 (parameters -> LPAR RPAR .)
    RETYPE          reduce using rule 8 (parameters -> LPAR RPAR .)


state 136

    (9) parameters -> LPAR varargslist . RPAR
    (10) varargslist -> varargslist . COMMA NAME COLON type
    (11) varargslist -> varargslist . COMMA NAME

    RPAR            shift and go to state 165
    COMMA           shift and go to state 166


state 137

    (12) varargslist -> NAME . COLON type
    (13) varargslist -> NAME .

    COLON           shift and go to state 167
    RPAR            reduce using rule 13 (varargslist -> NAME .)
    COMMA           reduce using rule 13 (varargslist -> NAME .)


state 138

    (107) method -> NAME DOT NAME trailer .

    PLUS            reduce using rule 107 (method -> NAME DOT NAME trailer .)
    MINUS           reduce using rule 107 (method -> NAME DOT NAME trailer .)
    MULT            reduce using rule 107 (method -> NAME DOT NAME trailer .)
    DIV             reduce using rule 107 (method -> NAME DOT NAME trailer .)
    MOD             reduce using rule 107 (method -> NAME DOT NAME trailer .)
    POTENCIA        reduce using rule 107 (method -> NAME DOT NAME trailer .)
    NEQ             reduce using rule 107 (method -> NAME DOT NAME trailer .)
    EQ              reduce using rule 107 (method -> NAME DOT NAME trailer .)
    LT              reduce using rule 107 (method -> NAME DOT NAME trailer .)
    GT              reduce using rule 107 (method -> NAME DOT NAME trailer .)
    LEQ             reduce using rule 107 (method -> NAME DOT NAME trailer .)
    GEQ             reduce using rule 107 (method -> NAME DOT NAME trailer .)
    AND             reduce using rule 107 (method -> NAME DOT NAME trailer .)
    OR              reduce using rule 107 (method -> NAME DOT NAME trailer .)
    COMMA           reduce using rule 107 (method -> NAME DOT NAME trailer .)
    ASSIGN          reduce using rule 107 (method -> NAME DOT NAME trailer .)
    COLON           reduce using rule 107 (method -> NAME DOT NAME trailer .)
    NEWLINE         reduce using rule 107 (method -> NAME DOT NAME trailer .)
    SEMICOLON       reduce using rule 107 (method -> NAME DOT NAME trailer .)
    RPAR            reduce using rule 107 (method -> NAME DOT NAME trailer .)
    RBRA            reduce using rule 107 (method -> NAME DOT NAME trailer .)


state 139

    (51) while_loop -> WHILE test COLON suite .

    ENDMARKER       reduce using rule 51 (while_loop -> WHILE test COLON suite .)
    NEWLINE         reduce using rule 51 (while_loop -> WHILE test COLON suite .)
    IF              reduce using rule 51 (while_loop -> WHILE test COLON suite .)
    DEF             reduce using rule 51 (while_loop -> WHILE test COLON suite .)
    WHILE           reduce using rule 51 (while_loop -> WHILE test COLON suite .)
    FOR             reduce using rule 51 (while_loop -> WHILE test COLON suite .)
    STRUCT          reduce using rule 51 (while_loop -> WHILE test COLON suite .)
    RETURN          reduce using rule 51 (while_loop -> WHILE test COLON suite .)
    CONTINUE        reduce using rule 51 (while_loop -> WHILE test COLON suite .)
    BREAK           reduce using rule 51 (while_loop -> WHILE test COLON suite .)
    NAME            reduce using rule 51 (while_loop -> WHILE test COLON suite .)
    NUMBER          reduce using rule 51 (while_loop -> WHILE test COLON suite .)
    FLOAT           reduce using rule 51 (while_loop -> WHILE test COLON suite .)
    STRING          reduce using rule 51 (while_loop -> WHILE test COLON suite .)
    TRUE            reduce using rule 51 (while_loop -> WHILE test COLON suite .)
    FALSE           reduce using rule 51 (while_loop -> WHILE test COLON suite .)
    MINUS           reduce using rule 51 (while_loop -> WHILE test COLON suite .)
    NOT             reduce using rule 51 (while_loop -> WHILE test COLON suite .)
    LPAR            reduce using rule 51 (while_loop -> WHILE test COLON suite .)
    DEDENT          reduce using rule 51 (while_loop -> WHILE test COLON suite .)


state 140

    (59) name_range -> NAME .
    (101) atom -> NAME .

    COLON           reduce using rule 59 (name_range -> NAME .)
    LPAR            reduce using rule 101 (atom -> NAME .)
    LBRA            reduce using rule 101 (atom -> NAME .)


state 141

    (52) for_loop -> FOR NAME IN range . COLON suite

    COLON           shift and go to state 168


state 142

    (53) range -> string_range .

    COLON           reduce using rule 53 (range -> string_range .)


state 143

    (54) range -> name_range .

    COLON           reduce using rule 54 (range -> name_range .)


state 144

    (55) range -> list_def .

    COLON           reduce using rule 55 (range -> list_def .)


state 145

    (56) range -> atom . trailer
    (57) range -> atom . list_index
    (110) trailer -> . LPAR arglist RPAR
    (111) trailer -> . LPAR RPAR
    (112) list_index -> . LBRA test RBRA
    (113) list_index -> . list_index LBRA test RBRA

    LPAR            shift and go to state 63
    LBRA            shift and go to state 62

    trailer                        shift and go to state 169
    list_index                     shift and go to state 170

state 146

    (58) string_range -> STRING .
    (104) atom -> STRING .

    COLON           reduce using rule 58 (string_range -> STRING .)
    LPAR            reduce using rule 104 (atom -> STRING .)
    LBRA            reduce using rule 104 (atom -> STRING .)


state 147

    (60) struct_def -> STRUCT NAME COLON struct_body .

    ENDMARKER       reduce using rule 60 (struct_def -> STRUCT NAME COLON struct_body .)
    NEWLINE         reduce using rule 60 (struct_def -> STRUCT NAME COLON struct_body .)
    IF              reduce using rule 60 (struct_def -> STRUCT NAME COLON struct_body .)
    DEF             reduce using rule 60 (struct_def -> STRUCT NAME COLON struct_body .)
    WHILE           reduce using rule 60 (struct_def -> STRUCT NAME COLON struct_body .)
    FOR             reduce using rule 60 (struct_def -> STRUCT NAME COLON struct_body .)
    STRUCT          reduce using rule 60 (struct_def -> STRUCT NAME COLON struct_body .)
    RETURN          reduce using rule 60 (struct_def -> STRUCT NAME COLON struct_body .)
    CONTINUE        reduce using rule 60 (struct_def -> STRUCT NAME COLON struct_body .)
    BREAK           reduce using rule 60 (struct_def -> STRUCT NAME COLON struct_body .)
    NAME            reduce using rule 60 (struct_def -> STRUCT NAME COLON struct_body .)
    NUMBER          reduce using rule 60 (struct_def -> STRUCT NAME COLON struct_body .)
    FLOAT           reduce using rule 60 (struct_def -> STRUCT NAME COLON struct_body .)
    STRING          reduce using rule 60 (struct_def -> STRUCT NAME COLON struct_body .)
    TRUE            reduce using rule 60 (struct_def -> STRUCT NAME COLON struct_body .)
    FALSE           reduce using rule 60 (struct_def -> STRUCT NAME COLON struct_body .)
    MINUS           reduce using rule 60 (struct_def -> STRUCT NAME COLON struct_body .)
    NOT             reduce using rule 60 (struct_def -> STRUCT NAME COLON struct_body .)
    LPAR            reduce using rule 60 (struct_def -> STRUCT NAME COLON struct_body .)
    DEDENT          reduce using rule 60 (struct_def -> STRUCT NAME COLON struct_body .)


state 148

    (61) struct_body -> NEWLINE . INDENT struct_fields DEDENT

    INDENT          shift and go to state 171


state 149

    (34) list_def -> LBRA list_elem . RBRA
    (35) list_elem -> list_elem . COMMA test
    (36) list_elem -> list_elem . COMMA list_def

    RBRA            shift and go to state 172
    COMMA           shift and go to state 173


state 150

    (37) list_elem -> test .

    RBRA            reduce using rule 37 (list_elem -> test .)
    COMMA           reduce using rule 37 (list_elem -> test .)


state 151

    (38) list_elem -> list_def .

    RBRA            reduce using rule 38 (list_elem -> list_def .)
    COMMA           reduce using rule 38 (list_elem -> list_def .)


state 152

    (30) expr_stmt -> testlist COLON type ASSIGN . testlist
    (32) expr_stmt -> testlist COLON type ASSIGN . list_def
    (114) testlist -> . testlist_multi COMMA
    (115) testlist -> . testlist_multi
    (34) list_def -> . LBRA list_elem RBRA
    (116) testlist_multi -> . testlist_multi COMMA test
    (117) testlist_multi -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    LBRA            shift and go to state 97
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    testlist                       shift and go to state 174
    list_def                       shift and go to state 175
    testlist_multi                 shift and go to state 31
    test                           shift and go to state 18
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 153

    (29) expr_stmt -> atom list_index ASSIGN testlist .

    NEWLINE         reduce using rule 29 (expr_stmt -> atom list_index ASSIGN testlist .)
    SEMICOLON       reduce using rule 29 (expr_stmt -> atom list_index ASSIGN testlist .)


state 154

    (113) list_index -> list_index LBRA test . RBRA

    RBRA            shift and go to state 176


state 155

    (112) list_index -> LBRA test RBRA .

    ASSIGN          reduce using rule 112 (list_index -> LBRA test RBRA .)
    LBRA            reduce using rule 112 (list_index -> LBRA test RBRA .)
    PLUS            reduce using rule 112 (list_index -> LBRA test RBRA .)
    MINUS           reduce using rule 112 (list_index -> LBRA test RBRA .)
    MULT            reduce using rule 112 (list_index -> LBRA test RBRA .)
    DIV             reduce using rule 112 (list_index -> LBRA test RBRA .)
    MOD             reduce using rule 112 (list_index -> LBRA test RBRA .)
    POTENCIA        reduce using rule 112 (list_index -> LBRA test RBRA .)
    NEQ             reduce using rule 112 (list_index -> LBRA test RBRA .)
    EQ              reduce using rule 112 (list_index -> LBRA test RBRA .)
    LT              reduce using rule 112 (list_index -> LBRA test RBRA .)
    GT              reduce using rule 112 (list_index -> LBRA test RBRA .)
    LEQ             reduce using rule 112 (list_index -> LBRA test RBRA .)
    GEQ             reduce using rule 112 (list_index -> LBRA test RBRA .)
    AND             reduce using rule 112 (list_index -> LBRA test RBRA .)
    OR              reduce using rule 112 (list_index -> LBRA test RBRA .)
    COMMA           reduce using rule 112 (list_index -> LBRA test RBRA .)
    COLON           reduce using rule 112 (list_index -> LBRA test RBRA .)
    NEWLINE         reduce using rule 112 (list_index -> LBRA test RBRA .)
    SEMICOLON       reduce using rule 112 (list_index -> LBRA test RBRA .)
    RPAR            reduce using rule 112 (list_index -> LBRA test RBRA .)
    RBRA            reduce using rule 112 (list_index -> LBRA test RBRA .)


state 156

    (110) trailer -> LPAR arglist RPAR .

    PLUS            reduce using rule 110 (trailer -> LPAR arglist RPAR .)
    MINUS           reduce using rule 110 (trailer -> LPAR arglist RPAR .)
    MULT            reduce using rule 110 (trailer -> LPAR arglist RPAR .)
    DIV             reduce using rule 110 (trailer -> LPAR arglist RPAR .)
    MOD             reduce using rule 110 (trailer -> LPAR arglist RPAR .)
    POTENCIA        reduce using rule 110 (trailer -> LPAR arglist RPAR .)
    NEQ             reduce using rule 110 (trailer -> LPAR arglist RPAR .)
    EQ              reduce using rule 110 (trailer -> LPAR arglist RPAR .)
    LT              reduce using rule 110 (trailer -> LPAR arglist RPAR .)
    GT              reduce using rule 110 (trailer -> LPAR arglist RPAR .)
    LEQ             reduce using rule 110 (trailer -> LPAR arglist RPAR .)
    GEQ             reduce using rule 110 (trailer -> LPAR arglist RPAR .)
    AND             reduce using rule 110 (trailer -> LPAR arglist RPAR .)
    OR              reduce using rule 110 (trailer -> LPAR arglist RPAR .)
    COMMA           reduce using rule 110 (trailer -> LPAR arglist RPAR .)
    ASSIGN          reduce using rule 110 (trailer -> LPAR arglist RPAR .)
    COLON           reduce using rule 110 (trailer -> LPAR arglist RPAR .)
    NEWLINE         reduce using rule 110 (trailer -> LPAR arglist RPAR .)
    SEMICOLON       reduce using rule 110 (trailer -> LPAR arglist RPAR .)
    RPAR            reduce using rule 110 (trailer -> LPAR arglist RPAR .)
    RBRA            reduce using rule 110 (trailer -> LPAR arglist RPAR .)


state 157

    (119) arglist -> arglist COMMA . argument
    (121) argument -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    argument                       shift and go to state 177
    test                           shift and go to state 111
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 158

    (108) method -> LPAR atom RPAR DOT . NAME trailer

    NAME            shift and go to state 178


state 159

    (69) if_stmt -> IF par_test COLON suite ELSE . COLON suite

    COLON           shift and go to state 179


state 160

    (70) if_stmt -> IF par_test COLON suite else_if_list .

    ENDMARKER       reduce using rule 70 (if_stmt -> IF par_test COLON suite else_if_list .)
    NEWLINE         reduce using rule 70 (if_stmt -> IF par_test COLON suite else_if_list .)
    IF              reduce using rule 70 (if_stmt -> IF par_test COLON suite else_if_list .)
    DEF             reduce using rule 70 (if_stmt -> IF par_test COLON suite else_if_list .)
    WHILE           reduce using rule 70 (if_stmt -> IF par_test COLON suite else_if_list .)
    FOR             reduce using rule 70 (if_stmt -> IF par_test COLON suite else_if_list .)
    STRUCT          reduce using rule 70 (if_stmt -> IF par_test COLON suite else_if_list .)
    RETURN          reduce using rule 70 (if_stmt -> IF par_test COLON suite else_if_list .)
    CONTINUE        reduce using rule 70 (if_stmt -> IF par_test COLON suite else_if_list .)
    BREAK           reduce using rule 70 (if_stmt -> IF par_test COLON suite else_if_list .)
    NAME            reduce using rule 70 (if_stmt -> IF par_test COLON suite else_if_list .)
    NUMBER          reduce using rule 70 (if_stmt -> IF par_test COLON suite else_if_list .)
    FLOAT           reduce using rule 70 (if_stmt -> IF par_test COLON suite else_if_list .)
    STRING          reduce using rule 70 (if_stmt -> IF par_test COLON suite else_if_list .)
    TRUE            reduce using rule 70 (if_stmt -> IF par_test COLON suite else_if_list .)
    FALSE           reduce using rule 70 (if_stmt -> IF par_test COLON suite else_if_list .)
    MINUS           reduce using rule 70 (if_stmt -> IF par_test COLON suite else_if_list .)
    NOT             reduce using rule 70 (if_stmt -> IF par_test COLON suite else_if_list .)
    LPAR            reduce using rule 70 (if_stmt -> IF par_test COLON suite else_if_list .)
    DEDENT          reduce using rule 70 (if_stmt -> IF par_test COLON suite else_if_list .)


state 161

    (71) else_if_list -> ELIF . par_test COLON suite
    (72) else_if_list -> ELIF . par_test COLON suite ELSE COLON suite
    (73) else_if_list -> ELIF . par_test COLON suite else_if_list
    (66) par_test -> . LPAR atom RPAR
    (67) par_test -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    LPAR            shift and go to state 50
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    par_test                       shift and go to state 180
    atom                           shift and go to state 51
    test                           shift and go to state 52
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 162

    (75) suite -> NEWLINE INDENT . stmts DEDENT
    (76) stmts -> . stmts stmt
    (77) stmts -> . stmt
    (20) stmt -> . simple_stmt
    (21) stmt -> . compound_stmt
    (22) simple_stmt -> . small_stmts NEWLINE
    (23) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (46) compound_stmt -> . if_stmt
    (47) compound_stmt -> . funcdef
    (48) compound_stmt -> . while_loop
    (49) compound_stmt -> . for_loop
    (50) compound_stmt -> . struct_def
    (24) small_stmts -> . small_stmts SEMICOLON small_stmt
    (25) small_stmts -> . small_stmt
    (68) if_stmt -> . IF par_test COLON suite
    (69) if_stmt -> . IF par_test COLON suite ELSE COLON suite
    (70) if_stmt -> . IF par_test COLON suite else_if_list
    (6) funcdef -> . DEF NAME parameters COLON suite
    (7) funcdef -> . DEF NAME parameters RETYPE type COLON suite
    (51) while_loop -> . WHILE test COLON suite
    (52) for_loop -> . FOR NAME IN range COLON suite
    (60) struct_def -> . STRUCT NAME COLON struct_body
    (26) small_stmt -> . flow_stmt
    (27) small_stmt -> . expr_stmt
    (39) flow_stmt -> . return_stmt
    (40) flow_stmt -> . continue_stmt
    (41) flow_stmt -> . break_stmt
    (28) expr_stmt -> . testlist ASSIGN testlist
    (29) expr_stmt -> . atom list_index ASSIGN testlist
    (30) expr_stmt -> . testlist COLON type ASSIGN testlist
    (31) expr_stmt -> . testlist ASSIGN list_def
    (32) expr_stmt -> . testlist COLON type ASSIGN list_def
    (33) expr_stmt -> . testlist
    (42) return_stmt -> . RETURN testlist
    (43) return_stmt -> . RETURN
    (44) continue_stmt -> . CONTINUE
    (45) break_stmt -> . BREAK
    (114) testlist -> . testlist_multi COMMA
    (115) testlist -> . testlist_multi
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (116) testlist_multi -> . testlist_multi COMMA test
    (117) testlist_multi -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    IF              shift and go to state 14
    DEF             shift and go to state 15
    WHILE           shift and go to state 17
    FOR             shift and go to state 19
    STRUCT          shift and go to state 20
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40

    stmts                          shift and go to state 181
    stmt                           shift and go to state 182
    simple_stmt                    shift and go to state 5
    compound_stmt                  shift and go to state 6
    small_stmts                    shift and go to state 7
    if_stmt                        shift and go to state 8
    funcdef                        shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    struct_def                     shift and go to state 12
    small_stmt                     shift and go to state 13
    test                           shift and go to state 18
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    atom                           shift and go to state 27
    testlist_multi                 shift and go to state 31
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 163

    (6) funcdef -> DEF NAME parameters COLON suite .

    ENDMARKER       reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    NEWLINE         reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    IF              reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    DEF             reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    WHILE           reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    FOR             reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    STRUCT          reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    RETURN          reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    CONTINUE        reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    BREAK           reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    NAME            reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    NUMBER          reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    FLOAT           reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    STRING          reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    TRUE            reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    FALSE           reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    MINUS           reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    NOT             reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    LPAR            reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    DEDENT          reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)


state 164

    (7) funcdef -> DEF NAME parameters RETYPE type . COLON suite

    COLON           shift and go to state 183


state 165

    (9) parameters -> LPAR varargslist RPAR .

    COLON           reduce using rule 9 (parameters -> LPAR varargslist RPAR .)
    RETYPE          reduce using rule 9 (parameters -> LPAR varargslist RPAR .)


state 166

    (10) varargslist -> varargslist COMMA . NAME COLON type
    (11) varargslist -> varargslist COMMA . NAME

    NAME            shift and go to state 184


state 167

    (12) varargslist -> NAME COLON . type
    (14) type -> . STR
    (15) type -> . INT
    (16) type -> . FLOAT
    (17) type -> . BOOL
    (18) type -> . LIST
    (19) type -> . NAME

    STR             shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    BOOL            shift and go to state 102
    LIST            shift and go to state 103
    NAME            shift and go to state 104

    type                           shift and go to state 185

state 168

    (52) for_loop -> FOR NAME IN range COLON . suite
    (74) suite -> . simple_stmt
    (75) suite -> . NEWLINE INDENT stmts DEDENT
    (22) simple_stmt -> . small_stmts NEWLINE
    (23) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (24) small_stmts -> . small_stmts SEMICOLON small_stmt
    (25) small_stmts -> . small_stmt
    (26) small_stmt -> . flow_stmt
    (27) small_stmt -> . expr_stmt
    (39) flow_stmt -> . return_stmt
    (40) flow_stmt -> . continue_stmt
    (41) flow_stmt -> . break_stmt
    (28) expr_stmt -> . testlist ASSIGN testlist
    (29) expr_stmt -> . atom list_index ASSIGN testlist
    (30) expr_stmt -> . testlist COLON type ASSIGN testlist
    (31) expr_stmt -> . testlist ASSIGN list_def
    (32) expr_stmt -> . testlist COLON type ASSIGN list_def
    (33) expr_stmt -> . testlist
    (42) return_stmt -> . RETURN testlist
    (43) return_stmt -> . RETURN
    (44) continue_stmt -> . CONTINUE
    (45) break_stmt -> . BREAK
    (114) testlist -> . testlist_multi COMMA
    (115) testlist -> . testlist_multi
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (116) testlist_multi -> . testlist_multi COMMA test
    (117) testlist_multi -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    NEWLINE         shift and go to state 131
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40

    suite                          shift and go to state 186
    simple_stmt                    shift and go to state 130
    small_stmts                    shift and go to state 7
    small_stmt                     shift and go to state 13
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    atom                           shift and go to state 27
    testlist_multi                 shift and go to state 31
    test                           shift and go to state 18
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 169

    (56) range -> atom trailer .

    COLON           reduce using rule 56 (range -> atom trailer .)


state 170

    (57) range -> atom list_index .
    (113) list_index -> list_index . LBRA test RBRA

    COLON           reduce using rule 57 (range -> atom list_index .)
    LBRA            shift and go to state 106


state 171

    (61) struct_body -> NEWLINE INDENT . struct_fields DEDENT
    (62) struct_fields -> . struct_field struct_fields
    (63) struct_fields -> . struct_field
    (64) struct_field -> . NAME COLON type NEWLINE
    (65) struct_field -> . NAME NEWLINE

    NAME            shift and go to state 189

    struct_fields                  shift and go to state 187
    struct_field                   shift and go to state 188

state 172

    (34) list_def -> LBRA list_elem RBRA .

    NEWLINE         reduce using rule 34 (list_def -> LBRA list_elem RBRA .)
    SEMICOLON       reduce using rule 34 (list_def -> LBRA list_elem RBRA .)
    COLON           reduce using rule 34 (list_def -> LBRA list_elem RBRA .)
    RBRA            reduce using rule 34 (list_def -> LBRA list_elem RBRA .)
    COMMA           reduce using rule 34 (list_def -> LBRA list_elem RBRA .)


state 173

    (35) list_elem -> list_elem COMMA . test
    (36) list_elem -> list_elem COMMA . list_def
    (118) test -> . comparison
    (34) list_def -> . LBRA list_elem RBRA
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    LBRA            shift and go to state 97
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    test                           shift and go to state 190
    list_def                       shift and go to state 191
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    atom                           shift and go to state 51
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 174

    (30) expr_stmt -> testlist COLON type ASSIGN testlist .

    NEWLINE         reduce using rule 30 (expr_stmt -> testlist COLON type ASSIGN testlist .)
    SEMICOLON       reduce using rule 30 (expr_stmt -> testlist COLON type ASSIGN testlist .)


state 175

    (32) expr_stmt -> testlist COLON type ASSIGN list_def .

    NEWLINE         reduce using rule 32 (expr_stmt -> testlist COLON type ASSIGN list_def .)
    SEMICOLON       reduce using rule 32 (expr_stmt -> testlist COLON type ASSIGN list_def .)


state 176

    (113) list_index -> list_index LBRA test RBRA .

    ASSIGN          reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    LBRA            reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    PLUS            reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    MINUS           reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    MULT            reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    DIV             reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    MOD             reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    POTENCIA        reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    NEQ             reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    EQ              reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    LT              reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    GT              reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    LEQ             reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    GEQ             reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    AND             reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    OR              reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    COMMA           reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    COLON           reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    NEWLINE         reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    SEMICOLON       reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    RPAR            reduce using rule 113 (list_index -> list_index LBRA test RBRA .)
    RBRA            reduce using rule 113 (list_index -> list_index LBRA test RBRA .)


state 177

    (119) arglist -> arglist COMMA argument .

    RPAR            reduce using rule 119 (arglist -> arglist COMMA argument .)
    COMMA           reduce using rule 119 (arglist -> arglist COMMA argument .)


state 178

    (108) method -> LPAR atom RPAR DOT NAME . trailer
    (110) trailer -> . LPAR arglist RPAR
    (111) trailer -> . LPAR RPAR

    LPAR            shift and go to state 63

    trailer                        shift and go to state 192

state 179

    (69) if_stmt -> IF par_test COLON suite ELSE COLON . suite
    (74) suite -> . simple_stmt
    (75) suite -> . NEWLINE INDENT stmts DEDENT
    (22) simple_stmt -> . small_stmts NEWLINE
    (23) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (24) small_stmts -> . small_stmts SEMICOLON small_stmt
    (25) small_stmts -> . small_stmt
    (26) small_stmt -> . flow_stmt
    (27) small_stmt -> . expr_stmt
    (39) flow_stmt -> . return_stmt
    (40) flow_stmt -> . continue_stmt
    (41) flow_stmt -> . break_stmt
    (28) expr_stmt -> . testlist ASSIGN testlist
    (29) expr_stmt -> . atom list_index ASSIGN testlist
    (30) expr_stmt -> . testlist COLON type ASSIGN testlist
    (31) expr_stmt -> . testlist ASSIGN list_def
    (32) expr_stmt -> . testlist COLON type ASSIGN list_def
    (33) expr_stmt -> . testlist
    (42) return_stmt -> . RETURN testlist
    (43) return_stmt -> . RETURN
    (44) continue_stmt -> . CONTINUE
    (45) break_stmt -> . BREAK
    (114) testlist -> . testlist_multi COMMA
    (115) testlist -> . testlist_multi
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (116) testlist_multi -> . testlist_multi COMMA test
    (117) testlist_multi -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    NEWLINE         shift and go to state 131
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40

    suite                          shift and go to state 193
    simple_stmt                    shift and go to state 130
    small_stmts                    shift and go to state 7
    small_stmt                     shift and go to state 13
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    atom                           shift and go to state 27
    testlist_multi                 shift and go to state 31
    test                           shift and go to state 18
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 180

    (71) else_if_list -> ELIF par_test . COLON suite
    (72) else_if_list -> ELIF par_test . COLON suite ELSE COLON suite
    (73) else_if_list -> ELIF par_test . COLON suite else_if_list

    COLON           shift and go to state 194


state 181

    (75) suite -> NEWLINE INDENT stmts . DEDENT
    (76) stmts -> stmts . stmt
    (20) stmt -> . simple_stmt
    (21) stmt -> . compound_stmt
    (22) simple_stmt -> . small_stmts NEWLINE
    (23) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (46) compound_stmt -> . if_stmt
    (47) compound_stmt -> . funcdef
    (48) compound_stmt -> . while_loop
    (49) compound_stmt -> . for_loop
    (50) compound_stmt -> . struct_def
    (24) small_stmts -> . small_stmts SEMICOLON small_stmt
    (25) small_stmts -> . small_stmt
    (68) if_stmt -> . IF par_test COLON suite
    (69) if_stmt -> . IF par_test COLON suite ELSE COLON suite
    (70) if_stmt -> . IF par_test COLON suite else_if_list
    (6) funcdef -> . DEF NAME parameters COLON suite
    (7) funcdef -> . DEF NAME parameters RETYPE type COLON suite
    (51) while_loop -> . WHILE test COLON suite
    (52) for_loop -> . FOR NAME IN range COLON suite
    (60) struct_def -> . STRUCT NAME COLON struct_body
    (26) small_stmt -> . flow_stmt
    (27) small_stmt -> . expr_stmt
    (39) flow_stmt -> . return_stmt
    (40) flow_stmt -> . continue_stmt
    (41) flow_stmt -> . break_stmt
    (28) expr_stmt -> . testlist ASSIGN testlist
    (29) expr_stmt -> . atom list_index ASSIGN testlist
    (30) expr_stmt -> . testlist COLON type ASSIGN testlist
    (31) expr_stmt -> . testlist ASSIGN list_def
    (32) expr_stmt -> . testlist COLON type ASSIGN list_def
    (33) expr_stmt -> . testlist
    (42) return_stmt -> . RETURN testlist
    (43) return_stmt -> . RETURN
    (44) continue_stmt -> . CONTINUE
    (45) break_stmt -> . BREAK
    (114) testlist -> . testlist_multi COMMA
    (115) testlist -> . testlist_multi
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (116) testlist_multi -> . testlist_multi COMMA test
    (117) testlist_multi -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    DEDENT          shift and go to state 195
    IF              shift and go to state 14
    DEF             shift and go to state 15
    WHILE           shift and go to state 17
    FOR             shift and go to state 19
    STRUCT          shift and go to state 20
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40

    stmt                           shift and go to state 196
    simple_stmt                    shift and go to state 5
    compound_stmt                  shift and go to state 6
    small_stmts                    shift and go to state 7
    if_stmt                        shift and go to state 8
    funcdef                        shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    struct_def                     shift and go to state 12
    small_stmt                     shift and go to state 13
    test                           shift and go to state 18
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    atom                           shift and go to state 27
    testlist_multi                 shift and go to state 31
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 182

    (77) stmts -> stmt .

    DEDENT          reduce using rule 77 (stmts -> stmt .)
    IF              reduce using rule 77 (stmts -> stmt .)
    DEF             reduce using rule 77 (stmts -> stmt .)
    WHILE           reduce using rule 77 (stmts -> stmt .)
    FOR             reduce using rule 77 (stmts -> stmt .)
    STRUCT          reduce using rule 77 (stmts -> stmt .)
    RETURN          reduce using rule 77 (stmts -> stmt .)
    CONTINUE        reduce using rule 77 (stmts -> stmt .)
    BREAK           reduce using rule 77 (stmts -> stmt .)
    NAME            reduce using rule 77 (stmts -> stmt .)
    NUMBER          reduce using rule 77 (stmts -> stmt .)
    FLOAT           reduce using rule 77 (stmts -> stmt .)
    STRING          reduce using rule 77 (stmts -> stmt .)
    TRUE            reduce using rule 77 (stmts -> stmt .)
    FALSE           reduce using rule 77 (stmts -> stmt .)
    MINUS           reduce using rule 77 (stmts -> stmt .)
    NOT             reduce using rule 77 (stmts -> stmt .)
    LPAR            reduce using rule 77 (stmts -> stmt .)


state 183

    (7) funcdef -> DEF NAME parameters RETYPE type COLON . suite
    (74) suite -> . simple_stmt
    (75) suite -> . NEWLINE INDENT stmts DEDENT
    (22) simple_stmt -> . small_stmts NEWLINE
    (23) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (24) small_stmts -> . small_stmts SEMICOLON small_stmt
    (25) small_stmts -> . small_stmt
    (26) small_stmt -> . flow_stmt
    (27) small_stmt -> . expr_stmt
    (39) flow_stmt -> . return_stmt
    (40) flow_stmt -> . continue_stmt
    (41) flow_stmt -> . break_stmt
    (28) expr_stmt -> . testlist ASSIGN testlist
    (29) expr_stmt -> . atom list_index ASSIGN testlist
    (30) expr_stmt -> . testlist COLON type ASSIGN testlist
    (31) expr_stmt -> . testlist ASSIGN list_def
    (32) expr_stmt -> . testlist COLON type ASSIGN list_def
    (33) expr_stmt -> . testlist
    (42) return_stmt -> . RETURN testlist
    (43) return_stmt -> . RETURN
    (44) continue_stmt -> . CONTINUE
    (45) break_stmt -> . BREAK
    (114) testlist -> . testlist_multi COMMA
    (115) testlist -> . testlist_multi
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (116) testlist_multi -> . testlist_multi COMMA test
    (117) testlist_multi -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    NEWLINE         shift and go to state 131
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40

    suite                          shift and go to state 197
    simple_stmt                    shift and go to state 130
    small_stmts                    shift and go to state 7
    small_stmt                     shift and go to state 13
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    atom                           shift and go to state 27
    testlist_multi                 shift and go to state 31
    test                           shift and go to state 18
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 184

    (10) varargslist -> varargslist COMMA NAME . COLON type
    (11) varargslist -> varargslist COMMA NAME .

    COLON           shift and go to state 198
    RPAR            reduce using rule 11 (varargslist -> varargslist COMMA NAME .)
    COMMA           reduce using rule 11 (varargslist -> varargslist COMMA NAME .)


state 185

    (12) varargslist -> NAME COLON type .

    RPAR            reduce using rule 12 (varargslist -> NAME COLON type .)
    COMMA           reduce using rule 12 (varargslist -> NAME COLON type .)


state 186

    (52) for_loop -> FOR NAME IN range COLON suite .

    ENDMARKER       reduce using rule 52 (for_loop -> FOR NAME IN range COLON suite .)
    NEWLINE         reduce using rule 52 (for_loop -> FOR NAME IN range COLON suite .)
    IF              reduce using rule 52 (for_loop -> FOR NAME IN range COLON suite .)
    DEF             reduce using rule 52 (for_loop -> FOR NAME IN range COLON suite .)
    WHILE           reduce using rule 52 (for_loop -> FOR NAME IN range COLON suite .)
    FOR             reduce using rule 52 (for_loop -> FOR NAME IN range COLON suite .)
    STRUCT          reduce using rule 52 (for_loop -> FOR NAME IN range COLON suite .)
    RETURN          reduce using rule 52 (for_loop -> FOR NAME IN range COLON suite .)
    CONTINUE        reduce using rule 52 (for_loop -> FOR NAME IN range COLON suite .)
    BREAK           reduce using rule 52 (for_loop -> FOR NAME IN range COLON suite .)
    NAME            reduce using rule 52 (for_loop -> FOR NAME IN range COLON suite .)
    NUMBER          reduce using rule 52 (for_loop -> FOR NAME IN range COLON suite .)
    FLOAT           reduce using rule 52 (for_loop -> FOR NAME IN range COLON suite .)
    STRING          reduce using rule 52 (for_loop -> FOR NAME IN range COLON suite .)
    TRUE            reduce using rule 52 (for_loop -> FOR NAME IN range COLON suite .)
    FALSE           reduce using rule 52 (for_loop -> FOR NAME IN range COLON suite .)
    MINUS           reduce using rule 52 (for_loop -> FOR NAME IN range COLON suite .)
    NOT             reduce using rule 52 (for_loop -> FOR NAME IN range COLON suite .)
    LPAR            reduce using rule 52 (for_loop -> FOR NAME IN range COLON suite .)
    DEDENT          reduce using rule 52 (for_loop -> FOR NAME IN range COLON suite .)


state 187

    (61) struct_body -> NEWLINE INDENT struct_fields . DEDENT

    DEDENT          shift and go to state 199


state 188

    (62) struct_fields -> struct_field . struct_fields
    (63) struct_fields -> struct_field .
    (62) struct_fields -> . struct_field struct_fields
    (63) struct_fields -> . struct_field
    (64) struct_field -> . NAME COLON type NEWLINE
    (65) struct_field -> . NAME NEWLINE

    DEDENT          reduce using rule 63 (struct_fields -> struct_field .)
    NAME            shift and go to state 189

    struct_field                   shift and go to state 188
    struct_fields                  shift and go to state 200

state 189

    (64) struct_field -> NAME . COLON type NEWLINE
    (65) struct_field -> NAME . NEWLINE

    COLON           shift and go to state 201
    NEWLINE         shift and go to state 202


state 190

    (35) list_elem -> list_elem COMMA test .

    RBRA            reduce using rule 35 (list_elem -> list_elem COMMA test .)
    COMMA           reduce using rule 35 (list_elem -> list_elem COMMA test .)


state 191

    (36) list_elem -> list_elem COMMA list_def .

    RBRA            reduce using rule 36 (list_elem -> list_elem COMMA list_def .)
    COMMA           reduce using rule 36 (list_elem -> list_elem COMMA list_def .)


state 192

    (108) method -> LPAR atom RPAR DOT NAME trailer .

    PLUS            reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)
    MINUS           reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)
    MULT            reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)
    DIV             reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)
    MOD             reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)
    POTENCIA        reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)
    NEQ             reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)
    EQ              reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)
    LT              reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)
    GT              reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)
    LEQ             reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)
    GEQ             reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)
    AND             reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)
    OR              reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)
    COMMA           reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)
    ASSIGN          reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)
    COLON           reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)
    NEWLINE         reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)
    SEMICOLON       reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)
    RPAR            reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)
    RBRA            reduce using rule 108 (method -> LPAR atom RPAR DOT NAME trailer .)


state 193

    (69) if_stmt -> IF par_test COLON suite ELSE COLON suite .

    ENDMARKER       reduce using rule 69 (if_stmt -> IF par_test COLON suite ELSE COLON suite .)
    NEWLINE         reduce using rule 69 (if_stmt -> IF par_test COLON suite ELSE COLON suite .)
    IF              reduce using rule 69 (if_stmt -> IF par_test COLON suite ELSE COLON suite .)
    DEF             reduce using rule 69 (if_stmt -> IF par_test COLON suite ELSE COLON suite .)
    WHILE           reduce using rule 69 (if_stmt -> IF par_test COLON suite ELSE COLON suite .)
    FOR             reduce using rule 69 (if_stmt -> IF par_test COLON suite ELSE COLON suite .)
    STRUCT          reduce using rule 69 (if_stmt -> IF par_test COLON suite ELSE COLON suite .)
    RETURN          reduce using rule 69 (if_stmt -> IF par_test COLON suite ELSE COLON suite .)
    CONTINUE        reduce using rule 69 (if_stmt -> IF par_test COLON suite ELSE COLON suite .)
    BREAK           reduce using rule 69 (if_stmt -> IF par_test COLON suite ELSE COLON suite .)
    NAME            reduce using rule 69 (if_stmt -> IF par_test COLON suite ELSE COLON suite .)
    NUMBER          reduce using rule 69 (if_stmt -> IF par_test COLON suite ELSE COLON suite .)
    FLOAT           reduce using rule 69 (if_stmt -> IF par_test COLON suite ELSE COLON suite .)
    STRING          reduce using rule 69 (if_stmt -> IF par_test COLON suite ELSE COLON suite .)
    TRUE            reduce using rule 69 (if_stmt -> IF par_test COLON suite ELSE COLON suite .)
    FALSE           reduce using rule 69 (if_stmt -> IF par_test COLON suite ELSE COLON suite .)
    MINUS           reduce using rule 69 (if_stmt -> IF par_test COLON suite ELSE COLON suite .)
    NOT             reduce using rule 69 (if_stmt -> IF par_test COLON suite ELSE COLON suite .)
    LPAR            reduce using rule 69 (if_stmt -> IF par_test COLON suite ELSE COLON suite .)
    DEDENT          reduce using rule 69 (if_stmt -> IF par_test COLON suite ELSE COLON suite .)


state 194

    (71) else_if_list -> ELIF par_test COLON . suite
    (72) else_if_list -> ELIF par_test COLON . suite ELSE COLON suite
    (73) else_if_list -> ELIF par_test COLON . suite else_if_list
    (74) suite -> . simple_stmt
    (75) suite -> . NEWLINE INDENT stmts DEDENT
    (22) simple_stmt -> . small_stmts NEWLINE
    (23) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (24) small_stmts -> . small_stmts SEMICOLON small_stmt
    (25) small_stmts -> . small_stmt
    (26) small_stmt -> . flow_stmt
    (27) small_stmt -> . expr_stmt
    (39) flow_stmt -> . return_stmt
    (40) flow_stmt -> . continue_stmt
    (41) flow_stmt -> . break_stmt
    (28) expr_stmt -> . testlist ASSIGN testlist
    (29) expr_stmt -> . atom list_index ASSIGN testlist
    (30) expr_stmt -> . testlist COLON type ASSIGN testlist
    (31) expr_stmt -> . testlist ASSIGN list_def
    (32) expr_stmt -> . testlist COLON type ASSIGN list_def
    (33) expr_stmt -> . testlist
    (42) return_stmt -> . RETURN testlist
    (43) return_stmt -> . RETURN
    (44) continue_stmt -> . CONTINUE
    (45) break_stmt -> . BREAK
    (114) testlist -> . testlist_multi COMMA
    (115) testlist -> . testlist_multi
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (116) testlist_multi -> . testlist_multi COMMA test
    (117) testlist_multi -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    NEWLINE         shift and go to state 131
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40

    suite                          shift and go to state 203
    simple_stmt                    shift and go to state 130
    small_stmts                    shift and go to state 7
    small_stmt                     shift and go to state 13
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    atom                           shift and go to state 27
    testlist_multi                 shift and go to state 31
    test                           shift and go to state 18
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 195

    (75) suite -> NEWLINE INDENT stmts DEDENT .

    ELSE            reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    ELIF            reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    ENDMARKER       reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    NEWLINE         reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    IF              reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    DEF             reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    WHILE           reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    FOR             reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    STRUCT          reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    RETURN          reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    CONTINUE        reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    BREAK           reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    NAME            reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    NUMBER          reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    FLOAT           reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    STRING          reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    TRUE            reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    FALSE           reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    MINUS           reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    NOT             reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    LPAR            reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)
    DEDENT          reduce using rule 75 (suite -> NEWLINE INDENT stmts DEDENT .)


state 196

    (76) stmts -> stmts stmt .

    DEDENT          reduce using rule 76 (stmts -> stmts stmt .)
    IF              reduce using rule 76 (stmts -> stmts stmt .)
    DEF             reduce using rule 76 (stmts -> stmts stmt .)
    WHILE           reduce using rule 76 (stmts -> stmts stmt .)
    FOR             reduce using rule 76 (stmts -> stmts stmt .)
    STRUCT          reduce using rule 76 (stmts -> stmts stmt .)
    RETURN          reduce using rule 76 (stmts -> stmts stmt .)
    CONTINUE        reduce using rule 76 (stmts -> stmts stmt .)
    BREAK           reduce using rule 76 (stmts -> stmts stmt .)
    NAME            reduce using rule 76 (stmts -> stmts stmt .)
    NUMBER          reduce using rule 76 (stmts -> stmts stmt .)
    FLOAT           reduce using rule 76 (stmts -> stmts stmt .)
    STRING          reduce using rule 76 (stmts -> stmts stmt .)
    TRUE            reduce using rule 76 (stmts -> stmts stmt .)
    FALSE           reduce using rule 76 (stmts -> stmts stmt .)
    MINUS           reduce using rule 76 (stmts -> stmts stmt .)
    NOT             reduce using rule 76 (stmts -> stmts stmt .)
    LPAR            reduce using rule 76 (stmts -> stmts stmt .)


state 197

    (7) funcdef -> DEF NAME parameters RETYPE type COLON suite .

    ENDMARKER       reduce using rule 7 (funcdef -> DEF NAME parameters RETYPE type COLON suite .)
    NEWLINE         reduce using rule 7 (funcdef -> DEF NAME parameters RETYPE type COLON suite .)
    IF              reduce using rule 7 (funcdef -> DEF NAME parameters RETYPE type COLON suite .)
    DEF             reduce using rule 7 (funcdef -> DEF NAME parameters RETYPE type COLON suite .)
    WHILE           reduce using rule 7 (funcdef -> DEF NAME parameters RETYPE type COLON suite .)
    FOR             reduce using rule 7 (funcdef -> DEF NAME parameters RETYPE type COLON suite .)
    STRUCT          reduce using rule 7 (funcdef -> DEF NAME parameters RETYPE type COLON suite .)
    RETURN          reduce using rule 7 (funcdef -> DEF NAME parameters RETYPE type COLON suite .)
    CONTINUE        reduce using rule 7 (funcdef -> DEF NAME parameters RETYPE type COLON suite .)
    BREAK           reduce using rule 7 (funcdef -> DEF NAME parameters RETYPE type COLON suite .)
    NAME            reduce using rule 7 (funcdef -> DEF NAME parameters RETYPE type COLON suite .)
    NUMBER          reduce using rule 7 (funcdef -> DEF NAME parameters RETYPE type COLON suite .)
    FLOAT           reduce using rule 7 (funcdef -> DEF NAME parameters RETYPE type COLON suite .)
    STRING          reduce using rule 7 (funcdef -> DEF NAME parameters RETYPE type COLON suite .)
    TRUE            reduce using rule 7 (funcdef -> DEF NAME parameters RETYPE type COLON suite .)
    FALSE           reduce using rule 7 (funcdef -> DEF NAME parameters RETYPE type COLON suite .)
    MINUS           reduce using rule 7 (funcdef -> DEF NAME parameters RETYPE type COLON suite .)
    NOT             reduce using rule 7 (funcdef -> DEF NAME parameters RETYPE type COLON suite .)
    LPAR            reduce using rule 7 (funcdef -> DEF NAME parameters RETYPE type COLON suite .)
    DEDENT          reduce using rule 7 (funcdef -> DEF NAME parameters RETYPE type COLON suite .)


state 198

    (10) varargslist -> varargslist COMMA NAME COLON . type
    (14) type -> . STR
    (15) type -> . INT
    (16) type -> . FLOAT
    (17) type -> . BOOL
    (18) type -> . LIST
    (19) type -> . NAME

    STR             shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    BOOL            shift and go to state 102
    LIST            shift and go to state 103
    NAME            shift and go to state 104

    type                           shift and go to state 204

state 199

    (61) struct_body -> NEWLINE INDENT struct_fields DEDENT .

    ENDMARKER       reduce using rule 61 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    NEWLINE         reduce using rule 61 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    IF              reduce using rule 61 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    DEF             reduce using rule 61 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    WHILE           reduce using rule 61 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    FOR             reduce using rule 61 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    STRUCT          reduce using rule 61 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    RETURN          reduce using rule 61 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    CONTINUE        reduce using rule 61 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    BREAK           reduce using rule 61 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    NAME            reduce using rule 61 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    NUMBER          reduce using rule 61 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    FLOAT           reduce using rule 61 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    STRING          reduce using rule 61 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    TRUE            reduce using rule 61 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    FALSE           reduce using rule 61 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    MINUS           reduce using rule 61 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    NOT             reduce using rule 61 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    LPAR            reduce using rule 61 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    DEDENT          reduce using rule 61 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)


state 200

    (62) struct_fields -> struct_field struct_fields .

    DEDENT          reduce using rule 62 (struct_fields -> struct_field struct_fields .)


state 201

    (64) struct_field -> NAME COLON . type NEWLINE
    (14) type -> . STR
    (15) type -> . INT
    (16) type -> . FLOAT
    (17) type -> . BOOL
    (18) type -> . LIST
    (19) type -> . NAME

    STR             shift and go to state 99
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    BOOL            shift and go to state 102
    LIST            shift and go to state 103
    NAME            shift and go to state 104

    type                           shift and go to state 205

state 202

    (65) struct_field -> NAME NEWLINE .

    NAME            reduce using rule 65 (struct_field -> NAME NEWLINE .)
    DEDENT          reduce using rule 65 (struct_field -> NAME NEWLINE .)


state 203

    (71) else_if_list -> ELIF par_test COLON suite .
    (72) else_if_list -> ELIF par_test COLON suite . ELSE COLON suite
    (73) else_if_list -> ELIF par_test COLON suite . else_if_list
    (71) else_if_list -> . ELIF par_test COLON suite
    (72) else_if_list -> . ELIF par_test COLON suite ELSE COLON suite
    (73) else_if_list -> . ELIF par_test COLON suite else_if_list

    ENDMARKER       reduce using rule 71 (else_if_list -> ELIF par_test COLON suite .)
    NEWLINE         reduce using rule 71 (else_if_list -> ELIF par_test COLON suite .)
    IF              reduce using rule 71 (else_if_list -> ELIF par_test COLON suite .)
    DEF             reduce using rule 71 (else_if_list -> ELIF par_test COLON suite .)
    WHILE           reduce using rule 71 (else_if_list -> ELIF par_test COLON suite .)
    FOR             reduce using rule 71 (else_if_list -> ELIF par_test COLON suite .)
    STRUCT          reduce using rule 71 (else_if_list -> ELIF par_test COLON suite .)
    RETURN          reduce using rule 71 (else_if_list -> ELIF par_test COLON suite .)
    CONTINUE        reduce using rule 71 (else_if_list -> ELIF par_test COLON suite .)
    BREAK           reduce using rule 71 (else_if_list -> ELIF par_test COLON suite .)
    NAME            reduce using rule 71 (else_if_list -> ELIF par_test COLON suite .)
    NUMBER          reduce using rule 71 (else_if_list -> ELIF par_test COLON suite .)
    FLOAT           reduce using rule 71 (else_if_list -> ELIF par_test COLON suite .)
    STRING          reduce using rule 71 (else_if_list -> ELIF par_test COLON suite .)
    TRUE            reduce using rule 71 (else_if_list -> ELIF par_test COLON suite .)
    FALSE           reduce using rule 71 (else_if_list -> ELIF par_test COLON suite .)
    MINUS           reduce using rule 71 (else_if_list -> ELIF par_test COLON suite .)
    NOT             reduce using rule 71 (else_if_list -> ELIF par_test COLON suite .)
    LPAR            reduce using rule 71 (else_if_list -> ELIF par_test COLON suite .)
    DEDENT          reduce using rule 71 (else_if_list -> ELIF par_test COLON suite .)
    ELSE            shift and go to state 206
    ELIF            shift and go to state 161

    else_if_list                   shift and go to state 207

state 204

    (10) varargslist -> varargslist COMMA NAME COLON type .

    RPAR            reduce using rule 10 (varargslist -> varargslist COMMA NAME COLON type .)
    COMMA           reduce using rule 10 (varargslist -> varargslist COMMA NAME COLON type .)


state 205

    (64) struct_field -> NAME COLON type . NEWLINE

    NEWLINE         shift and go to state 208


state 206

    (72) else_if_list -> ELIF par_test COLON suite ELSE . COLON suite

    COLON           shift and go to state 209


state 207

    (73) else_if_list -> ELIF par_test COLON suite else_if_list .

    ENDMARKER       reduce using rule 73 (else_if_list -> ELIF par_test COLON suite else_if_list .)
    NEWLINE         reduce using rule 73 (else_if_list -> ELIF par_test COLON suite else_if_list .)
    IF              reduce using rule 73 (else_if_list -> ELIF par_test COLON suite else_if_list .)
    DEF             reduce using rule 73 (else_if_list -> ELIF par_test COLON suite else_if_list .)
    WHILE           reduce using rule 73 (else_if_list -> ELIF par_test COLON suite else_if_list .)
    FOR             reduce using rule 73 (else_if_list -> ELIF par_test COLON suite else_if_list .)
    STRUCT          reduce using rule 73 (else_if_list -> ELIF par_test COLON suite else_if_list .)
    RETURN          reduce using rule 73 (else_if_list -> ELIF par_test COLON suite else_if_list .)
    CONTINUE        reduce using rule 73 (else_if_list -> ELIF par_test COLON suite else_if_list .)
    BREAK           reduce using rule 73 (else_if_list -> ELIF par_test COLON suite else_if_list .)
    NAME            reduce using rule 73 (else_if_list -> ELIF par_test COLON suite else_if_list .)
    NUMBER          reduce using rule 73 (else_if_list -> ELIF par_test COLON suite else_if_list .)
    FLOAT           reduce using rule 73 (else_if_list -> ELIF par_test COLON suite else_if_list .)
    STRING          reduce using rule 73 (else_if_list -> ELIF par_test COLON suite else_if_list .)
    TRUE            reduce using rule 73 (else_if_list -> ELIF par_test COLON suite else_if_list .)
    FALSE           reduce using rule 73 (else_if_list -> ELIF par_test COLON suite else_if_list .)
    MINUS           reduce using rule 73 (else_if_list -> ELIF par_test COLON suite else_if_list .)
    NOT             reduce using rule 73 (else_if_list -> ELIF par_test COLON suite else_if_list .)
    LPAR            reduce using rule 73 (else_if_list -> ELIF par_test COLON suite else_if_list .)
    DEDENT          reduce using rule 73 (else_if_list -> ELIF par_test COLON suite else_if_list .)


state 208

    (64) struct_field -> NAME COLON type NEWLINE .

    NAME            reduce using rule 64 (struct_field -> NAME COLON type NEWLINE .)
    DEDENT          reduce using rule 64 (struct_field -> NAME COLON type NEWLINE .)


state 209

    (72) else_if_list -> ELIF par_test COLON suite ELSE COLON . suite
    (74) suite -> . simple_stmt
    (75) suite -> . NEWLINE INDENT stmts DEDENT
    (22) simple_stmt -> . small_stmts NEWLINE
    (23) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (24) small_stmts -> . small_stmts SEMICOLON small_stmt
    (25) small_stmts -> . small_stmt
    (26) small_stmt -> . flow_stmt
    (27) small_stmt -> . expr_stmt
    (39) flow_stmt -> . return_stmt
    (40) flow_stmt -> . continue_stmt
    (41) flow_stmt -> . break_stmt
    (28) expr_stmt -> . testlist ASSIGN testlist
    (29) expr_stmt -> . atom list_index ASSIGN testlist
    (30) expr_stmt -> . testlist COLON type ASSIGN testlist
    (31) expr_stmt -> . testlist ASSIGN list_def
    (32) expr_stmt -> . testlist COLON type ASSIGN list_def
    (33) expr_stmt -> . testlist
    (42) return_stmt -> . RETURN testlist
    (43) return_stmt -> . RETURN
    (44) continue_stmt -> . CONTINUE
    (45) break_stmt -> . BREAK
    (114) testlist -> . testlist_multi COMMA
    (115) testlist -> . testlist_multi
    (101) atom -> . NAME
    (102) atom -> . NUMBER
    (103) atom -> . FLOAT
    (104) atom -> . STRING
    (105) atom -> . TRUE
    (106) atom -> . FALSE
    (116) testlist_multi -> . testlist_multi COMMA test
    (117) testlist_multi -> . test
    (118) test -> . comparison
    (78) comparison -> . comparison PLUS comparison
    (79) comparison -> . comparison MINUS comparison
    (80) comparison -> . comparison MULT comparison
    (81) comparison -> . comparison DIV comparison
    (82) comparison -> . comparison MOD comparison
    (83) comparison -> . comparison POTENCIA comparison
    (84) comparison -> . MINUS comparison
    (85) comparison -> . comparison NEQ comparison
    (86) comparison -> . comparison EQ comparison
    (87) comparison -> . comparison LT comparison
    (88) comparison -> . comparison GT comparison
    (89) comparison -> . comparison LEQ comparison
    (90) comparison -> . comparison GEQ comparison
    (91) comparison -> . comparison AND comparison
    (92) comparison -> . comparison OR comparison
    (93) comparison -> . NOT comparison
    (94) comparison -> . LPAR comparison RPAR
    (95) comparison -> . power
    (96) power -> . atom
    (97) power -> . atom trailer
    (98) power -> . atom list_index
    (99) power -> . method
    (100) power -> . attribute
    (107) method -> . NAME DOT NAME trailer
    (108) method -> . LPAR atom RPAR DOT NAME trailer
    (109) attribute -> . NAME DOT NAME

    NEWLINE         shift and go to state 131
    RETURN          shift and go to state 28
    CONTINUE        shift and go to state 29
    BREAK           shift and go to state 30
    NAME            shift and go to state 16
    NUMBER          shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36
    MINUS           shift and go to state 38
    NOT             shift and go to state 39
    LPAR            shift and go to state 40

    suite                          shift and go to state 210
    simple_stmt                    shift and go to state 130
    small_stmts                    shift and go to state 7
    small_stmt                     shift and go to state 13
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    atom                           shift and go to state 27
    testlist_multi                 shift and go to state 31
    test                           shift and go to state 18
    comparison                     shift and go to state 37
    power                          shift and go to state 41
    method                         shift and go to state 42
    attribute                      shift and go to state 43

state 210

    (72) else_if_list -> ELIF par_test COLON suite ELSE COLON suite .

    ENDMARKER       reduce using rule 72 (else_if_list -> ELIF par_test COLON suite ELSE COLON suite .)
    NEWLINE         reduce using rule 72 (else_if_list -> ELIF par_test COLON suite ELSE COLON suite .)
    IF              reduce using rule 72 (else_if_list -> ELIF par_test COLON suite ELSE COLON suite .)
    DEF             reduce using rule 72 (else_if_list -> ELIF par_test COLON suite ELSE COLON suite .)
    WHILE           reduce using rule 72 (else_if_list -> ELIF par_test COLON suite ELSE COLON suite .)
    FOR             reduce using rule 72 (else_if_list -> ELIF par_test COLON suite ELSE COLON suite .)
    STRUCT          reduce using rule 72 (else_if_list -> ELIF par_test COLON suite ELSE COLON suite .)
    RETURN          reduce using rule 72 (else_if_list -> ELIF par_test COLON suite ELSE COLON suite .)
    CONTINUE        reduce using rule 72 (else_if_list -> ELIF par_test COLON suite ELSE COLON suite .)
    BREAK           reduce using rule 72 (else_if_list -> ELIF par_test COLON suite ELSE COLON suite .)
    NAME            reduce using rule 72 (else_if_list -> ELIF par_test COLON suite ELSE COLON suite .)
    NUMBER          reduce using rule 72 (else_if_list -> ELIF par_test COLON suite ELSE COLON suite .)
    FLOAT           reduce using rule 72 (else_if_list -> ELIF par_test COLON suite ELSE COLON suite .)
    STRING          reduce using rule 72 (else_if_list -> ELIF par_test COLON suite ELSE COLON suite .)
    TRUE            reduce using rule 72 (else_if_list -> ELIF par_test COLON suite ELSE COLON suite .)
    FALSE           reduce using rule 72 (else_if_list -> ELIF par_test COLON suite ELSE COLON suite .)
    MINUS           reduce using rule 72 (else_if_list -> ELIF par_test COLON suite ELSE COLON suite .)
    NOT             reduce using rule 72 (else_if_list -> ELIF par_test COLON suite ELSE COLON suite .)
    LPAR            reduce using rule 72 (else_if_list -> ELIF par_test COLON suite ELSE COLON suite .)
    DEDENT          reduce using rule 72 (else_if_list -> ELIF par_test COLON suite ELSE COLON suite .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ASSIGN in state 60 resolved as shift
WARNING: shift/reduce conflict for RPAR in state 83 resolved as shift
WARNING: shift/reduce conflict for RPAR in state 87 resolved as shift
