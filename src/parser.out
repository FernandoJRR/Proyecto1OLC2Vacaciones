Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    WS

Grammar

Rule 0     S' -> file_input_end
Rule 1     file_input_end -> file_input ENDMARKER
Rule 2     file_input -> file_input NEWLINE
Rule 3     file_input -> file_input stmt
Rule 4     file_input -> NEWLINE
Rule 5     file_input -> stmt
Rule 6     funcdef -> DEF NAME parameters COLON suite
Rule 7     parameters -> LPAR RPAR
Rule 8     parameters -> LPAR varargslist RPAR
Rule 9     varargslist -> varargslist COMMA NAME COLON type
Rule 10    varargslist -> varargslist COMMA NAME
Rule 11    varargslist -> NAME COLON type
Rule 12    varargslist -> NAME
Rule 13    type -> STR
Rule 14    type -> INT
Rule 15    type -> FLOAT
Rule 16    type -> BOOL
Rule 17    type -> LIST
Rule 18    type -> NAME
Rule 19    stmt -> simple_stmt
Rule 20    stmt -> compound_stmt
Rule 21    simple_stmt -> small_stmts NEWLINE
Rule 22    simple_stmt -> small_stmts SEMICOLON NEWLINE
Rule 23    small_stmts -> small_stmts SEMICOLON small_stmt
Rule 24    small_stmts -> small_stmt
Rule 25    small_stmt -> flow_stmt
Rule 26    small_stmt -> expr_stmt
Rule 27    expr_stmt -> testlist ASSIGN testlist
Rule 28    expr_stmt -> testlist COLON type ASSIGN testlist
Rule 29    expr_stmt -> testlist ASSIGN list_def
Rule 30    expr_stmt -> testlist COLON type ASSIGN list_def
Rule 31    expr_stmt -> testlist
Rule 32    list_def -> LBRA list_elem RBRA
Rule 33    list_elem -> list_elem COMMA test
Rule 34    list_elem -> list_elem COMMA list_def
Rule 35    list_elem -> test
Rule 36    list_elem -> list_def
Rule 37    flow_stmt -> return_stmt
Rule 38    flow_stmt -> continue_stmt
Rule 39    flow_stmt -> break_stmt
Rule 40    return_stmt -> RETURN testlist
Rule 41    return_stmt -> RETURN
Rule 42    continue_stmt -> CONTINUE
Rule 43    break_stmt -> BREAK
Rule 44    compound_stmt -> if_stmt
Rule 45    compound_stmt -> funcdef
Rule 46    compound_stmt -> while_loop
Rule 47    compound_stmt -> for_loop
Rule 48    compound_stmt -> struct_def
Rule 49    while_loop -> WHILE test COLON suite
Rule 50    for_loop -> FOR NAME IN range COLON suite
Rule 51    range -> STRING
Rule 52    range -> list_def
Rule 53    range -> NAME
Rule 54    range -> atom trailer
Rule 55    struct_def -> STRUCT NAME COLON struct_body
Rule 56    struct_body -> NEWLINE INDENT struct_fields DEDENT
Rule 57    struct_fields -> struct_field struct_fields
Rule 58    struct_fields -> struct_field
Rule 59    struct_field -> NAME COLON type NEWLINE
Rule 60    struct_field -> NAME NEWLINE
Rule 61    if_stmt -> IF test COLON suite
Rule 62    if_stmt -> IF test COLON suite ELSE COLON suite
Rule 63    if_stmt -> IF test COLON suite else_if_list
Rule 64    else_if_list -> ELIF test COLON suite
Rule 65    else_if_list -> ELIF test COLON suite ELSE COLON suite
Rule 66    else_if_list -> ELIF test COLON suite else_if_list
Rule 67    suite -> simple_stmt
Rule 68    suite -> NEWLINE INDENT stmts DEDENT
Rule 69    stmts -> stmts stmt
Rule 70    stmts -> stmt
Rule 71    comparison -> comparison PLUS comparison
Rule 72    comparison -> comparison MINUS comparison
Rule 73    comparison -> comparison MULT comparison
Rule 74    comparison -> comparison DIV comparison
Rule 75    comparison -> comparison MOD comparison
Rule 76    comparison -> comparison POTENCIA comparison
Rule 77    comparison -> MINUS comparison
Rule 78    comparison -> comparison NEQ comparison
Rule 79    comparison -> comparison EQ comparison
Rule 80    comparison -> comparison LT comparison
Rule 81    comparison -> comparison GT comparison
Rule 82    comparison -> comparison LEQ comparison
Rule 83    comparison -> comparison GEQ comparison
Rule 84    comparison -> comparison AND comparison
Rule 85    comparison -> comparison OR comparison
Rule 86    comparison -> NOT comparison
Rule 87    comparison -> LPAR comparison RPAR
Rule 88    comparison -> power
Rule 89    power -> atom
Rule 90    power -> atom trailer
Rule 91    power -> atom list_index
Rule 92    atom -> NAME
Rule 93    atom -> NUMBER
Rule 94    atom -> FLOAT
Rule 95    atom -> STRING
Rule 96    trailer -> LPAR arglist RPAR
Rule 97    list_index -> LBRA test RBRA
Rule 98    list_index -> list_index LBRA test RBRA
Rule 99    testlist -> testlist_multi COMMA
Rule 100   testlist -> testlist_multi
Rule 101   testlist_multi -> testlist_multi COMMA test
Rule 102   testlist_multi -> test
Rule 103   test -> comparison
Rule 104   arglist -> arglist COMMA argument
Rule 105   arglist -> argument
Rule 106   argument -> test

Terminals, with rules where they appear

AND                  : 84
ASSIGN               : 27 28 29 30
BOOL                 : 16
BREAK                : 43
COLON                : 6 9 11 28 30 49 50 55 59 61 62 62 63 64 65 65 66
COMMA                : 9 10 33 34 99 101 104
CONTINUE             : 42
DEDENT               : 56 68
DEF                  : 6
DIV                  : 74
ELIF                 : 64 65 66
ELSE                 : 62 65
ENDMARKER            : 1
EQ                   : 79
FLOAT                : 15 94
FOR                  : 50
GEQ                  : 83
GT                   : 81
IF                   : 61 62 63
IN                   : 50
INDENT               : 56 68
INT                  : 14
LBRA                 : 32 97 98
LEQ                  : 82
LIST                 : 17
LPAR                 : 7 8 87 96
LT                   : 80
MINUS                : 72 77
MOD                  : 75
MULT                 : 73
NAME                 : 6 9 10 11 12 18 50 53 55 59 60 92
NEQ                  : 78
NEWLINE              : 2 4 21 22 56 59 60 68
NOT                  : 86
NUMBER               : 93
OR                   : 85
PLUS                 : 71
POTENCIA             : 76
RBRA                 : 32 97 98
RETURN               : 40 41
RPAR                 : 7 8 87 96
SEMICOLON            : 22 23
STR                  : 13
STRING               : 51 95
STRUCT               : 55
WHILE                : 49
WS                   : 
error                : 

Nonterminals, with rules where they appear

arglist              : 96 104
argument             : 104 105
atom                 : 54 89 90 91
break_stmt           : 39
comparison           : 71 71 72 72 73 73 74 74 75 75 76 76 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 87 103
compound_stmt        : 20
continue_stmt        : 38
else_if_list         : 63 66
expr_stmt            : 26
file_input           : 1 2 3
file_input_end       : 0
flow_stmt            : 25
for_loop             : 47
funcdef              : 45
if_stmt              : 44
list_def             : 29 30 34 36 52
list_elem            : 32 33 34
list_index           : 91 98
parameters           : 6
power                : 88
range                : 50
return_stmt          : 37
simple_stmt          : 19 67
small_stmt           : 23 24
small_stmts          : 21 22 23
stmt                 : 3 5 69 70
stmts                : 68 69
struct_body          : 55
struct_def           : 48
struct_field         : 57 58
struct_fields        : 56 57
suite                : 6 49 50 61 62 62 63 64 65 65 66
test                 : 33 35 49 61 62 63 64 65 66 97 98 101 102 106
testlist             : 27 27 28 28 29 30 31 40
testlist_multi       : 99 100 101
trailer              : 54 90
type                 : 9 11 28 30 59
varargslist          : 8 9 10
while_loop           : 46

Parsing method: LALR

state 0

    (0) S' -> . file_input_end
    (1) file_input_end -> . file_input ENDMARKER
    (2) file_input -> . file_input NEWLINE
    (3) file_input -> . file_input stmt
    (4) file_input -> . NEWLINE
    (5) file_input -> . stmt
    (19) stmt -> . simple_stmt
    (20) stmt -> . compound_stmt
    (21) simple_stmt -> . small_stmts NEWLINE
    (22) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (44) compound_stmt -> . if_stmt
    (45) compound_stmt -> . funcdef
    (46) compound_stmt -> . while_loop
    (47) compound_stmt -> . for_loop
    (48) compound_stmt -> . struct_def
    (23) small_stmts -> . small_stmts SEMICOLON small_stmt
    (24) small_stmts -> . small_stmt
    (61) if_stmt -> . IF test COLON suite
    (62) if_stmt -> . IF test COLON suite ELSE COLON suite
    (63) if_stmt -> . IF test COLON suite else_if_list
    (6) funcdef -> . DEF NAME parameters COLON suite
    (49) while_loop -> . WHILE test COLON suite
    (50) for_loop -> . FOR NAME IN range COLON suite
    (55) struct_def -> . STRUCT NAME COLON struct_body
    (25) small_stmt -> . flow_stmt
    (26) small_stmt -> . expr_stmt
    (37) flow_stmt -> . return_stmt
    (38) flow_stmt -> . continue_stmt
    (39) flow_stmt -> . break_stmt
    (27) expr_stmt -> . testlist ASSIGN testlist
    (28) expr_stmt -> . testlist COLON type ASSIGN testlist
    (29) expr_stmt -> . testlist ASSIGN list_def
    (30) expr_stmt -> . testlist COLON type ASSIGN list_def
    (31) expr_stmt -> . testlist
    (40) return_stmt -> . RETURN testlist
    (41) return_stmt -> . RETURN
    (42) continue_stmt -> . CONTINUE
    (43) break_stmt -> . BREAK
    (99) testlist -> . testlist_multi COMMA
    (100) testlist -> . testlist_multi
    (101) testlist_multi -> . testlist_multi COMMA test
    (102) testlist_multi -> . test
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    NEWLINE         shift and go to state 3
    IF              shift and go to state 14
    DEF             shift and go to state 16
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    STRUCT          shift and go to state 20
    RETURN          shift and go to state 27
    CONTINUE        shift and go to state 28
    BREAK           shift and go to state 29
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    file_input_end                 shift and go to state 1
    file_input                     shift and go to state 2
    stmt                           shift and go to state 4
    simple_stmt                    shift and go to state 5
    compound_stmt                  shift and go to state 6
    small_stmts                    shift and go to state 7
    if_stmt                        shift and go to state 8
    funcdef                        shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    struct_def                     shift and go to state 12
    small_stmt                     shift and go to state 13
    test                           shift and go to state 15
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    testlist_multi                 shift and go to state 30
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 1

    (0) S' -> file_input_end .



state 2

    (1) file_input_end -> file_input . ENDMARKER
    (2) file_input -> file_input . NEWLINE
    (3) file_input -> file_input . stmt
    (19) stmt -> . simple_stmt
    (20) stmt -> . compound_stmt
    (21) simple_stmt -> . small_stmts NEWLINE
    (22) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (44) compound_stmt -> . if_stmt
    (45) compound_stmt -> . funcdef
    (46) compound_stmt -> . while_loop
    (47) compound_stmt -> . for_loop
    (48) compound_stmt -> . struct_def
    (23) small_stmts -> . small_stmts SEMICOLON small_stmt
    (24) small_stmts -> . small_stmt
    (61) if_stmt -> . IF test COLON suite
    (62) if_stmt -> . IF test COLON suite ELSE COLON suite
    (63) if_stmt -> . IF test COLON suite else_if_list
    (6) funcdef -> . DEF NAME parameters COLON suite
    (49) while_loop -> . WHILE test COLON suite
    (50) for_loop -> . FOR NAME IN range COLON suite
    (55) struct_def -> . STRUCT NAME COLON struct_body
    (25) small_stmt -> . flow_stmt
    (26) small_stmt -> . expr_stmt
    (37) flow_stmt -> . return_stmt
    (38) flow_stmt -> . continue_stmt
    (39) flow_stmt -> . break_stmt
    (27) expr_stmt -> . testlist ASSIGN testlist
    (28) expr_stmt -> . testlist COLON type ASSIGN testlist
    (29) expr_stmt -> . testlist ASSIGN list_def
    (30) expr_stmt -> . testlist COLON type ASSIGN list_def
    (31) expr_stmt -> . testlist
    (40) return_stmt -> . RETURN testlist
    (41) return_stmt -> . RETURN
    (42) continue_stmt -> . CONTINUE
    (43) break_stmt -> . BREAK
    (99) testlist -> . testlist_multi COMMA
    (100) testlist -> . testlist_multi
    (101) testlist_multi -> . testlist_multi COMMA test
    (102) testlist_multi -> . test
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    ENDMARKER       shift and go to state 40
    NEWLINE         shift and go to state 41
    IF              shift and go to state 14
    DEF             shift and go to state 16
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    STRUCT          shift and go to state 20
    RETURN          shift and go to state 27
    CONTINUE        shift and go to state 28
    BREAK           shift and go to state 29
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    stmt                           shift and go to state 42
    simple_stmt                    shift and go to state 5
    compound_stmt                  shift and go to state 6
    small_stmts                    shift and go to state 7
    if_stmt                        shift and go to state 8
    funcdef                        shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    struct_def                     shift and go to state 12
    small_stmt                     shift and go to state 13
    test                           shift and go to state 15
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    testlist_multi                 shift and go to state 30
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 3

    (4) file_input -> NEWLINE .

    ENDMARKER       reduce using rule 4 (file_input -> NEWLINE .)
    NEWLINE         reduce using rule 4 (file_input -> NEWLINE .)
    IF              reduce using rule 4 (file_input -> NEWLINE .)
    DEF             reduce using rule 4 (file_input -> NEWLINE .)
    WHILE           reduce using rule 4 (file_input -> NEWLINE .)
    FOR             reduce using rule 4 (file_input -> NEWLINE .)
    STRUCT          reduce using rule 4 (file_input -> NEWLINE .)
    RETURN          reduce using rule 4 (file_input -> NEWLINE .)
    CONTINUE        reduce using rule 4 (file_input -> NEWLINE .)
    BREAK           reduce using rule 4 (file_input -> NEWLINE .)
    MINUS           reduce using rule 4 (file_input -> NEWLINE .)
    NOT             reduce using rule 4 (file_input -> NEWLINE .)
    LPAR            reduce using rule 4 (file_input -> NEWLINE .)
    NAME            reduce using rule 4 (file_input -> NEWLINE .)
    NUMBER          reduce using rule 4 (file_input -> NEWLINE .)
    FLOAT           reduce using rule 4 (file_input -> NEWLINE .)
    STRING          reduce using rule 4 (file_input -> NEWLINE .)


state 4

    (5) file_input -> stmt .

    ENDMARKER       reduce using rule 5 (file_input -> stmt .)
    NEWLINE         reduce using rule 5 (file_input -> stmt .)
    IF              reduce using rule 5 (file_input -> stmt .)
    DEF             reduce using rule 5 (file_input -> stmt .)
    WHILE           reduce using rule 5 (file_input -> stmt .)
    FOR             reduce using rule 5 (file_input -> stmt .)
    STRUCT          reduce using rule 5 (file_input -> stmt .)
    RETURN          reduce using rule 5 (file_input -> stmt .)
    CONTINUE        reduce using rule 5 (file_input -> stmt .)
    BREAK           reduce using rule 5 (file_input -> stmt .)
    MINUS           reduce using rule 5 (file_input -> stmt .)
    NOT             reduce using rule 5 (file_input -> stmt .)
    LPAR            reduce using rule 5 (file_input -> stmt .)
    NAME            reduce using rule 5 (file_input -> stmt .)
    NUMBER          reduce using rule 5 (file_input -> stmt .)
    FLOAT           reduce using rule 5 (file_input -> stmt .)
    STRING          reduce using rule 5 (file_input -> stmt .)


state 5

    (19) stmt -> simple_stmt .

    ENDMARKER       reduce using rule 19 (stmt -> simple_stmt .)
    NEWLINE         reduce using rule 19 (stmt -> simple_stmt .)
    IF              reduce using rule 19 (stmt -> simple_stmt .)
    DEF             reduce using rule 19 (stmt -> simple_stmt .)
    WHILE           reduce using rule 19 (stmt -> simple_stmt .)
    FOR             reduce using rule 19 (stmt -> simple_stmt .)
    STRUCT          reduce using rule 19 (stmt -> simple_stmt .)
    RETURN          reduce using rule 19 (stmt -> simple_stmt .)
    CONTINUE        reduce using rule 19 (stmt -> simple_stmt .)
    BREAK           reduce using rule 19 (stmt -> simple_stmt .)
    MINUS           reduce using rule 19 (stmt -> simple_stmt .)
    NOT             reduce using rule 19 (stmt -> simple_stmt .)
    LPAR            reduce using rule 19 (stmt -> simple_stmt .)
    NAME            reduce using rule 19 (stmt -> simple_stmt .)
    NUMBER          reduce using rule 19 (stmt -> simple_stmt .)
    FLOAT           reduce using rule 19 (stmt -> simple_stmt .)
    STRING          reduce using rule 19 (stmt -> simple_stmt .)
    DEDENT          reduce using rule 19 (stmt -> simple_stmt .)


state 6

    (20) stmt -> compound_stmt .

    ENDMARKER       reduce using rule 20 (stmt -> compound_stmt .)
    NEWLINE         reduce using rule 20 (stmt -> compound_stmt .)
    IF              reduce using rule 20 (stmt -> compound_stmt .)
    DEF             reduce using rule 20 (stmt -> compound_stmt .)
    WHILE           reduce using rule 20 (stmt -> compound_stmt .)
    FOR             reduce using rule 20 (stmt -> compound_stmt .)
    STRUCT          reduce using rule 20 (stmt -> compound_stmt .)
    RETURN          reduce using rule 20 (stmt -> compound_stmt .)
    CONTINUE        reduce using rule 20 (stmt -> compound_stmt .)
    BREAK           reduce using rule 20 (stmt -> compound_stmt .)
    MINUS           reduce using rule 20 (stmt -> compound_stmt .)
    NOT             reduce using rule 20 (stmt -> compound_stmt .)
    LPAR            reduce using rule 20 (stmt -> compound_stmt .)
    NAME            reduce using rule 20 (stmt -> compound_stmt .)
    NUMBER          reduce using rule 20 (stmt -> compound_stmt .)
    FLOAT           reduce using rule 20 (stmt -> compound_stmt .)
    STRING          reduce using rule 20 (stmt -> compound_stmt .)
    DEDENT          reduce using rule 20 (stmt -> compound_stmt .)


state 7

    (21) simple_stmt -> small_stmts . NEWLINE
    (22) simple_stmt -> small_stmts . SEMICOLON NEWLINE
    (23) small_stmts -> small_stmts . SEMICOLON small_stmt

    NEWLINE         shift and go to state 43
    SEMICOLON       shift and go to state 44


state 8

    (44) compound_stmt -> if_stmt .

    ENDMARKER       reduce using rule 44 (compound_stmt -> if_stmt .)
    NEWLINE         reduce using rule 44 (compound_stmt -> if_stmt .)
    IF              reduce using rule 44 (compound_stmt -> if_stmt .)
    DEF             reduce using rule 44 (compound_stmt -> if_stmt .)
    WHILE           reduce using rule 44 (compound_stmt -> if_stmt .)
    FOR             reduce using rule 44 (compound_stmt -> if_stmt .)
    STRUCT          reduce using rule 44 (compound_stmt -> if_stmt .)
    RETURN          reduce using rule 44 (compound_stmt -> if_stmt .)
    CONTINUE        reduce using rule 44 (compound_stmt -> if_stmt .)
    BREAK           reduce using rule 44 (compound_stmt -> if_stmt .)
    MINUS           reduce using rule 44 (compound_stmt -> if_stmt .)
    NOT             reduce using rule 44 (compound_stmt -> if_stmt .)
    LPAR            reduce using rule 44 (compound_stmt -> if_stmt .)
    NAME            reduce using rule 44 (compound_stmt -> if_stmt .)
    NUMBER          reduce using rule 44 (compound_stmt -> if_stmt .)
    FLOAT           reduce using rule 44 (compound_stmt -> if_stmt .)
    STRING          reduce using rule 44 (compound_stmt -> if_stmt .)
    DEDENT          reduce using rule 44 (compound_stmt -> if_stmt .)


state 9

    (45) compound_stmt -> funcdef .

    ENDMARKER       reduce using rule 45 (compound_stmt -> funcdef .)
    NEWLINE         reduce using rule 45 (compound_stmt -> funcdef .)
    IF              reduce using rule 45 (compound_stmt -> funcdef .)
    DEF             reduce using rule 45 (compound_stmt -> funcdef .)
    WHILE           reduce using rule 45 (compound_stmt -> funcdef .)
    FOR             reduce using rule 45 (compound_stmt -> funcdef .)
    STRUCT          reduce using rule 45 (compound_stmt -> funcdef .)
    RETURN          reduce using rule 45 (compound_stmt -> funcdef .)
    CONTINUE        reduce using rule 45 (compound_stmt -> funcdef .)
    BREAK           reduce using rule 45 (compound_stmt -> funcdef .)
    MINUS           reduce using rule 45 (compound_stmt -> funcdef .)
    NOT             reduce using rule 45 (compound_stmt -> funcdef .)
    LPAR            reduce using rule 45 (compound_stmt -> funcdef .)
    NAME            reduce using rule 45 (compound_stmt -> funcdef .)
    NUMBER          reduce using rule 45 (compound_stmt -> funcdef .)
    FLOAT           reduce using rule 45 (compound_stmt -> funcdef .)
    STRING          reduce using rule 45 (compound_stmt -> funcdef .)
    DEDENT          reduce using rule 45 (compound_stmt -> funcdef .)


state 10

    (46) compound_stmt -> while_loop .

    ENDMARKER       reduce using rule 46 (compound_stmt -> while_loop .)
    NEWLINE         reduce using rule 46 (compound_stmt -> while_loop .)
    IF              reduce using rule 46 (compound_stmt -> while_loop .)
    DEF             reduce using rule 46 (compound_stmt -> while_loop .)
    WHILE           reduce using rule 46 (compound_stmt -> while_loop .)
    FOR             reduce using rule 46 (compound_stmt -> while_loop .)
    STRUCT          reduce using rule 46 (compound_stmt -> while_loop .)
    RETURN          reduce using rule 46 (compound_stmt -> while_loop .)
    CONTINUE        reduce using rule 46 (compound_stmt -> while_loop .)
    BREAK           reduce using rule 46 (compound_stmt -> while_loop .)
    MINUS           reduce using rule 46 (compound_stmt -> while_loop .)
    NOT             reduce using rule 46 (compound_stmt -> while_loop .)
    LPAR            reduce using rule 46 (compound_stmt -> while_loop .)
    NAME            reduce using rule 46 (compound_stmt -> while_loop .)
    NUMBER          reduce using rule 46 (compound_stmt -> while_loop .)
    FLOAT           reduce using rule 46 (compound_stmt -> while_loop .)
    STRING          reduce using rule 46 (compound_stmt -> while_loop .)
    DEDENT          reduce using rule 46 (compound_stmt -> while_loop .)


state 11

    (47) compound_stmt -> for_loop .

    ENDMARKER       reduce using rule 47 (compound_stmt -> for_loop .)
    NEWLINE         reduce using rule 47 (compound_stmt -> for_loop .)
    IF              reduce using rule 47 (compound_stmt -> for_loop .)
    DEF             reduce using rule 47 (compound_stmt -> for_loop .)
    WHILE           reduce using rule 47 (compound_stmt -> for_loop .)
    FOR             reduce using rule 47 (compound_stmt -> for_loop .)
    STRUCT          reduce using rule 47 (compound_stmt -> for_loop .)
    RETURN          reduce using rule 47 (compound_stmt -> for_loop .)
    CONTINUE        reduce using rule 47 (compound_stmt -> for_loop .)
    BREAK           reduce using rule 47 (compound_stmt -> for_loop .)
    MINUS           reduce using rule 47 (compound_stmt -> for_loop .)
    NOT             reduce using rule 47 (compound_stmt -> for_loop .)
    LPAR            reduce using rule 47 (compound_stmt -> for_loop .)
    NAME            reduce using rule 47 (compound_stmt -> for_loop .)
    NUMBER          reduce using rule 47 (compound_stmt -> for_loop .)
    FLOAT           reduce using rule 47 (compound_stmt -> for_loop .)
    STRING          reduce using rule 47 (compound_stmt -> for_loop .)
    DEDENT          reduce using rule 47 (compound_stmt -> for_loop .)


state 12

    (48) compound_stmt -> struct_def .

    ENDMARKER       reduce using rule 48 (compound_stmt -> struct_def .)
    NEWLINE         reduce using rule 48 (compound_stmt -> struct_def .)
    IF              reduce using rule 48 (compound_stmt -> struct_def .)
    DEF             reduce using rule 48 (compound_stmt -> struct_def .)
    WHILE           reduce using rule 48 (compound_stmt -> struct_def .)
    FOR             reduce using rule 48 (compound_stmt -> struct_def .)
    STRUCT          reduce using rule 48 (compound_stmt -> struct_def .)
    RETURN          reduce using rule 48 (compound_stmt -> struct_def .)
    CONTINUE        reduce using rule 48 (compound_stmt -> struct_def .)
    BREAK           reduce using rule 48 (compound_stmt -> struct_def .)
    MINUS           reduce using rule 48 (compound_stmt -> struct_def .)
    NOT             reduce using rule 48 (compound_stmt -> struct_def .)
    LPAR            reduce using rule 48 (compound_stmt -> struct_def .)
    NAME            reduce using rule 48 (compound_stmt -> struct_def .)
    NUMBER          reduce using rule 48 (compound_stmt -> struct_def .)
    FLOAT           reduce using rule 48 (compound_stmt -> struct_def .)
    STRING          reduce using rule 48 (compound_stmt -> struct_def .)
    DEDENT          reduce using rule 48 (compound_stmt -> struct_def .)


state 13

    (24) small_stmts -> small_stmt .

    NEWLINE         reduce using rule 24 (small_stmts -> small_stmt .)
    SEMICOLON       reduce using rule 24 (small_stmts -> small_stmt .)


state 14

    (61) if_stmt -> IF . test COLON suite
    (62) if_stmt -> IF . test COLON suite ELSE COLON suite
    (63) if_stmt -> IF . test COLON suite else_if_list
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    test                           shift and go to state 45
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 15

    (102) testlist_multi -> test .

    COMMA           reduce using rule 102 (testlist_multi -> test .)
    ASSIGN          reduce using rule 102 (testlist_multi -> test .)
    COLON           reduce using rule 102 (testlist_multi -> test .)
    NEWLINE         reduce using rule 102 (testlist_multi -> test .)
    SEMICOLON       reduce using rule 102 (testlist_multi -> test .)


state 16

    (6) funcdef -> DEF . NAME parameters COLON suite

    NAME            shift and go to state 46


state 17

    (92) atom -> NAME .

    LPAR            reduce using rule 92 (atom -> NAME .)
    LBRA            reduce using rule 92 (atom -> NAME .)
    PLUS            reduce using rule 92 (atom -> NAME .)
    MINUS           reduce using rule 92 (atom -> NAME .)
    MULT            reduce using rule 92 (atom -> NAME .)
    DIV             reduce using rule 92 (atom -> NAME .)
    MOD             reduce using rule 92 (atom -> NAME .)
    POTENCIA        reduce using rule 92 (atom -> NAME .)
    NEQ             reduce using rule 92 (atom -> NAME .)
    EQ              reduce using rule 92 (atom -> NAME .)
    LT              reduce using rule 92 (atom -> NAME .)
    GT              reduce using rule 92 (atom -> NAME .)
    LEQ             reduce using rule 92 (atom -> NAME .)
    GEQ             reduce using rule 92 (atom -> NAME .)
    AND             reduce using rule 92 (atom -> NAME .)
    OR              reduce using rule 92 (atom -> NAME .)
    COMMA           reduce using rule 92 (atom -> NAME .)
    ASSIGN          reduce using rule 92 (atom -> NAME .)
    COLON           reduce using rule 92 (atom -> NAME .)
    NEWLINE         reduce using rule 92 (atom -> NAME .)
    SEMICOLON       reduce using rule 92 (atom -> NAME .)
    RPAR            reduce using rule 92 (atom -> NAME .)
    RBRA            reduce using rule 92 (atom -> NAME .)


state 18

    (49) while_loop -> WHILE . test COLON suite
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    test                           shift and go to state 47
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 19

    (50) for_loop -> FOR . NAME IN range COLON suite

    NAME            shift and go to state 48


state 20

    (55) struct_def -> STRUCT . NAME COLON struct_body

    NAME            shift and go to state 49


state 21

    (25) small_stmt -> flow_stmt .

    NEWLINE         reduce using rule 25 (small_stmt -> flow_stmt .)
    SEMICOLON       reduce using rule 25 (small_stmt -> flow_stmt .)


state 22

    (26) small_stmt -> expr_stmt .

    NEWLINE         reduce using rule 26 (small_stmt -> expr_stmt .)
    SEMICOLON       reduce using rule 26 (small_stmt -> expr_stmt .)


state 23

    (37) flow_stmt -> return_stmt .

    NEWLINE         reduce using rule 37 (flow_stmt -> return_stmt .)
    SEMICOLON       reduce using rule 37 (flow_stmt -> return_stmt .)


state 24

    (38) flow_stmt -> continue_stmt .

    NEWLINE         reduce using rule 38 (flow_stmt -> continue_stmt .)
    SEMICOLON       reduce using rule 38 (flow_stmt -> continue_stmt .)


state 25

    (39) flow_stmt -> break_stmt .

    NEWLINE         reduce using rule 39 (flow_stmt -> break_stmt .)
    SEMICOLON       reduce using rule 39 (flow_stmt -> break_stmt .)


state 26

    (27) expr_stmt -> testlist . ASSIGN testlist
    (28) expr_stmt -> testlist . COLON type ASSIGN testlist
    (29) expr_stmt -> testlist . ASSIGN list_def
    (30) expr_stmt -> testlist . COLON type ASSIGN list_def
    (31) expr_stmt -> testlist .

    ASSIGN          shift and go to state 50
    COLON           shift and go to state 51
    NEWLINE         reduce using rule 31 (expr_stmt -> testlist .)
    SEMICOLON       reduce using rule 31 (expr_stmt -> testlist .)


state 27

    (40) return_stmt -> RETURN . testlist
    (41) return_stmt -> RETURN .
    (99) testlist -> . testlist_multi COMMA
    (100) testlist -> . testlist_multi
    (101) testlist_multi -> . testlist_multi COMMA test
    (102) testlist_multi -> . test
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    NEWLINE         reduce using rule 41 (return_stmt -> RETURN .)
    SEMICOLON       reduce using rule 41 (return_stmt -> RETURN .)
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    testlist                       shift and go to state 52
    testlist_multi                 shift and go to state 30
    test                           shift and go to state 15
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 28

    (42) continue_stmt -> CONTINUE .

    NEWLINE         reduce using rule 42 (continue_stmt -> CONTINUE .)
    SEMICOLON       reduce using rule 42 (continue_stmt -> CONTINUE .)


state 29

    (43) break_stmt -> BREAK .

    NEWLINE         reduce using rule 43 (break_stmt -> BREAK .)
    SEMICOLON       reduce using rule 43 (break_stmt -> BREAK .)


state 30

    (99) testlist -> testlist_multi . COMMA
    (100) testlist -> testlist_multi .
    (101) testlist_multi -> testlist_multi . COMMA test

    COMMA           shift and go to state 53
    ASSIGN          reduce using rule 100 (testlist -> testlist_multi .)
    COLON           reduce using rule 100 (testlist -> testlist_multi .)
    NEWLINE         reduce using rule 100 (testlist -> testlist_multi .)
    SEMICOLON       reduce using rule 100 (testlist -> testlist_multi .)


state 31

    (103) test -> comparison .
    (71) comparison -> comparison . PLUS comparison
    (72) comparison -> comparison . MINUS comparison
    (73) comparison -> comparison . MULT comparison
    (74) comparison -> comparison . DIV comparison
    (75) comparison -> comparison . MOD comparison
    (76) comparison -> comparison . POTENCIA comparison
    (78) comparison -> comparison . NEQ comparison
    (79) comparison -> comparison . EQ comparison
    (80) comparison -> comparison . LT comparison
    (81) comparison -> comparison . GT comparison
    (82) comparison -> comparison . LEQ comparison
    (83) comparison -> comparison . GEQ comparison
    (84) comparison -> comparison . AND comparison
    (85) comparison -> comparison . OR comparison

    COMMA           reduce using rule 103 (test -> comparison .)
    ASSIGN          reduce using rule 103 (test -> comparison .)
    COLON           reduce using rule 103 (test -> comparison .)
    NEWLINE         reduce using rule 103 (test -> comparison .)
    SEMICOLON       reduce using rule 103 (test -> comparison .)
    RPAR            reduce using rule 103 (test -> comparison .)
    RBRA            reduce using rule 103 (test -> comparison .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULT            shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    POTENCIA        shift and go to state 59
    NEQ             shift and go to state 60
    EQ              shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LEQ             shift and go to state 64
    GEQ             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67


state 32

    (77) comparison -> MINUS . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    comparison                     shift and go to state 68
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 33

    (86) comparison -> NOT . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    comparison                     shift and go to state 69
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 34

    (87) comparison -> LPAR . comparison RPAR
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    comparison                     shift and go to state 70
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 35

    (88) comparison -> power .

    PLUS            reduce using rule 88 (comparison -> power .)
    MINUS           reduce using rule 88 (comparison -> power .)
    MULT            reduce using rule 88 (comparison -> power .)
    DIV             reduce using rule 88 (comparison -> power .)
    MOD             reduce using rule 88 (comparison -> power .)
    POTENCIA        reduce using rule 88 (comparison -> power .)
    NEQ             reduce using rule 88 (comparison -> power .)
    EQ              reduce using rule 88 (comparison -> power .)
    LT              reduce using rule 88 (comparison -> power .)
    GT              reduce using rule 88 (comparison -> power .)
    LEQ             reduce using rule 88 (comparison -> power .)
    GEQ             reduce using rule 88 (comparison -> power .)
    AND             reduce using rule 88 (comparison -> power .)
    OR              reduce using rule 88 (comparison -> power .)
    COMMA           reduce using rule 88 (comparison -> power .)
    ASSIGN          reduce using rule 88 (comparison -> power .)
    COLON           reduce using rule 88 (comparison -> power .)
    NEWLINE         reduce using rule 88 (comparison -> power .)
    SEMICOLON       reduce using rule 88 (comparison -> power .)
    RPAR            reduce using rule 88 (comparison -> power .)
    RBRA            reduce using rule 88 (comparison -> power .)


state 36

    (89) power -> atom .
    (90) power -> atom . trailer
    (91) power -> atom . list_index
    (96) trailer -> . LPAR arglist RPAR
    (97) list_index -> . LBRA test RBRA
    (98) list_index -> . list_index LBRA test RBRA

    PLUS            reduce using rule 89 (power -> atom .)
    MINUS           reduce using rule 89 (power -> atom .)
    MULT            reduce using rule 89 (power -> atom .)
    DIV             reduce using rule 89 (power -> atom .)
    MOD             reduce using rule 89 (power -> atom .)
    POTENCIA        reduce using rule 89 (power -> atom .)
    NEQ             reduce using rule 89 (power -> atom .)
    EQ              reduce using rule 89 (power -> atom .)
    LT              reduce using rule 89 (power -> atom .)
    GT              reduce using rule 89 (power -> atom .)
    LEQ             reduce using rule 89 (power -> atom .)
    GEQ             reduce using rule 89 (power -> atom .)
    AND             reduce using rule 89 (power -> atom .)
    OR              reduce using rule 89 (power -> atom .)
    COMMA           reduce using rule 89 (power -> atom .)
    ASSIGN          reduce using rule 89 (power -> atom .)
    COLON           reduce using rule 89 (power -> atom .)
    NEWLINE         reduce using rule 89 (power -> atom .)
    SEMICOLON       reduce using rule 89 (power -> atom .)
    RPAR            reduce using rule 89 (power -> atom .)
    RBRA            reduce using rule 89 (power -> atom .)
    LPAR            shift and go to state 73
    LBRA            shift and go to state 74

    trailer                        shift and go to state 71
    list_index                     shift and go to state 72

state 37

    (93) atom -> NUMBER .

    LPAR            reduce using rule 93 (atom -> NUMBER .)
    LBRA            reduce using rule 93 (atom -> NUMBER .)
    PLUS            reduce using rule 93 (atom -> NUMBER .)
    MINUS           reduce using rule 93 (atom -> NUMBER .)
    MULT            reduce using rule 93 (atom -> NUMBER .)
    DIV             reduce using rule 93 (atom -> NUMBER .)
    MOD             reduce using rule 93 (atom -> NUMBER .)
    POTENCIA        reduce using rule 93 (atom -> NUMBER .)
    NEQ             reduce using rule 93 (atom -> NUMBER .)
    EQ              reduce using rule 93 (atom -> NUMBER .)
    LT              reduce using rule 93 (atom -> NUMBER .)
    GT              reduce using rule 93 (atom -> NUMBER .)
    LEQ             reduce using rule 93 (atom -> NUMBER .)
    GEQ             reduce using rule 93 (atom -> NUMBER .)
    AND             reduce using rule 93 (atom -> NUMBER .)
    OR              reduce using rule 93 (atom -> NUMBER .)
    COMMA           reduce using rule 93 (atom -> NUMBER .)
    ASSIGN          reduce using rule 93 (atom -> NUMBER .)
    COLON           reduce using rule 93 (atom -> NUMBER .)
    NEWLINE         reduce using rule 93 (atom -> NUMBER .)
    SEMICOLON       reduce using rule 93 (atom -> NUMBER .)
    RPAR            reduce using rule 93 (atom -> NUMBER .)
    RBRA            reduce using rule 93 (atom -> NUMBER .)


state 38

    (94) atom -> FLOAT .

    LPAR            reduce using rule 94 (atom -> FLOAT .)
    LBRA            reduce using rule 94 (atom -> FLOAT .)
    PLUS            reduce using rule 94 (atom -> FLOAT .)
    MINUS           reduce using rule 94 (atom -> FLOAT .)
    MULT            reduce using rule 94 (atom -> FLOAT .)
    DIV             reduce using rule 94 (atom -> FLOAT .)
    MOD             reduce using rule 94 (atom -> FLOAT .)
    POTENCIA        reduce using rule 94 (atom -> FLOAT .)
    NEQ             reduce using rule 94 (atom -> FLOAT .)
    EQ              reduce using rule 94 (atom -> FLOAT .)
    LT              reduce using rule 94 (atom -> FLOAT .)
    GT              reduce using rule 94 (atom -> FLOAT .)
    LEQ             reduce using rule 94 (atom -> FLOAT .)
    GEQ             reduce using rule 94 (atom -> FLOAT .)
    AND             reduce using rule 94 (atom -> FLOAT .)
    OR              reduce using rule 94 (atom -> FLOAT .)
    COMMA           reduce using rule 94 (atom -> FLOAT .)
    ASSIGN          reduce using rule 94 (atom -> FLOAT .)
    COLON           reduce using rule 94 (atom -> FLOAT .)
    NEWLINE         reduce using rule 94 (atom -> FLOAT .)
    SEMICOLON       reduce using rule 94 (atom -> FLOAT .)
    RPAR            reduce using rule 94 (atom -> FLOAT .)
    RBRA            reduce using rule 94 (atom -> FLOAT .)


state 39

    (95) atom -> STRING .

    LPAR            reduce using rule 95 (atom -> STRING .)
    LBRA            reduce using rule 95 (atom -> STRING .)
    PLUS            reduce using rule 95 (atom -> STRING .)
    MINUS           reduce using rule 95 (atom -> STRING .)
    MULT            reduce using rule 95 (atom -> STRING .)
    DIV             reduce using rule 95 (atom -> STRING .)
    MOD             reduce using rule 95 (atom -> STRING .)
    POTENCIA        reduce using rule 95 (atom -> STRING .)
    NEQ             reduce using rule 95 (atom -> STRING .)
    EQ              reduce using rule 95 (atom -> STRING .)
    LT              reduce using rule 95 (atom -> STRING .)
    GT              reduce using rule 95 (atom -> STRING .)
    LEQ             reduce using rule 95 (atom -> STRING .)
    GEQ             reduce using rule 95 (atom -> STRING .)
    AND             reduce using rule 95 (atom -> STRING .)
    OR              reduce using rule 95 (atom -> STRING .)
    COMMA           reduce using rule 95 (atom -> STRING .)
    ASSIGN          reduce using rule 95 (atom -> STRING .)
    COLON           reduce using rule 95 (atom -> STRING .)
    NEWLINE         reduce using rule 95 (atom -> STRING .)
    SEMICOLON       reduce using rule 95 (atom -> STRING .)
    RPAR            reduce using rule 95 (atom -> STRING .)
    RBRA            reduce using rule 95 (atom -> STRING .)


state 40

    (1) file_input_end -> file_input ENDMARKER .

    $end            reduce using rule 1 (file_input_end -> file_input ENDMARKER .)


state 41

    (2) file_input -> file_input NEWLINE .

    ENDMARKER       reduce using rule 2 (file_input -> file_input NEWLINE .)
    NEWLINE         reduce using rule 2 (file_input -> file_input NEWLINE .)
    IF              reduce using rule 2 (file_input -> file_input NEWLINE .)
    DEF             reduce using rule 2 (file_input -> file_input NEWLINE .)
    WHILE           reduce using rule 2 (file_input -> file_input NEWLINE .)
    FOR             reduce using rule 2 (file_input -> file_input NEWLINE .)
    STRUCT          reduce using rule 2 (file_input -> file_input NEWLINE .)
    RETURN          reduce using rule 2 (file_input -> file_input NEWLINE .)
    CONTINUE        reduce using rule 2 (file_input -> file_input NEWLINE .)
    BREAK           reduce using rule 2 (file_input -> file_input NEWLINE .)
    MINUS           reduce using rule 2 (file_input -> file_input NEWLINE .)
    NOT             reduce using rule 2 (file_input -> file_input NEWLINE .)
    LPAR            reduce using rule 2 (file_input -> file_input NEWLINE .)
    NAME            reduce using rule 2 (file_input -> file_input NEWLINE .)
    NUMBER          reduce using rule 2 (file_input -> file_input NEWLINE .)
    FLOAT           reduce using rule 2 (file_input -> file_input NEWLINE .)
    STRING          reduce using rule 2 (file_input -> file_input NEWLINE .)


state 42

    (3) file_input -> file_input stmt .

    ENDMARKER       reduce using rule 3 (file_input -> file_input stmt .)
    NEWLINE         reduce using rule 3 (file_input -> file_input stmt .)
    IF              reduce using rule 3 (file_input -> file_input stmt .)
    DEF             reduce using rule 3 (file_input -> file_input stmt .)
    WHILE           reduce using rule 3 (file_input -> file_input stmt .)
    FOR             reduce using rule 3 (file_input -> file_input stmt .)
    STRUCT          reduce using rule 3 (file_input -> file_input stmt .)
    RETURN          reduce using rule 3 (file_input -> file_input stmt .)
    CONTINUE        reduce using rule 3 (file_input -> file_input stmt .)
    BREAK           reduce using rule 3 (file_input -> file_input stmt .)
    MINUS           reduce using rule 3 (file_input -> file_input stmt .)
    NOT             reduce using rule 3 (file_input -> file_input stmt .)
    LPAR            reduce using rule 3 (file_input -> file_input stmt .)
    NAME            reduce using rule 3 (file_input -> file_input stmt .)
    NUMBER          reduce using rule 3 (file_input -> file_input stmt .)
    FLOAT           reduce using rule 3 (file_input -> file_input stmt .)
    STRING          reduce using rule 3 (file_input -> file_input stmt .)


state 43

    (21) simple_stmt -> small_stmts NEWLINE .

    ENDMARKER       reduce using rule 21 (simple_stmt -> small_stmts NEWLINE .)
    NEWLINE         reduce using rule 21 (simple_stmt -> small_stmts NEWLINE .)
    IF              reduce using rule 21 (simple_stmt -> small_stmts NEWLINE .)
    DEF             reduce using rule 21 (simple_stmt -> small_stmts NEWLINE .)
    WHILE           reduce using rule 21 (simple_stmt -> small_stmts NEWLINE .)
    FOR             reduce using rule 21 (simple_stmt -> small_stmts NEWLINE .)
    STRUCT          reduce using rule 21 (simple_stmt -> small_stmts NEWLINE .)
    RETURN          reduce using rule 21 (simple_stmt -> small_stmts NEWLINE .)
    CONTINUE        reduce using rule 21 (simple_stmt -> small_stmts NEWLINE .)
    BREAK           reduce using rule 21 (simple_stmt -> small_stmts NEWLINE .)
    MINUS           reduce using rule 21 (simple_stmt -> small_stmts NEWLINE .)
    NOT             reduce using rule 21 (simple_stmt -> small_stmts NEWLINE .)
    LPAR            reduce using rule 21 (simple_stmt -> small_stmts NEWLINE .)
    NAME            reduce using rule 21 (simple_stmt -> small_stmts NEWLINE .)
    NUMBER          reduce using rule 21 (simple_stmt -> small_stmts NEWLINE .)
    FLOAT           reduce using rule 21 (simple_stmt -> small_stmts NEWLINE .)
    STRING          reduce using rule 21 (simple_stmt -> small_stmts NEWLINE .)
    ELSE            reduce using rule 21 (simple_stmt -> small_stmts NEWLINE .)
    ELIF            reduce using rule 21 (simple_stmt -> small_stmts NEWLINE .)
    DEDENT          reduce using rule 21 (simple_stmt -> small_stmts NEWLINE .)


state 44

    (22) simple_stmt -> small_stmts SEMICOLON . NEWLINE
    (23) small_stmts -> small_stmts SEMICOLON . small_stmt
    (25) small_stmt -> . flow_stmt
    (26) small_stmt -> . expr_stmt
    (37) flow_stmt -> . return_stmt
    (38) flow_stmt -> . continue_stmt
    (39) flow_stmt -> . break_stmt
    (27) expr_stmt -> . testlist ASSIGN testlist
    (28) expr_stmt -> . testlist COLON type ASSIGN testlist
    (29) expr_stmt -> . testlist ASSIGN list_def
    (30) expr_stmt -> . testlist COLON type ASSIGN list_def
    (31) expr_stmt -> . testlist
    (40) return_stmt -> . RETURN testlist
    (41) return_stmt -> . RETURN
    (42) continue_stmt -> . CONTINUE
    (43) break_stmt -> . BREAK
    (99) testlist -> . testlist_multi COMMA
    (100) testlist -> . testlist_multi
    (101) testlist_multi -> . testlist_multi COMMA test
    (102) testlist_multi -> . test
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    NEWLINE         shift and go to state 75
    RETURN          shift and go to state 27
    CONTINUE        shift and go to state 28
    BREAK           shift and go to state 29
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    small_stmt                     shift and go to state 76
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    testlist_multi                 shift and go to state 30
    test                           shift and go to state 15
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 45

    (61) if_stmt -> IF test . COLON suite
    (62) if_stmt -> IF test . COLON suite ELSE COLON suite
    (63) if_stmt -> IF test . COLON suite else_if_list

    COLON           shift and go to state 77


state 46

    (6) funcdef -> DEF NAME . parameters COLON suite
    (7) parameters -> . LPAR RPAR
    (8) parameters -> . LPAR varargslist RPAR

    LPAR            shift and go to state 79

    parameters                     shift and go to state 78

state 47

    (49) while_loop -> WHILE test . COLON suite

    COLON           shift and go to state 80


state 48

    (50) for_loop -> FOR NAME . IN range COLON suite

    IN              shift and go to state 81


state 49

    (55) struct_def -> STRUCT NAME . COLON struct_body

    COLON           shift and go to state 82


state 50

    (27) expr_stmt -> testlist ASSIGN . testlist
    (29) expr_stmt -> testlist ASSIGN . list_def
    (99) testlist -> . testlist_multi COMMA
    (100) testlist -> . testlist_multi
    (32) list_def -> . LBRA list_elem RBRA
    (101) testlist_multi -> . testlist_multi COMMA test
    (102) testlist_multi -> . test
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    LBRA            shift and go to state 85
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    testlist                       shift and go to state 83
    list_def                       shift and go to state 84
    testlist_multi                 shift and go to state 30
    test                           shift and go to state 15
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 51

    (28) expr_stmt -> testlist COLON . type ASSIGN testlist
    (30) expr_stmt -> testlist COLON . type ASSIGN list_def
    (13) type -> . STR
    (14) type -> . INT
    (15) type -> . FLOAT
    (16) type -> . BOOL
    (17) type -> . LIST
    (18) type -> . NAME

    STR             shift and go to state 87
    INT             shift and go to state 88
    FLOAT           shift and go to state 89
    BOOL            shift and go to state 90
    LIST            shift and go to state 91
    NAME            shift and go to state 92

    type                           shift and go to state 86

state 52

    (40) return_stmt -> RETURN testlist .

    NEWLINE         reduce using rule 40 (return_stmt -> RETURN testlist .)
    SEMICOLON       reduce using rule 40 (return_stmt -> RETURN testlist .)


state 53

    (99) testlist -> testlist_multi COMMA .
    (101) testlist_multi -> testlist_multi COMMA . test
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    ASSIGN          reduce using rule 99 (testlist -> testlist_multi COMMA .)
    COLON           reduce using rule 99 (testlist -> testlist_multi COMMA .)
    NEWLINE         reduce using rule 99 (testlist -> testlist_multi COMMA .)
    SEMICOLON       reduce using rule 99 (testlist -> testlist_multi COMMA .)
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    test                           shift and go to state 93
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 54

    (71) comparison -> comparison PLUS . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    comparison                     shift and go to state 94
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 55

    (72) comparison -> comparison MINUS . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    comparison                     shift and go to state 95
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 56

    (73) comparison -> comparison MULT . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    comparison                     shift and go to state 96
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 57

    (74) comparison -> comparison DIV . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    comparison                     shift and go to state 97
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 58

    (75) comparison -> comparison MOD . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    comparison                     shift and go to state 98
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 59

    (76) comparison -> comparison POTENCIA . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    comparison                     shift and go to state 99
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 60

    (78) comparison -> comparison NEQ . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    comparison                     shift and go to state 100
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 61

    (79) comparison -> comparison EQ . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    comparison                     shift and go to state 101
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 62

    (80) comparison -> comparison LT . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    comparison                     shift and go to state 102
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 63

    (81) comparison -> comparison GT . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    comparison                     shift and go to state 103
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 64

    (82) comparison -> comparison LEQ . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    comparison                     shift and go to state 104
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 65

    (83) comparison -> comparison GEQ . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    comparison                     shift and go to state 105
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 66

    (84) comparison -> comparison AND . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    comparison                     shift and go to state 106
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 67

    (85) comparison -> comparison OR . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    comparison                     shift and go to state 107
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 68

    (77) comparison -> MINUS comparison .
    (71) comparison -> comparison . PLUS comparison
    (72) comparison -> comparison . MINUS comparison
    (73) comparison -> comparison . MULT comparison
    (74) comparison -> comparison . DIV comparison
    (75) comparison -> comparison . MOD comparison
    (76) comparison -> comparison . POTENCIA comparison
    (78) comparison -> comparison . NEQ comparison
    (79) comparison -> comparison . EQ comparison
    (80) comparison -> comparison . LT comparison
    (81) comparison -> comparison . GT comparison
    (82) comparison -> comparison . LEQ comparison
    (83) comparison -> comparison . GEQ comparison
    (84) comparison -> comparison . AND comparison
    (85) comparison -> comparison . OR comparison

    PLUS            reduce using rule 77 (comparison -> MINUS comparison .)
    MINUS           reduce using rule 77 (comparison -> MINUS comparison .)
    MULT            reduce using rule 77 (comparison -> MINUS comparison .)
    DIV             reduce using rule 77 (comparison -> MINUS comparison .)
    MOD             reduce using rule 77 (comparison -> MINUS comparison .)
    NEQ             reduce using rule 77 (comparison -> MINUS comparison .)
    EQ              reduce using rule 77 (comparison -> MINUS comparison .)
    LT              reduce using rule 77 (comparison -> MINUS comparison .)
    GT              reduce using rule 77 (comparison -> MINUS comparison .)
    LEQ             reduce using rule 77 (comparison -> MINUS comparison .)
    GEQ             reduce using rule 77 (comparison -> MINUS comparison .)
    AND             reduce using rule 77 (comparison -> MINUS comparison .)
    OR              reduce using rule 77 (comparison -> MINUS comparison .)
    COMMA           reduce using rule 77 (comparison -> MINUS comparison .)
    ASSIGN          reduce using rule 77 (comparison -> MINUS comparison .)
    COLON           reduce using rule 77 (comparison -> MINUS comparison .)
    NEWLINE         reduce using rule 77 (comparison -> MINUS comparison .)
    SEMICOLON       reduce using rule 77 (comparison -> MINUS comparison .)
    RPAR            reduce using rule 77 (comparison -> MINUS comparison .)
    RBRA            reduce using rule 77 (comparison -> MINUS comparison .)
    POTENCIA        shift and go to state 59

  ! POTENCIA        [ reduce using rule 77 (comparison -> MINUS comparison .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! MULT            [ shift and go to state 56 ]
  ! DIV             [ shift and go to state 57 ]
  ! MOD             [ shift and go to state 58 ]
  ! NEQ             [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]
  ! LT              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! LEQ             [ shift and go to state 64 ]
  ! GEQ             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 69

    (86) comparison -> NOT comparison .
    (71) comparison -> comparison . PLUS comparison
    (72) comparison -> comparison . MINUS comparison
    (73) comparison -> comparison . MULT comparison
    (74) comparison -> comparison . DIV comparison
    (75) comparison -> comparison . MOD comparison
    (76) comparison -> comparison . POTENCIA comparison
    (78) comparison -> comparison . NEQ comparison
    (79) comparison -> comparison . EQ comparison
    (80) comparison -> comparison . LT comparison
    (81) comparison -> comparison . GT comparison
    (82) comparison -> comparison . LEQ comparison
    (83) comparison -> comparison . GEQ comparison
    (84) comparison -> comparison . AND comparison
    (85) comparison -> comparison . OR comparison

    AND             reduce using rule 86 (comparison -> NOT comparison .)
    OR              reduce using rule 86 (comparison -> NOT comparison .)
    COMMA           reduce using rule 86 (comparison -> NOT comparison .)
    ASSIGN          reduce using rule 86 (comparison -> NOT comparison .)
    COLON           reduce using rule 86 (comparison -> NOT comparison .)
    NEWLINE         reduce using rule 86 (comparison -> NOT comparison .)
    SEMICOLON       reduce using rule 86 (comparison -> NOT comparison .)
    RPAR            reduce using rule 86 (comparison -> NOT comparison .)
    RBRA            reduce using rule 86 (comparison -> NOT comparison .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULT            shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    POTENCIA        shift and go to state 59
    NEQ             shift and go to state 60
    EQ              shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LEQ             shift and go to state 64
    GEQ             shift and go to state 65

  ! PLUS            [ reduce using rule 86 (comparison -> NOT comparison .) ]
  ! MINUS           [ reduce using rule 86 (comparison -> NOT comparison .) ]
  ! MULT            [ reduce using rule 86 (comparison -> NOT comparison .) ]
  ! DIV             [ reduce using rule 86 (comparison -> NOT comparison .) ]
  ! MOD             [ reduce using rule 86 (comparison -> NOT comparison .) ]
  ! POTENCIA        [ reduce using rule 86 (comparison -> NOT comparison .) ]
  ! NEQ             [ reduce using rule 86 (comparison -> NOT comparison .) ]
  ! EQ              [ reduce using rule 86 (comparison -> NOT comparison .) ]
  ! LT              [ reduce using rule 86 (comparison -> NOT comparison .) ]
  ! GT              [ reduce using rule 86 (comparison -> NOT comparison .) ]
  ! LEQ             [ reduce using rule 86 (comparison -> NOT comparison .) ]
  ! GEQ             [ reduce using rule 86 (comparison -> NOT comparison .) ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 70

    (87) comparison -> LPAR comparison . RPAR
    (71) comparison -> comparison . PLUS comparison
    (72) comparison -> comparison . MINUS comparison
    (73) comparison -> comparison . MULT comparison
    (74) comparison -> comparison . DIV comparison
    (75) comparison -> comparison . MOD comparison
    (76) comparison -> comparison . POTENCIA comparison
    (78) comparison -> comparison . NEQ comparison
    (79) comparison -> comparison . EQ comparison
    (80) comparison -> comparison . LT comparison
    (81) comparison -> comparison . GT comparison
    (82) comparison -> comparison . LEQ comparison
    (83) comparison -> comparison . GEQ comparison
    (84) comparison -> comparison . AND comparison
    (85) comparison -> comparison . OR comparison

    RPAR            shift and go to state 108
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULT            shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    POTENCIA        shift and go to state 59
    NEQ             shift and go to state 60
    EQ              shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LEQ             shift and go to state 64
    GEQ             shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67


state 71

    (90) power -> atom trailer .

    PLUS            reduce using rule 90 (power -> atom trailer .)
    MINUS           reduce using rule 90 (power -> atom trailer .)
    MULT            reduce using rule 90 (power -> atom trailer .)
    DIV             reduce using rule 90 (power -> atom trailer .)
    MOD             reduce using rule 90 (power -> atom trailer .)
    POTENCIA        reduce using rule 90 (power -> atom trailer .)
    NEQ             reduce using rule 90 (power -> atom trailer .)
    EQ              reduce using rule 90 (power -> atom trailer .)
    LT              reduce using rule 90 (power -> atom trailer .)
    GT              reduce using rule 90 (power -> atom trailer .)
    LEQ             reduce using rule 90 (power -> atom trailer .)
    GEQ             reduce using rule 90 (power -> atom trailer .)
    AND             reduce using rule 90 (power -> atom trailer .)
    OR              reduce using rule 90 (power -> atom trailer .)
    COMMA           reduce using rule 90 (power -> atom trailer .)
    ASSIGN          reduce using rule 90 (power -> atom trailer .)
    COLON           reduce using rule 90 (power -> atom trailer .)
    NEWLINE         reduce using rule 90 (power -> atom trailer .)
    SEMICOLON       reduce using rule 90 (power -> atom trailer .)
    RPAR            reduce using rule 90 (power -> atom trailer .)
    RBRA            reduce using rule 90 (power -> atom trailer .)


state 72

    (91) power -> atom list_index .
    (98) list_index -> list_index . LBRA test RBRA

    PLUS            reduce using rule 91 (power -> atom list_index .)
    MINUS           reduce using rule 91 (power -> atom list_index .)
    MULT            reduce using rule 91 (power -> atom list_index .)
    DIV             reduce using rule 91 (power -> atom list_index .)
    MOD             reduce using rule 91 (power -> atom list_index .)
    POTENCIA        reduce using rule 91 (power -> atom list_index .)
    NEQ             reduce using rule 91 (power -> atom list_index .)
    EQ              reduce using rule 91 (power -> atom list_index .)
    LT              reduce using rule 91 (power -> atom list_index .)
    GT              reduce using rule 91 (power -> atom list_index .)
    LEQ             reduce using rule 91 (power -> atom list_index .)
    GEQ             reduce using rule 91 (power -> atom list_index .)
    AND             reduce using rule 91 (power -> atom list_index .)
    OR              reduce using rule 91 (power -> atom list_index .)
    COMMA           reduce using rule 91 (power -> atom list_index .)
    ASSIGN          reduce using rule 91 (power -> atom list_index .)
    COLON           reduce using rule 91 (power -> atom list_index .)
    NEWLINE         reduce using rule 91 (power -> atom list_index .)
    SEMICOLON       reduce using rule 91 (power -> atom list_index .)
    RPAR            reduce using rule 91 (power -> atom list_index .)
    RBRA            reduce using rule 91 (power -> atom list_index .)
    LBRA            shift and go to state 109


state 73

    (96) trailer -> LPAR . arglist RPAR
    (104) arglist -> . arglist COMMA argument
    (105) arglist -> . argument
    (106) argument -> . test
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    arglist                        shift and go to state 110
    argument                       shift and go to state 111
    test                           shift and go to state 112
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 74

    (97) list_index -> LBRA . test RBRA
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    test                           shift and go to state 113
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 75

    (22) simple_stmt -> small_stmts SEMICOLON NEWLINE .

    ENDMARKER       reduce using rule 22 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    NEWLINE         reduce using rule 22 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    IF              reduce using rule 22 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    DEF             reduce using rule 22 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    WHILE           reduce using rule 22 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    FOR             reduce using rule 22 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    STRUCT          reduce using rule 22 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    RETURN          reduce using rule 22 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    CONTINUE        reduce using rule 22 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    BREAK           reduce using rule 22 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    MINUS           reduce using rule 22 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    NOT             reduce using rule 22 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    LPAR            reduce using rule 22 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    NAME            reduce using rule 22 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    NUMBER          reduce using rule 22 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    FLOAT           reduce using rule 22 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    STRING          reduce using rule 22 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    ELSE            reduce using rule 22 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    ELIF            reduce using rule 22 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)
    DEDENT          reduce using rule 22 (simple_stmt -> small_stmts SEMICOLON NEWLINE .)


state 76

    (23) small_stmts -> small_stmts SEMICOLON small_stmt .

    NEWLINE         reduce using rule 23 (small_stmts -> small_stmts SEMICOLON small_stmt .)
    SEMICOLON       reduce using rule 23 (small_stmts -> small_stmts SEMICOLON small_stmt .)


state 77

    (61) if_stmt -> IF test COLON . suite
    (62) if_stmt -> IF test COLON . suite ELSE COLON suite
    (63) if_stmt -> IF test COLON . suite else_if_list
    (67) suite -> . simple_stmt
    (68) suite -> . NEWLINE INDENT stmts DEDENT
    (21) simple_stmt -> . small_stmts NEWLINE
    (22) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (23) small_stmts -> . small_stmts SEMICOLON small_stmt
    (24) small_stmts -> . small_stmt
    (25) small_stmt -> . flow_stmt
    (26) small_stmt -> . expr_stmt
    (37) flow_stmt -> . return_stmt
    (38) flow_stmt -> . continue_stmt
    (39) flow_stmt -> . break_stmt
    (27) expr_stmt -> . testlist ASSIGN testlist
    (28) expr_stmt -> . testlist COLON type ASSIGN testlist
    (29) expr_stmt -> . testlist ASSIGN list_def
    (30) expr_stmt -> . testlist COLON type ASSIGN list_def
    (31) expr_stmt -> . testlist
    (40) return_stmt -> . RETURN testlist
    (41) return_stmt -> . RETURN
    (42) continue_stmt -> . CONTINUE
    (43) break_stmt -> . BREAK
    (99) testlist -> . testlist_multi COMMA
    (100) testlist -> . testlist_multi
    (101) testlist_multi -> . testlist_multi COMMA test
    (102) testlist_multi -> . test
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    NEWLINE         shift and go to state 116
    RETURN          shift and go to state 27
    CONTINUE        shift and go to state 28
    BREAK           shift and go to state 29
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    test                           shift and go to state 15
    suite                          shift and go to state 114
    simple_stmt                    shift and go to state 115
    small_stmts                    shift and go to state 7
    small_stmt                     shift and go to state 13
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    testlist_multi                 shift and go to state 30
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 78

    (6) funcdef -> DEF NAME parameters . COLON suite

    COLON           shift and go to state 117


state 79

    (7) parameters -> LPAR . RPAR
    (8) parameters -> LPAR . varargslist RPAR
    (9) varargslist -> . varargslist COMMA NAME COLON type
    (10) varargslist -> . varargslist COMMA NAME
    (11) varargslist -> . NAME COLON type
    (12) varargslist -> . NAME

    RPAR            shift and go to state 118
    NAME            shift and go to state 120

    varargslist                    shift and go to state 119

state 80

    (49) while_loop -> WHILE test COLON . suite
    (67) suite -> . simple_stmt
    (68) suite -> . NEWLINE INDENT stmts DEDENT
    (21) simple_stmt -> . small_stmts NEWLINE
    (22) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (23) small_stmts -> . small_stmts SEMICOLON small_stmt
    (24) small_stmts -> . small_stmt
    (25) small_stmt -> . flow_stmt
    (26) small_stmt -> . expr_stmt
    (37) flow_stmt -> . return_stmt
    (38) flow_stmt -> . continue_stmt
    (39) flow_stmt -> . break_stmt
    (27) expr_stmt -> . testlist ASSIGN testlist
    (28) expr_stmt -> . testlist COLON type ASSIGN testlist
    (29) expr_stmt -> . testlist ASSIGN list_def
    (30) expr_stmt -> . testlist COLON type ASSIGN list_def
    (31) expr_stmt -> . testlist
    (40) return_stmt -> . RETURN testlist
    (41) return_stmt -> . RETURN
    (42) continue_stmt -> . CONTINUE
    (43) break_stmt -> . BREAK
    (99) testlist -> . testlist_multi COMMA
    (100) testlist -> . testlist_multi
    (101) testlist_multi -> . testlist_multi COMMA test
    (102) testlist_multi -> . test
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    NEWLINE         shift and go to state 116
    RETURN          shift and go to state 27
    CONTINUE        shift and go to state 28
    BREAK           shift and go to state 29
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    test                           shift and go to state 15
    suite                          shift and go to state 121
    simple_stmt                    shift and go to state 115
    small_stmts                    shift and go to state 7
    small_stmt                     shift and go to state 13
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    testlist_multi                 shift and go to state 30
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 81

    (50) for_loop -> FOR NAME IN . range COLON suite
    (51) range -> . STRING
    (52) range -> . list_def
    (53) range -> . NAME
    (54) range -> . atom trailer
    (32) list_def -> . LBRA list_elem RBRA
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    STRING          shift and go to state 124
    NAME            shift and go to state 122
    LBRA            shift and go to state 85
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38

    range                          shift and go to state 123
    list_def                       shift and go to state 125
    atom                           shift and go to state 126

state 82

    (55) struct_def -> STRUCT NAME COLON . struct_body
    (56) struct_body -> . NEWLINE INDENT struct_fields DEDENT

    NEWLINE         shift and go to state 128

    struct_body                    shift and go to state 127

state 83

    (27) expr_stmt -> testlist ASSIGN testlist .

    NEWLINE         reduce using rule 27 (expr_stmt -> testlist ASSIGN testlist .)
    SEMICOLON       reduce using rule 27 (expr_stmt -> testlist ASSIGN testlist .)


state 84

    (29) expr_stmt -> testlist ASSIGN list_def .

    NEWLINE         reduce using rule 29 (expr_stmt -> testlist ASSIGN list_def .)
    SEMICOLON       reduce using rule 29 (expr_stmt -> testlist ASSIGN list_def .)


state 85

    (32) list_def -> LBRA . list_elem RBRA
    (33) list_elem -> . list_elem COMMA test
    (34) list_elem -> . list_elem COMMA list_def
    (35) list_elem -> . test
    (36) list_elem -> . list_def
    (103) test -> . comparison
    (32) list_def -> . LBRA list_elem RBRA
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    LBRA            shift and go to state 85
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    list_elem                      shift and go to state 129
    test                           shift and go to state 130
    list_def                       shift and go to state 131
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 86

    (28) expr_stmt -> testlist COLON type . ASSIGN testlist
    (30) expr_stmt -> testlist COLON type . ASSIGN list_def

    ASSIGN          shift and go to state 132


state 87

    (13) type -> STR .

    ASSIGN          reduce using rule 13 (type -> STR .)
    RPAR            reduce using rule 13 (type -> STR .)
    COMMA           reduce using rule 13 (type -> STR .)
    NEWLINE         reduce using rule 13 (type -> STR .)


state 88

    (14) type -> INT .

    ASSIGN          reduce using rule 14 (type -> INT .)
    RPAR            reduce using rule 14 (type -> INT .)
    COMMA           reduce using rule 14 (type -> INT .)
    NEWLINE         reduce using rule 14 (type -> INT .)


state 89

    (15) type -> FLOAT .

    ASSIGN          reduce using rule 15 (type -> FLOAT .)
    RPAR            reduce using rule 15 (type -> FLOAT .)
    COMMA           reduce using rule 15 (type -> FLOAT .)
    NEWLINE         reduce using rule 15 (type -> FLOAT .)


state 90

    (16) type -> BOOL .

    ASSIGN          reduce using rule 16 (type -> BOOL .)
    RPAR            reduce using rule 16 (type -> BOOL .)
    COMMA           reduce using rule 16 (type -> BOOL .)
    NEWLINE         reduce using rule 16 (type -> BOOL .)


state 91

    (17) type -> LIST .

    ASSIGN          reduce using rule 17 (type -> LIST .)
    RPAR            reduce using rule 17 (type -> LIST .)
    COMMA           reduce using rule 17 (type -> LIST .)
    NEWLINE         reduce using rule 17 (type -> LIST .)


state 92

    (18) type -> NAME .

    ASSIGN          reduce using rule 18 (type -> NAME .)
    RPAR            reduce using rule 18 (type -> NAME .)
    COMMA           reduce using rule 18 (type -> NAME .)
    NEWLINE         reduce using rule 18 (type -> NAME .)


state 93

    (101) testlist_multi -> testlist_multi COMMA test .

    COMMA           reduce using rule 101 (testlist_multi -> testlist_multi COMMA test .)
    ASSIGN          reduce using rule 101 (testlist_multi -> testlist_multi COMMA test .)
    COLON           reduce using rule 101 (testlist_multi -> testlist_multi COMMA test .)
    NEWLINE         reduce using rule 101 (testlist_multi -> testlist_multi COMMA test .)
    SEMICOLON       reduce using rule 101 (testlist_multi -> testlist_multi COMMA test .)


state 94

    (71) comparison -> comparison PLUS comparison .
    (71) comparison -> comparison . PLUS comparison
    (72) comparison -> comparison . MINUS comparison
    (73) comparison -> comparison . MULT comparison
    (74) comparison -> comparison . DIV comparison
    (75) comparison -> comparison . MOD comparison
    (76) comparison -> comparison . POTENCIA comparison
    (78) comparison -> comparison . NEQ comparison
    (79) comparison -> comparison . EQ comparison
    (80) comparison -> comparison . LT comparison
    (81) comparison -> comparison . GT comparison
    (82) comparison -> comparison . LEQ comparison
    (83) comparison -> comparison . GEQ comparison
    (84) comparison -> comparison . AND comparison
    (85) comparison -> comparison . OR comparison

    PLUS            reduce using rule 71 (comparison -> comparison PLUS comparison .)
    MINUS           reduce using rule 71 (comparison -> comparison PLUS comparison .)
    NEQ             reduce using rule 71 (comparison -> comparison PLUS comparison .)
    EQ              reduce using rule 71 (comparison -> comparison PLUS comparison .)
    LT              reduce using rule 71 (comparison -> comparison PLUS comparison .)
    GT              reduce using rule 71 (comparison -> comparison PLUS comparison .)
    LEQ             reduce using rule 71 (comparison -> comparison PLUS comparison .)
    GEQ             reduce using rule 71 (comparison -> comparison PLUS comparison .)
    AND             reduce using rule 71 (comparison -> comparison PLUS comparison .)
    OR              reduce using rule 71 (comparison -> comparison PLUS comparison .)
    COMMA           reduce using rule 71 (comparison -> comparison PLUS comparison .)
    ASSIGN          reduce using rule 71 (comparison -> comparison PLUS comparison .)
    COLON           reduce using rule 71 (comparison -> comparison PLUS comparison .)
    NEWLINE         reduce using rule 71 (comparison -> comparison PLUS comparison .)
    SEMICOLON       reduce using rule 71 (comparison -> comparison PLUS comparison .)
    RPAR            reduce using rule 71 (comparison -> comparison PLUS comparison .)
    RBRA            reduce using rule 71 (comparison -> comparison PLUS comparison .)
    MULT            shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    POTENCIA        shift and go to state 59

  ! MULT            [ reduce using rule 71 (comparison -> comparison PLUS comparison .) ]
  ! DIV             [ reduce using rule 71 (comparison -> comparison PLUS comparison .) ]
  ! MOD             [ reduce using rule 71 (comparison -> comparison PLUS comparison .) ]
  ! POTENCIA        [ reduce using rule 71 (comparison -> comparison PLUS comparison .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! NEQ             [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]
  ! LT              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! LEQ             [ shift and go to state 64 ]
  ! GEQ             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 95

    (72) comparison -> comparison MINUS comparison .
    (71) comparison -> comparison . PLUS comparison
    (72) comparison -> comparison . MINUS comparison
    (73) comparison -> comparison . MULT comparison
    (74) comparison -> comparison . DIV comparison
    (75) comparison -> comparison . MOD comparison
    (76) comparison -> comparison . POTENCIA comparison
    (78) comparison -> comparison . NEQ comparison
    (79) comparison -> comparison . EQ comparison
    (80) comparison -> comparison . LT comparison
    (81) comparison -> comparison . GT comparison
    (82) comparison -> comparison . LEQ comparison
    (83) comparison -> comparison . GEQ comparison
    (84) comparison -> comparison . AND comparison
    (85) comparison -> comparison . OR comparison

    PLUS            reduce using rule 72 (comparison -> comparison MINUS comparison .)
    MINUS           reduce using rule 72 (comparison -> comparison MINUS comparison .)
    NEQ             reduce using rule 72 (comparison -> comparison MINUS comparison .)
    EQ              reduce using rule 72 (comparison -> comparison MINUS comparison .)
    LT              reduce using rule 72 (comparison -> comparison MINUS comparison .)
    GT              reduce using rule 72 (comparison -> comparison MINUS comparison .)
    LEQ             reduce using rule 72 (comparison -> comparison MINUS comparison .)
    GEQ             reduce using rule 72 (comparison -> comparison MINUS comparison .)
    AND             reduce using rule 72 (comparison -> comparison MINUS comparison .)
    OR              reduce using rule 72 (comparison -> comparison MINUS comparison .)
    COMMA           reduce using rule 72 (comparison -> comparison MINUS comparison .)
    ASSIGN          reduce using rule 72 (comparison -> comparison MINUS comparison .)
    COLON           reduce using rule 72 (comparison -> comparison MINUS comparison .)
    NEWLINE         reduce using rule 72 (comparison -> comparison MINUS comparison .)
    SEMICOLON       reduce using rule 72 (comparison -> comparison MINUS comparison .)
    RPAR            reduce using rule 72 (comparison -> comparison MINUS comparison .)
    RBRA            reduce using rule 72 (comparison -> comparison MINUS comparison .)
    MULT            shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    POTENCIA        shift and go to state 59

  ! MULT            [ reduce using rule 72 (comparison -> comparison MINUS comparison .) ]
  ! DIV             [ reduce using rule 72 (comparison -> comparison MINUS comparison .) ]
  ! MOD             [ reduce using rule 72 (comparison -> comparison MINUS comparison .) ]
  ! POTENCIA        [ reduce using rule 72 (comparison -> comparison MINUS comparison .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! NEQ             [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]
  ! LT              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! LEQ             [ shift and go to state 64 ]
  ! GEQ             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 96

    (73) comparison -> comparison MULT comparison .
    (71) comparison -> comparison . PLUS comparison
    (72) comparison -> comparison . MINUS comparison
    (73) comparison -> comparison . MULT comparison
    (74) comparison -> comparison . DIV comparison
    (75) comparison -> comparison . MOD comparison
    (76) comparison -> comparison . POTENCIA comparison
    (78) comparison -> comparison . NEQ comparison
    (79) comparison -> comparison . EQ comparison
    (80) comparison -> comparison . LT comparison
    (81) comparison -> comparison . GT comparison
    (82) comparison -> comparison . LEQ comparison
    (83) comparison -> comparison . GEQ comparison
    (84) comparison -> comparison . AND comparison
    (85) comparison -> comparison . OR comparison

    PLUS            reduce using rule 73 (comparison -> comparison MULT comparison .)
    MINUS           reduce using rule 73 (comparison -> comparison MULT comparison .)
    MULT            reduce using rule 73 (comparison -> comparison MULT comparison .)
    DIV             reduce using rule 73 (comparison -> comparison MULT comparison .)
    MOD             reduce using rule 73 (comparison -> comparison MULT comparison .)
    NEQ             reduce using rule 73 (comparison -> comparison MULT comparison .)
    EQ              reduce using rule 73 (comparison -> comparison MULT comparison .)
    LT              reduce using rule 73 (comparison -> comparison MULT comparison .)
    GT              reduce using rule 73 (comparison -> comparison MULT comparison .)
    LEQ             reduce using rule 73 (comparison -> comparison MULT comparison .)
    GEQ             reduce using rule 73 (comparison -> comparison MULT comparison .)
    AND             reduce using rule 73 (comparison -> comparison MULT comparison .)
    OR              reduce using rule 73 (comparison -> comparison MULT comparison .)
    COMMA           reduce using rule 73 (comparison -> comparison MULT comparison .)
    ASSIGN          reduce using rule 73 (comparison -> comparison MULT comparison .)
    COLON           reduce using rule 73 (comparison -> comparison MULT comparison .)
    NEWLINE         reduce using rule 73 (comparison -> comparison MULT comparison .)
    SEMICOLON       reduce using rule 73 (comparison -> comparison MULT comparison .)
    RPAR            reduce using rule 73 (comparison -> comparison MULT comparison .)
    RBRA            reduce using rule 73 (comparison -> comparison MULT comparison .)
    POTENCIA        shift and go to state 59

  ! POTENCIA        [ reduce using rule 73 (comparison -> comparison MULT comparison .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! MULT            [ shift and go to state 56 ]
  ! DIV             [ shift and go to state 57 ]
  ! MOD             [ shift and go to state 58 ]
  ! NEQ             [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]
  ! LT              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! LEQ             [ shift and go to state 64 ]
  ! GEQ             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 97

    (74) comparison -> comparison DIV comparison .
    (71) comparison -> comparison . PLUS comparison
    (72) comparison -> comparison . MINUS comparison
    (73) comparison -> comparison . MULT comparison
    (74) comparison -> comparison . DIV comparison
    (75) comparison -> comparison . MOD comparison
    (76) comparison -> comparison . POTENCIA comparison
    (78) comparison -> comparison . NEQ comparison
    (79) comparison -> comparison . EQ comparison
    (80) comparison -> comparison . LT comparison
    (81) comparison -> comparison . GT comparison
    (82) comparison -> comparison . LEQ comparison
    (83) comparison -> comparison . GEQ comparison
    (84) comparison -> comparison . AND comparison
    (85) comparison -> comparison . OR comparison

    PLUS            reduce using rule 74 (comparison -> comparison DIV comparison .)
    MINUS           reduce using rule 74 (comparison -> comparison DIV comparison .)
    MULT            reduce using rule 74 (comparison -> comparison DIV comparison .)
    DIV             reduce using rule 74 (comparison -> comparison DIV comparison .)
    MOD             reduce using rule 74 (comparison -> comparison DIV comparison .)
    NEQ             reduce using rule 74 (comparison -> comparison DIV comparison .)
    EQ              reduce using rule 74 (comparison -> comparison DIV comparison .)
    LT              reduce using rule 74 (comparison -> comparison DIV comparison .)
    GT              reduce using rule 74 (comparison -> comparison DIV comparison .)
    LEQ             reduce using rule 74 (comparison -> comparison DIV comparison .)
    GEQ             reduce using rule 74 (comparison -> comparison DIV comparison .)
    AND             reduce using rule 74 (comparison -> comparison DIV comparison .)
    OR              reduce using rule 74 (comparison -> comparison DIV comparison .)
    COMMA           reduce using rule 74 (comparison -> comparison DIV comparison .)
    ASSIGN          reduce using rule 74 (comparison -> comparison DIV comparison .)
    COLON           reduce using rule 74 (comparison -> comparison DIV comparison .)
    NEWLINE         reduce using rule 74 (comparison -> comparison DIV comparison .)
    SEMICOLON       reduce using rule 74 (comparison -> comparison DIV comparison .)
    RPAR            reduce using rule 74 (comparison -> comparison DIV comparison .)
    RBRA            reduce using rule 74 (comparison -> comparison DIV comparison .)
    POTENCIA        shift and go to state 59

  ! POTENCIA        [ reduce using rule 74 (comparison -> comparison DIV comparison .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! MULT            [ shift and go to state 56 ]
  ! DIV             [ shift and go to state 57 ]
  ! MOD             [ shift and go to state 58 ]
  ! NEQ             [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]
  ! LT              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! LEQ             [ shift and go to state 64 ]
  ! GEQ             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 98

    (75) comparison -> comparison MOD comparison .
    (71) comparison -> comparison . PLUS comparison
    (72) comparison -> comparison . MINUS comparison
    (73) comparison -> comparison . MULT comparison
    (74) comparison -> comparison . DIV comparison
    (75) comparison -> comparison . MOD comparison
    (76) comparison -> comparison . POTENCIA comparison
    (78) comparison -> comparison . NEQ comparison
    (79) comparison -> comparison . EQ comparison
    (80) comparison -> comparison . LT comparison
    (81) comparison -> comparison . GT comparison
    (82) comparison -> comparison . LEQ comparison
    (83) comparison -> comparison . GEQ comparison
    (84) comparison -> comparison . AND comparison
    (85) comparison -> comparison . OR comparison

    PLUS            reduce using rule 75 (comparison -> comparison MOD comparison .)
    MINUS           reduce using rule 75 (comparison -> comparison MOD comparison .)
    MULT            reduce using rule 75 (comparison -> comparison MOD comparison .)
    DIV             reduce using rule 75 (comparison -> comparison MOD comparison .)
    MOD             reduce using rule 75 (comparison -> comparison MOD comparison .)
    NEQ             reduce using rule 75 (comparison -> comparison MOD comparison .)
    EQ              reduce using rule 75 (comparison -> comparison MOD comparison .)
    LT              reduce using rule 75 (comparison -> comparison MOD comparison .)
    GT              reduce using rule 75 (comparison -> comparison MOD comparison .)
    LEQ             reduce using rule 75 (comparison -> comparison MOD comparison .)
    GEQ             reduce using rule 75 (comparison -> comparison MOD comparison .)
    AND             reduce using rule 75 (comparison -> comparison MOD comparison .)
    OR              reduce using rule 75 (comparison -> comparison MOD comparison .)
    COMMA           reduce using rule 75 (comparison -> comparison MOD comparison .)
    ASSIGN          reduce using rule 75 (comparison -> comparison MOD comparison .)
    COLON           reduce using rule 75 (comparison -> comparison MOD comparison .)
    NEWLINE         reduce using rule 75 (comparison -> comparison MOD comparison .)
    SEMICOLON       reduce using rule 75 (comparison -> comparison MOD comparison .)
    RPAR            reduce using rule 75 (comparison -> comparison MOD comparison .)
    RBRA            reduce using rule 75 (comparison -> comparison MOD comparison .)
    POTENCIA        shift and go to state 59

  ! POTENCIA        [ reduce using rule 75 (comparison -> comparison MOD comparison .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! MULT            [ shift and go to state 56 ]
  ! DIV             [ shift and go to state 57 ]
  ! MOD             [ shift and go to state 58 ]
  ! NEQ             [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]
  ! LT              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! LEQ             [ shift and go to state 64 ]
  ! GEQ             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 99

    (76) comparison -> comparison POTENCIA comparison .
    (71) comparison -> comparison . PLUS comparison
    (72) comparison -> comparison . MINUS comparison
    (73) comparison -> comparison . MULT comparison
    (74) comparison -> comparison . DIV comparison
    (75) comparison -> comparison . MOD comparison
    (76) comparison -> comparison . POTENCIA comparison
    (78) comparison -> comparison . NEQ comparison
    (79) comparison -> comparison . EQ comparison
    (80) comparison -> comparison . LT comparison
    (81) comparison -> comparison . GT comparison
    (82) comparison -> comparison . LEQ comparison
    (83) comparison -> comparison . GEQ comparison
    (84) comparison -> comparison . AND comparison
    (85) comparison -> comparison . OR comparison

    PLUS            reduce using rule 76 (comparison -> comparison POTENCIA comparison .)
    MINUS           reduce using rule 76 (comparison -> comparison POTENCIA comparison .)
    MULT            reduce using rule 76 (comparison -> comparison POTENCIA comparison .)
    DIV             reduce using rule 76 (comparison -> comparison POTENCIA comparison .)
    MOD             reduce using rule 76 (comparison -> comparison POTENCIA comparison .)
    NEQ             reduce using rule 76 (comparison -> comparison POTENCIA comparison .)
    EQ              reduce using rule 76 (comparison -> comparison POTENCIA comparison .)
    LT              reduce using rule 76 (comparison -> comparison POTENCIA comparison .)
    GT              reduce using rule 76 (comparison -> comparison POTENCIA comparison .)
    LEQ             reduce using rule 76 (comparison -> comparison POTENCIA comparison .)
    GEQ             reduce using rule 76 (comparison -> comparison POTENCIA comparison .)
    AND             reduce using rule 76 (comparison -> comparison POTENCIA comparison .)
    OR              reduce using rule 76 (comparison -> comparison POTENCIA comparison .)
    COMMA           reduce using rule 76 (comparison -> comparison POTENCIA comparison .)
    ASSIGN          reduce using rule 76 (comparison -> comparison POTENCIA comparison .)
    COLON           reduce using rule 76 (comparison -> comparison POTENCIA comparison .)
    NEWLINE         reduce using rule 76 (comparison -> comparison POTENCIA comparison .)
    SEMICOLON       reduce using rule 76 (comparison -> comparison POTENCIA comparison .)
    RPAR            reduce using rule 76 (comparison -> comparison POTENCIA comparison .)
    RBRA            reduce using rule 76 (comparison -> comparison POTENCIA comparison .)
    POTENCIA        shift and go to state 59

  ! POTENCIA        [ reduce using rule 76 (comparison -> comparison POTENCIA comparison .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! MULT            [ shift and go to state 56 ]
  ! DIV             [ shift and go to state 57 ]
  ! MOD             [ shift and go to state 58 ]
  ! NEQ             [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]
  ! LT              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! LEQ             [ shift and go to state 64 ]
  ! GEQ             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 100

    (78) comparison -> comparison NEQ comparison .
    (71) comparison -> comparison . PLUS comparison
    (72) comparison -> comparison . MINUS comparison
    (73) comparison -> comparison . MULT comparison
    (74) comparison -> comparison . DIV comparison
    (75) comparison -> comparison . MOD comparison
    (76) comparison -> comparison . POTENCIA comparison
    (78) comparison -> comparison . NEQ comparison
    (79) comparison -> comparison . EQ comparison
    (80) comparison -> comparison . LT comparison
    (81) comparison -> comparison . GT comparison
    (82) comparison -> comparison . LEQ comparison
    (83) comparison -> comparison . GEQ comparison
    (84) comparison -> comparison . AND comparison
    (85) comparison -> comparison . OR comparison

    NEQ             reduce using rule 78 (comparison -> comparison NEQ comparison .)
    EQ              reduce using rule 78 (comparison -> comparison NEQ comparison .)
    LT              reduce using rule 78 (comparison -> comparison NEQ comparison .)
    GT              reduce using rule 78 (comparison -> comparison NEQ comparison .)
    LEQ             reduce using rule 78 (comparison -> comparison NEQ comparison .)
    GEQ             reduce using rule 78 (comparison -> comparison NEQ comparison .)
    AND             reduce using rule 78 (comparison -> comparison NEQ comparison .)
    OR              reduce using rule 78 (comparison -> comparison NEQ comparison .)
    COMMA           reduce using rule 78 (comparison -> comparison NEQ comparison .)
    ASSIGN          reduce using rule 78 (comparison -> comparison NEQ comparison .)
    COLON           reduce using rule 78 (comparison -> comparison NEQ comparison .)
    NEWLINE         reduce using rule 78 (comparison -> comparison NEQ comparison .)
    SEMICOLON       reduce using rule 78 (comparison -> comparison NEQ comparison .)
    RPAR            reduce using rule 78 (comparison -> comparison NEQ comparison .)
    RBRA            reduce using rule 78 (comparison -> comparison NEQ comparison .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULT            shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    POTENCIA        shift and go to state 59

  ! PLUS            [ reduce using rule 78 (comparison -> comparison NEQ comparison .) ]
  ! MINUS           [ reduce using rule 78 (comparison -> comparison NEQ comparison .) ]
  ! MULT            [ reduce using rule 78 (comparison -> comparison NEQ comparison .) ]
  ! DIV             [ reduce using rule 78 (comparison -> comparison NEQ comparison .) ]
  ! MOD             [ reduce using rule 78 (comparison -> comparison NEQ comparison .) ]
  ! POTENCIA        [ reduce using rule 78 (comparison -> comparison NEQ comparison .) ]
  ! NEQ             [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]
  ! LT              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! LEQ             [ shift and go to state 64 ]
  ! GEQ             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 101

    (79) comparison -> comparison EQ comparison .
    (71) comparison -> comparison . PLUS comparison
    (72) comparison -> comparison . MINUS comparison
    (73) comparison -> comparison . MULT comparison
    (74) comparison -> comparison . DIV comparison
    (75) comparison -> comparison . MOD comparison
    (76) comparison -> comparison . POTENCIA comparison
    (78) comparison -> comparison . NEQ comparison
    (79) comparison -> comparison . EQ comparison
    (80) comparison -> comparison . LT comparison
    (81) comparison -> comparison . GT comparison
    (82) comparison -> comparison . LEQ comparison
    (83) comparison -> comparison . GEQ comparison
    (84) comparison -> comparison . AND comparison
    (85) comparison -> comparison . OR comparison

    NEQ             reduce using rule 79 (comparison -> comparison EQ comparison .)
    EQ              reduce using rule 79 (comparison -> comparison EQ comparison .)
    LT              reduce using rule 79 (comparison -> comparison EQ comparison .)
    GT              reduce using rule 79 (comparison -> comparison EQ comparison .)
    LEQ             reduce using rule 79 (comparison -> comparison EQ comparison .)
    GEQ             reduce using rule 79 (comparison -> comparison EQ comparison .)
    AND             reduce using rule 79 (comparison -> comparison EQ comparison .)
    OR              reduce using rule 79 (comparison -> comparison EQ comparison .)
    COMMA           reduce using rule 79 (comparison -> comparison EQ comparison .)
    ASSIGN          reduce using rule 79 (comparison -> comparison EQ comparison .)
    COLON           reduce using rule 79 (comparison -> comparison EQ comparison .)
    NEWLINE         reduce using rule 79 (comparison -> comparison EQ comparison .)
    SEMICOLON       reduce using rule 79 (comparison -> comparison EQ comparison .)
    RPAR            reduce using rule 79 (comparison -> comparison EQ comparison .)
    RBRA            reduce using rule 79 (comparison -> comparison EQ comparison .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULT            shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    POTENCIA        shift and go to state 59

  ! PLUS            [ reduce using rule 79 (comparison -> comparison EQ comparison .) ]
  ! MINUS           [ reduce using rule 79 (comparison -> comparison EQ comparison .) ]
  ! MULT            [ reduce using rule 79 (comparison -> comparison EQ comparison .) ]
  ! DIV             [ reduce using rule 79 (comparison -> comparison EQ comparison .) ]
  ! MOD             [ reduce using rule 79 (comparison -> comparison EQ comparison .) ]
  ! POTENCIA        [ reduce using rule 79 (comparison -> comparison EQ comparison .) ]
  ! NEQ             [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]
  ! LT              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! LEQ             [ shift and go to state 64 ]
  ! GEQ             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 102

    (80) comparison -> comparison LT comparison .
    (71) comparison -> comparison . PLUS comparison
    (72) comparison -> comparison . MINUS comparison
    (73) comparison -> comparison . MULT comparison
    (74) comparison -> comparison . DIV comparison
    (75) comparison -> comparison . MOD comparison
    (76) comparison -> comparison . POTENCIA comparison
    (78) comparison -> comparison . NEQ comparison
    (79) comparison -> comparison . EQ comparison
    (80) comparison -> comparison . LT comparison
    (81) comparison -> comparison . GT comparison
    (82) comparison -> comparison . LEQ comparison
    (83) comparison -> comparison . GEQ comparison
    (84) comparison -> comparison . AND comparison
    (85) comparison -> comparison . OR comparison

    LT              reduce using rule 80 (comparison -> comparison LT comparison .)
    GT              reduce using rule 80 (comparison -> comparison LT comparison .)
    LEQ             reduce using rule 80 (comparison -> comparison LT comparison .)
    GEQ             reduce using rule 80 (comparison -> comparison LT comparison .)
    AND             reduce using rule 80 (comparison -> comparison LT comparison .)
    OR              reduce using rule 80 (comparison -> comparison LT comparison .)
    COMMA           reduce using rule 80 (comparison -> comparison LT comparison .)
    ASSIGN          reduce using rule 80 (comparison -> comparison LT comparison .)
    COLON           reduce using rule 80 (comparison -> comparison LT comparison .)
    NEWLINE         reduce using rule 80 (comparison -> comparison LT comparison .)
    SEMICOLON       reduce using rule 80 (comparison -> comparison LT comparison .)
    RPAR            reduce using rule 80 (comparison -> comparison LT comparison .)
    RBRA            reduce using rule 80 (comparison -> comparison LT comparison .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULT            shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    POTENCIA        shift and go to state 59
    NEQ             shift and go to state 60
    EQ              shift and go to state 61

  ! PLUS            [ reduce using rule 80 (comparison -> comparison LT comparison .) ]
  ! MINUS           [ reduce using rule 80 (comparison -> comparison LT comparison .) ]
  ! MULT            [ reduce using rule 80 (comparison -> comparison LT comparison .) ]
  ! DIV             [ reduce using rule 80 (comparison -> comparison LT comparison .) ]
  ! MOD             [ reduce using rule 80 (comparison -> comparison LT comparison .) ]
  ! POTENCIA        [ reduce using rule 80 (comparison -> comparison LT comparison .) ]
  ! NEQ             [ reduce using rule 80 (comparison -> comparison LT comparison .) ]
  ! EQ              [ reduce using rule 80 (comparison -> comparison LT comparison .) ]
  ! LT              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! LEQ             [ shift and go to state 64 ]
  ! GEQ             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 103

    (81) comparison -> comparison GT comparison .
    (71) comparison -> comparison . PLUS comparison
    (72) comparison -> comparison . MINUS comparison
    (73) comparison -> comparison . MULT comparison
    (74) comparison -> comparison . DIV comparison
    (75) comparison -> comparison . MOD comparison
    (76) comparison -> comparison . POTENCIA comparison
    (78) comparison -> comparison . NEQ comparison
    (79) comparison -> comparison . EQ comparison
    (80) comparison -> comparison . LT comparison
    (81) comparison -> comparison . GT comparison
    (82) comparison -> comparison . LEQ comparison
    (83) comparison -> comparison . GEQ comparison
    (84) comparison -> comparison . AND comparison
    (85) comparison -> comparison . OR comparison

    LT              reduce using rule 81 (comparison -> comparison GT comparison .)
    GT              reduce using rule 81 (comparison -> comparison GT comparison .)
    LEQ             reduce using rule 81 (comparison -> comparison GT comparison .)
    GEQ             reduce using rule 81 (comparison -> comparison GT comparison .)
    AND             reduce using rule 81 (comparison -> comparison GT comparison .)
    OR              reduce using rule 81 (comparison -> comparison GT comparison .)
    COMMA           reduce using rule 81 (comparison -> comparison GT comparison .)
    ASSIGN          reduce using rule 81 (comparison -> comparison GT comparison .)
    COLON           reduce using rule 81 (comparison -> comparison GT comparison .)
    NEWLINE         reduce using rule 81 (comparison -> comparison GT comparison .)
    SEMICOLON       reduce using rule 81 (comparison -> comparison GT comparison .)
    RPAR            reduce using rule 81 (comparison -> comparison GT comparison .)
    RBRA            reduce using rule 81 (comparison -> comparison GT comparison .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULT            shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    POTENCIA        shift and go to state 59
    NEQ             shift and go to state 60
    EQ              shift and go to state 61

  ! PLUS            [ reduce using rule 81 (comparison -> comparison GT comparison .) ]
  ! MINUS           [ reduce using rule 81 (comparison -> comparison GT comparison .) ]
  ! MULT            [ reduce using rule 81 (comparison -> comparison GT comparison .) ]
  ! DIV             [ reduce using rule 81 (comparison -> comparison GT comparison .) ]
  ! MOD             [ reduce using rule 81 (comparison -> comparison GT comparison .) ]
  ! POTENCIA        [ reduce using rule 81 (comparison -> comparison GT comparison .) ]
  ! NEQ             [ reduce using rule 81 (comparison -> comparison GT comparison .) ]
  ! EQ              [ reduce using rule 81 (comparison -> comparison GT comparison .) ]
  ! LT              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! LEQ             [ shift and go to state 64 ]
  ! GEQ             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 104

    (82) comparison -> comparison LEQ comparison .
    (71) comparison -> comparison . PLUS comparison
    (72) comparison -> comparison . MINUS comparison
    (73) comparison -> comparison . MULT comparison
    (74) comparison -> comparison . DIV comparison
    (75) comparison -> comparison . MOD comparison
    (76) comparison -> comparison . POTENCIA comparison
    (78) comparison -> comparison . NEQ comparison
    (79) comparison -> comparison . EQ comparison
    (80) comparison -> comparison . LT comparison
    (81) comparison -> comparison . GT comparison
    (82) comparison -> comparison . LEQ comparison
    (83) comparison -> comparison . GEQ comparison
    (84) comparison -> comparison . AND comparison
    (85) comparison -> comparison . OR comparison

    LT              reduce using rule 82 (comparison -> comparison LEQ comparison .)
    GT              reduce using rule 82 (comparison -> comparison LEQ comparison .)
    LEQ             reduce using rule 82 (comparison -> comparison LEQ comparison .)
    GEQ             reduce using rule 82 (comparison -> comparison LEQ comparison .)
    AND             reduce using rule 82 (comparison -> comparison LEQ comparison .)
    OR              reduce using rule 82 (comparison -> comparison LEQ comparison .)
    COMMA           reduce using rule 82 (comparison -> comparison LEQ comparison .)
    ASSIGN          reduce using rule 82 (comparison -> comparison LEQ comparison .)
    COLON           reduce using rule 82 (comparison -> comparison LEQ comparison .)
    NEWLINE         reduce using rule 82 (comparison -> comparison LEQ comparison .)
    SEMICOLON       reduce using rule 82 (comparison -> comparison LEQ comparison .)
    RPAR            reduce using rule 82 (comparison -> comparison LEQ comparison .)
    RBRA            reduce using rule 82 (comparison -> comparison LEQ comparison .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULT            shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    POTENCIA        shift and go to state 59
    NEQ             shift and go to state 60
    EQ              shift and go to state 61

  ! PLUS            [ reduce using rule 82 (comparison -> comparison LEQ comparison .) ]
  ! MINUS           [ reduce using rule 82 (comparison -> comparison LEQ comparison .) ]
  ! MULT            [ reduce using rule 82 (comparison -> comparison LEQ comparison .) ]
  ! DIV             [ reduce using rule 82 (comparison -> comparison LEQ comparison .) ]
  ! MOD             [ reduce using rule 82 (comparison -> comparison LEQ comparison .) ]
  ! POTENCIA        [ reduce using rule 82 (comparison -> comparison LEQ comparison .) ]
  ! NEQ             [ reduce using rule 82 (comparison -> comparison LEQ comparison .) ]
  ! EQ              [ reduce using rule 82 (comparison -> comparison LEQ comparison .) ]
  ! LT              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! LEQ             [ shift and go to state 64 ]
  ! GEQ             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 105

    (83) comparison -> comparison GEQ comparison .
    (71) comparison -> comparison . PLUS comparison
    (72) comparison -> comparison . MINUS comparison
    (73) comparison -> comparison . MULT comparison
    (74) comparison -> comparison . DIV comparison
    (75) comparison -> comparison . MOD comparison
    (76) comparison -> comparison . POTENCIA comparison
    (78) comparison -> comparison . NEQ comparison
    (79) comparison -> comparison . EQ comparison
    (80) comparison -> comparison . LT comparison
    (81) comparison -> comparison . GT comparison
    (82) comparison -> comparison . LEQ comparison
    (83) comparison -> comparison . GEQ comparison
    (84) comparison -> comparison . AND comparison
    (85) comparison -> comparison . OR comparison

    LT              reduce using rule 83 (comparison -> comparison GEQ comparison .)
    GT              reduce using rule 83 (comparison -> comparison GEQ comparison .)
    LEQ             reduce using rule 83 (comparison -> comparison GEQ comparison .)
    GEQ             reduce using rule 83 (comparison -> comparison GEQ comparison .)
    AND             reduce using rule 83 (comparison -> comparison GEQ comparison .)
    OR              reduce using rule 83 (comparison -> comparison GEQ comparison .)
    COMMA           reduce using rule 83 (comparison -> comparison GEQ comparison .)
    ASSIGN          reduce using rule 83 (comparison -> comparison GEQ comparison .)
    COLON           reduce using rule 83 (comparison -> comparison GEQ comparison .)
    NEWLINE         reduce using rule 83 (comparison -> comparison GEQ comparison .)
    SEMICOLON       reduce using rule 83 (comparison -> comparison GEQ comparison .)
    RPAR            reduce using rule 83 (comparison -> comparison GEQ comparison .)
    RBRA            reduce using rule 83 (comparison -> comparison GEQ comparison .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULT            shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    POTENCIA        shift and go to state 59
    NEQ             shift and go to state 60
    EQ              shift and go to state 61

  ! PLUS            [ reduce using rule 83 (comparison -> comparison GEQ comparison .) ]
  ! MINUS           [ reduce using rule 83 (comparison -> comparison GEQ comparison .) ]
  ! MULT            [ reduce using rule 83 (comparison -> comparison GEQ comparison .) ]
  ! DIV             [ reduce using rule 83 (comparison -> comparison GEQ comparison .) ]
  ! MOD             [ reduce using rule 83 (comparison -> comparison GEQ comparison .) ]
  ! POTENCIA        [ reduce using rule 83 (comparison -> comparison GEQ comparison .) ]
  ! NEQ             [ reduce using rule 83 (comparison -> comparison GEQ comparison .) ]
  ! EQ              [ reduce using rule 83 (comparison -> comparison GEQ comparison .) ]
  ! LT              [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! LEQ             [ shift and go to state 64 ]
  ! GEQ             [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 106

    (84) comparison -> comparison AND comparison .
    (71) comparison -> comparison . PLUS comparison
    (72) comparison -> comparison . MINUS comparison
    (73) comparison -> comparison . MULT comparison
    (74) comparison -> comparison . DIV comparison
    (75) comparison -> comparison . MOD comparison
    (76) comparison -> comparison . POTENCIA comparison
    (78) comparison -> comparison . NEQ comparison
    (79) comparison -> comparison . EQ comparison
    (80) comparison -> comparison . LT comparison
    (81) comparison -> comparison . GT comparison
    (82) comparison -> comparison . LEQ comparison
    (83) comparison -> comparison . GEQ comparison
    (84) comparison -> comparison . AND comparison
    (85) comparison -> comparison . OR comparison

    AND             reduce using rule 84 (comparison -> comparison AND comparison .)
    OR              reduce using rule 84 (comparison -> comparison AND comparison .)
    COMMA           reduce using rule 84 (comparison -> comparison AND comparison .)
    ASSIGN          reduce using rule 84 (comparison -> comparison AND comparison .)
    COLON           reduce using rule 84 (comparison -> comparison AND comparison .)
    NEWLINE         reduce using rule 84 (comparison -> comparison AND comparison .)
    SEMICOLON       reduce using rule 84 (comparison -> comparison AND comparison .)
    RPAR            reduce using rule 84 (comparison -> comparison AND comparison .)
    RBRA            reduce using rule 84 (comparison -> comparison AND comparison .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULT            shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    POTENCIA        shift and go to state 59
    NEQ             shift and go to state 60
    EQ              shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LEQ             shift and go to state 64
    GEQ             shift and go to state 65

  ! PLUS            [ reduce using rule 84 (comparison -> comparison AND comparison .) ]
  ! MINUS           [ reduce using rule 84 (comparison -> comparison AND comparison .) ]
  ! MULT            [ reduce using rule 84 (comparison -> comparison AND comparison .) ]
  ! DIV             [ reduce using rule 84 (comparison -> comparison AND comparison .) ]
  ! MOD             [ reduce using rule 84 (comparison -> comparison AND comparison .) ]
  ! POTENCIA        [ reduce using rule 84 (comparison -> comparison AND comparison .) ]
  ! NEQ             [ reduce using rule 84 (comparison -> comparison AND comparison .) ]
  ! EQ              [ reduce using rule 84 (comparison -> comparison AND comparison .) ]
  ! LT              [ reduce using rule 84 (comparison -> comparison AND comparison .) ]
  ! GT              [ reduce using rule 84 (comparison -> comparison AND comparison .) ]
  ! LEQ             [ reduce using rule 84 (comparison -> comparison AND comparison .) ]
  ! GEQ             [ reduce using rule 84 (comparison -> comparison AND comparison .) ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]


state 107

    (85) comparison -> comparison OR comparison .
    (71) comparison -> comparison . PLUS comparison
    (72) comparison -> comparison . MINUS comparison
    (73) comparison -> comparison . MULT comparison
    (74) comparison -> comparison . DIV comparison
    (75) comparison -> comparison . MOD comparison
    (76) comparison -> comparison . POTENCIA comparison
    (78) comparison -> comparison . NEQ comparison
    (79) comparison -> comparison . EQ comparison
    (80) comparison -> comparison . LT comparison
    (81) comparison -> comparison . GT comparison
    (82) comparison -> comparison . LEQ comparison
    (83) comparison -> comparison . GEQ comparison
    (84) comparison -> comparison . AND comparison
    (85) comparison -> comparison . OR comparison

    OR              reduce using rule 85 (comparison -> comparison OR comparison .)
    COMMA           reduce using rule 85 (comparison -> comparison OR comparison .)
    ASSIGN          reduce using rule 85 (comparison -> comparison OR comparison .)
    COLON           reduce using rule 85 (comparison -> comparison OR comparison .)
    NEWLINE         reduce using rule 85 (comparison -> comparison OR comparison .)
    SEMICOLON       reduce using rule 85 (comparison -> comparison OR comparison .)
    RPAR            reduce using rule 85 (comparison -> comparison OR comparison .)
    RBRA            reduce using rule 85 (comparison -> comparison OR comparison .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULT            shift and go to state 56
    DIV             shift and go to state 57
    MOD             shift and go to state 58
    POTENCIA        shift and go to state 59
    NEQ             shift and go to state 60
    EQ              shift and go to state 61
    LT              shift and go to state 62
    GT              shift and go to state 63
    LEQ             shift and go to state 64
    GEQ             shift and go to state 65
    AND             shift and go to state 66

  ! PLUS            [ reduce using rule 85 (comparison -> comparison OR comparison .) ]
  ! MINUS           [ reduce using rule 85 (comparison -> comparison OR comparison .) ]
  ! MULT            [ reduce using rule 85 (comparison -> comparison OR comparison .) ]
  ! DIV             [ reduce using rule 85 (comparison -> comparison OR comparison .) ]
  ! MOD             [ reduce using rule 85 (comparison -> comparison OR comparison .) ]
  ! POTENCIA        [ reduce using rule 85 (comparison -> comparison OR comparison .) ]
  ! NEQ             [ reduce using rule 85 (comparison -> comparison OR comparison .) ]
  ! EQ              [ reduce using rule 85 (comparison -> comparison OR comparison .) ]
  ! LT              [ reduce using rule 85 (comparison -> comparison OR comparison .) ]
  ! GT              [ reduce using rule 85 (comparison -> comparison OR comparison .) ]
  ! LEQ             [ reduce using rule 85 (comparison -> comparison OR comparison .) ]
  ! GEQ             [ reduce using rule 85 (comparison -> comparison OR comparison .) ]
  ! AND             [ reduce using rule 85 (comparison -> comparison OR comparison .) ]
  ! OR              [ shift and go to state 67 ]


state 108

    (87) comparison -> LPAR comparison RPAR .

    PLUS            reduce using rule 87 (comparison -> LPAR comparison RPAR .)
    MINUS           reduce using rule 87 (comparison -> LPAR comparison RPAR .)
    MULT            reduce using rule 87 (comparison -> LPAR comparison RPAR .)
    DIV             reduce using rule 87 (comparison -> LPAR comparison RPAR .)
    MOD             reduce using rule 87 (comparison -> LPAR comparison RPAR .)
    POTENCIA        reduce using rule 87 (comparison -> LPAR comparison RPAR .)
    NEQ             reduce using rule 87 (comparison -> LPAR comparison RPAR .)
    EQ              reduce using rule 87 (comparison -> LPAR comparison RPAR .)
    LT              reduce using rule 87 (comparison -> LPAR comparison RPAR .)
    GT              reduce using rule 87 (comparison -> LPAR comparison RPAR .)
    LEQ             reduce using rule 87 (comparison -> LPAR comparison RPAR .)
    GEQ             reduce using rule 87 (comparison -> LPAR comparison RPAR .)
    AND             reduce using rule 87 (comparison -> LPAR comparison RPAR .)
    OR              reduce using rule 87 (comparison -> LPAR comparison RPAR .)
    COMMA           reduce using rule 87 (comparison -> LPAR comparison RPAR .)
    ASSIGN          reduce using rule 87 (comparison -> LPAR comparison RPAR .)
    COLON           reduce using rule 87 (comparison -> LPAR comparison RPAR .)
    NEWLINE         reduce using rule 87 (comparison -> LPAR comparison RPAR .)
    SEMICOLON       reduce using rule 87 (comparison -> LPAR comparison RPAR .)
    RPAR            reduce using rule 87 (comparison -> LPAR comparison RPAR .)
    RBRA            reduce using rule 87 (comparison -> LPAR comparison RPAR .)


state 109

    (98) list_index -> list_index LBRA . test RBRA
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    test                           shift and go to state 133
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 110

    (96) trailer -> LPAR arglist . RPAR
    (104) arglist -> arglist . COMMA argument

    RPAR            shift and go to state 134
    COMMA           shift and go to state 135


state 111

    (105) arglist -> argument .

    RPAR            reduce using rule 105 (arglist -> argument .)
    COMMA           reduce using rule 105 (arglist -> argument .)


state 112

    (106) argument -> test .

    RPAR            reduce using rule 106 (argument -> test .)
    COMMA           reduce using rule 106 (argument -> test .)


state 113

    (97) list_index -> LBRA test . RBRA

    RBRA            shift and go to state 136


state 114

    (61) if_stmt -> IF test COLON suite .
    (62) if_stmt -> IF test COLON suite . ELSE COLON suite
    (63) if_stmt -> IF test COLON suite . else_if_list
    (64) else_if_list -> . ELIF test COLON suite
    (65) else_if_list -> . ELIF test COLON suite ELSE COLON suite
    (66) else_if_list -> . ELIF test COLON suite else_if_list

    ENDMARKER       reduce using rule 61 (if_stmt -> IF test COLON suite .)
    NEWLINE         reduce using rule 61 (if_stmt -> IF test COLON suite .)
    IF              reduce using rule 61 (if_stmt -> IF test COLON suite .)
    DEF             reduce using rule 61 (if_stmt -> IF test COLON suite .)
    WHILE           reduce using rule 61 (if_stmt -> IF test COLON suite .)
    FOR             reduce using rule 61 (if_stmt -> IF test COLON suite .)
    STRUCT          reduce using rule 61 (if_stmt -> IF test COLON suite .)
    RETURN          reduce using rule 61 (if_stmt -> IF test COLON suite .)
    CONTINUE        reduce using rule 61 (if_stmt -> IF test COLON suite .)
    BREAK           reduce using rule 61 (if_stmt -> IF test COLON suite .)
    MINUS           reduce using rule 61 (if_stmt -> IF test COLON suite .)
    NOT             reduce using rule 61 (if_stmt -> IF test COLON suite .)
    LPAR            reduce using rule 61 (if_stmt -> IF test COLON suite .)
    NAME            reduce using rule 61 (if_stmt -> IF test COLON suite .)
    NUMBER          reduce using rule 61 (if_stmt -> IF test COLON suite .)
    FLOAT           reduce using rule 61 (if_stmt -> IF test COLON suite .)
    STRING          reduce using rule 61 (if_stmt -> IF test COLON suite .)
    DEDENT          reduce using rule 61 (if_stmt -> IF test COLON suite .)
    ELSE            shift and go to state 137
    ELIF            shift and go to state 139

    else_if_list                   shift and go to state 138

state 115

    (67) suite -> simple_stmt .

    ELSE            reduce using rule 67 (suite -> simple_stmt .)
    ELIF            reduce using rule 67 (suite -> simple_stmt .)
    ENDMARKER       reduce using rule 67 (suite -> simple_stmt .)
    NEWLINE         reduce using rule 67 (suite -> simple_stmt .)
    IF              reduce using rule 67 (suite -> simple_stmt .)
    DEF             reduce using rule 67 (suite -> simple_stmt .)
    WHILE           reduce using rule 67 (suite -> simple_stmt .)
    FOR             reduce using rule 67 (suite -> simple_stmt .)
    STRUCT          reduce using rule 67 (suite -> simple_stmt .)
    RETURN          reduce using rule 67 (suite -> simple_stmt .)
    CONTINUE        reduce using rule 67 (suite -> simple_stmt .)
    BREAK           reduce using rule 67 (suite -> simple_stmt .)
    MINUS           reduce using rule 67 (suite -> simple_stmt .)
    NOT             reduce using rule 67 (suite -> simple_stmt .)
    LPAR            reduce using rule 67 (suite -> simple_stmt .)
    NAME            reduce using rule 67 (suite -> simple_stmt .)
    NUMBER          reduce using rule 67 (suite -> simple_stmt .)
    FLOAT           reduce using rule 67 (suite -> simple_stmt .)
    STRING          reduce using rule 67 (suite -> simple_stmt .)
    DEDENT          reduce using rule 67 (suite -> simple_stmt .)


state 116

    (68) suite -> NEWLINE . INDENT stmts DEDENT

    INDENT          shift and go to state 140


state 117

    (6) funcdef -> DEF NAME parameters COLON . suite
    (67) suite -> . simple_stmt
    (68) suite -> . NEWLINE INDENT stmts DEDENT
    (21) simple_stmt -> . small_stmts NEWLINE
    (22) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (23) small_stmts -> . small_stmts SEMICOLON small_stmt
    (24) small_stmts -> . small_stmt
    (25) small_stmt -> . flow_stmt
    (26) small_stmt -> . expr_stmt
    (37) flow_stmt -> . return_stmt
    (38) flow_stmt -> . continue_stmt
    (39) flow_stmt -> . break_stmt
    (27) expr_stmt -> . testlist ASSIGN testlist
    (28) expr_stmt -> . testlist COLON type ASSIGN testlist
    (29) expr_stmt -> . testlist ASSIGN list_def
    (30) expr_stmt -> . testlist COLON type ASSIGN list_def
    (31) expr_stmt -> . testlist
    (40) return_stmt -> . RETURN testlist
    (41) return_stmt -> . RETURN
    (42) continue_stmt -> . CONTINUE
    (43) break_stmt -> . BREAK
    (99) testlist -> . testlist_multi COMMA
    (100) testlist -> . testlist_multi
    (101) testlist_multi -> . testlist_multi COMMA test
    (102) testlist_multi -> . test
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    NEWLINE         shift and go to state 116
    RETURN          shift and go to state 27
    CONTINUE        shift and go to state 28
    BREAK           shift and go to state 29
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    suite                          shift and go to state 141
    simple_stmt                    shift and go to state 115
    small_stmts                    shift and go to state 7
    small_stmt                     shift and go to state 13
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    testlist_multi                 shift and go to state 30
    test                           shift and go to state 15
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 118

    (7) parameters -> LPAR RPAR .

    COLON           reduce using rule 7 (parameters -> LPAR RPAR .)


state 119

    (8) parameters -> LPAR varargslist . RPAR
    (9) varargslist -> varargslist . COMMA NAME COLON type
    (10) varargslist -> varargslist . COMMA NAME

    RPAR            shift and go to state 142
    COMMA           shift and go to state 143


state 120

    (11) varargslist -> NAME . COLON type
    (12) varargslist -> NAME .

    COLON           shift and go to state 144
    RPAR            reduce using rule 12 (varargslist -> NAME .)
    COMMA           reduce using rule 12 (varargslist -> NAME .)


state 121

    (49) while_loop -> WHILE test COLON suite .

    ENDMARKER       reduce using rule 49 (while_loop -> WHILE test COLON suite .)
    NEWLINE         reduce using rule 49 (while_loop -> WHILE test COLON suite .)
    IF              reduce using rule 49 (while_loop -> WHILE test COLON suite .)
    DEF             reduce using rule 49 (while_loop -> WHILE test COLON suite .)
    WHILE           reduce using rule 49 (while_loop -> WHILE test COLON suite .)
    FOR             reduce using rule 49 (while_loop -> WHILE test COLON suite .)
    STRUCT          reduce using rule 49 (while_loop -> WHILE test COLON suite .)
    RETURN          reduce using rule 49 (while_loop -> WHILE test COLON suite .)
    CONTINUE        reduce using rule 49 (while_loop -> WHILE test COLON suite .)
    BREAK           reduce using rule 49 (while_loop -> WHILE test COLON suite .)
    MINUS           reduce using rule 49 (while_loop -> WHILE test COLON suite .)
    NOT             reduce using rule 49 (while_loop -> WHILE test COLON suite .)
    LPAR            reduce using rule 49 (while_loop -> WHILE test COLON suite .)
    NAME            reduce using rule 49 (while_loop -> WHILE test COLON suite .)
    NUMBER          reduce using rule 49 (while_loop -> WHILE test COLON suite .)
    FLOAT           reduce using rule 49 (while_loop -> WHILE test COLON suite .)
    STRING          reduce using rule 49 (while_loop -> WHILE test COLON suite .)
    DEDENT          reduce using rule 49 (while_loop -> WHILE test COLON suite .)


state 122

    (53) range -> NAME .
    (92) atom -> NAME .

    COLON           reduce using rule 53 (range -> NAME .)
    LPAR            reduce using rule 92 (atom -> NAME .)


state 123

    (50) for_loop -> FOR NAME IN range . COLON suite

    COLON           shift and go to state 145


state 124

    (51) range -> STRING .
    (95) atom -> STRING .

    COLON           reduce using rule 51 (range -> STRING .)
    LPAR            reduce using rule 95 (atom -> STRING .)


state 125

    (52) range -> list_def .

    COLON           reduce using rule 52 (range -> list_def .)


state 126

    (54) range -> atom . trailer
    (96) trailer -> . LPAR arglist RPAR

    LPAR            shift and go to state 73

    trailer                        shift and go to state 146

state 127

    (55) struct_def -> STRUCT NAME COLON struct_body .

    ENDMARKER       reduce using rule 55 (struct_def -> STRUCT NAME COLON struct_body .)
    NEWLINE         reduce using rule 55 (struct_def -> STRUCT NAME COLON struct_body .)
    IF              reduce using rule 55 (struct_def -> STRUCT NAME COLON struct_body .)
    DEF             reduce using rule 55 (struct_def -> STRUCT NAME COLON struct_body .)
    WHILE           reduce using rule 55 (struct_def -> STRUCT NAME COLON struct_body .)
    FOR             reduce using rule 55 (struct_def -> STRUCT NAME COLON struct_body .)
    STRUCT          reduce using rule 55 (struct_def -> STRUCT NAME COLON struct_body .)
    RETURN          reduce using rule 55 (struct_def -> STRUCT NAME COLON struct_body .)
    CONTINUE        reduce using rule 55 (struct_def -> STRUCT NAME COLON struct_body .)
    BREAK           reduce using rule 55 (struct_def -> STRUCT NAME COLON struct_body .)
    MINUS           reduce using rule 55 (struct_def -> STRUCT NAME COLON struct_body .)
    NOT             reduce using rule 55 (struct_def -> STRUCT NAME COLON struct_body .)
    LPAR            reduce using rule 55 (struct_def -> STRUCT NAME COLON struct_body .)
    NAME            reduce using rule 55 (struct_def -> STRUCT NAME COLON struct_body .)
    NUMBER          reduce using rule 55 (struct_def -> STRUCT NAME COLON struct_body .)
    FLOAT           reduce using rule 55 (struct_def -> STRUCT NAME COLON struct_body .)
    STRING          reduce using rule 55 (struct_def -> STRUCT NAME COLON struct_body .)
    DEDENT          reduce using rule 55 (struct_def -> STRUCT NAME COLON struct_body .)


state 128

    (56) struct_body -> NEWLINE . INDENT struct_fields DEDENT

    INDENT          shift and go to state 147


state 129

    (32) list_def -> LBRA list_elem . RBRA
    (33) list_elem -> list_elem . COMMA test
    (34) list_elem -> list_elem . COMMA list_def

    RBRA            shift and go to state 148
    COMMA           shift and go to state 149


state 130

    (35) list_elem -> test .

    RBRA            reduce using rule 35 (list_elem -> test .)
    COMMA           reduce using rule 35 (list_elem -> test .)


state 131

    (36) list_elem -> list_def .

    RBRA            reduce using rule 36 (list_elem -> list_def .)
    COMMA           reduce using rule 36 (list_elem -> list_def .)


state 132

    (28) expr_stmt -> testlist COLON type ASSIGN . testlist
    (30) expr_stmt -> testlist COLON type ASSIGN . list_def
    (99) testlist -> . testlist_multi COMMA
    (100) testlist -> . testlist_multi
    (32) list_def -> . LBRA list_elem RBRA
    (101) testlist_multi -> . testlist_multi COMMA test
    (102) testlist_multi -> . test
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    LBRA            shift and go to state 85
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    testlist                       shift and go to state 150
    list_def                       shift and go to state 151
    testlist_multi                 shift and go to state 30
    test                           shift and go to state 15
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 133

    (98) list_index -> list_index LBRA test . RBRA

    RBRA            shift and go to state 152


state 134

    (96) trailer -> LPAR arglist RPAR .

    PLUS            reduce using rule 96 (trailer -> LPAR arglist RPAR .)
    MINUS           reduce using rule 96 (trailer -> LPAR arglist RPAR .)
    MULT            reduce using rule 96 (trailer -> LPAR arglist RPAR .)
    DIV             reduce using rule 96 (trailer -> LPAR arglist RPAR .)
    MOD             reduce using rule 96 (trailer -> LPAR arglist RPAR .)
    POTENCIA        reduce using rule 96 (trailer -> LPAR arglist RPAR .)
    NEQ             reduce using rule 96 (trailer -> LPAR arglist RPAR .)
    EQ              reduce using rule 96 (trailer -> LPAR arglist RPAR .)
    LT              reduce using rule 96 (trailer -> LPAR arglist RPAR .)
    GT              reduce using rule 96 (trailer -> LPAR arglist RPAR .)
    LEQ             reduce using rule 96 (trailer -> LPAR arglist RPAR .)
    GEQ             reduce using rule 96 (trailer -> LPAR arglist RPAR .)
    AND             reduce using rule 96 (trailer -> LPAR arglist RPAR .)
    OR              reduce using rule 96 (trailer -> LPAR arglist RPAR .)
    COMMA           reduce using rule 96 (trailer -> LPAR arglist RPAR .)
    ASSIGN          reduce using rule 96 (trailer -> LPAR arglist RPAR .)
    COLON           reduce using rule 96 (trailer -> LPAR arglist RPAR .)
    NEWLINE         reduce using rule 96 (trailer -> LPAR arglist RPAR .)
    SEMICOLON       reduce using rule 96 (trailer -> LPAR arglist RPAR .)
    RPAR            reduce using rule 96 (trailer -> LPAR arglist RPAR .)
    RBRA            reduce using rule 96 (trailer -> LPAR arglist RPAR .)


state 135

    (104) arglist -> arglist COMMA . argument
    (106) argument -> . test
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    argument                       shift and go to state 153
    test                           shift and go to state 112
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 136

    (97) list_index -> LBRA test RBRA .

    LBRA            reduce using rule 97 (list_index -> LBRA test RBRA .)
    PLUS            reduce using rule 97 (list_index -> LBRA test RBRA .)
    MINUS           reduce using rule 97 (list_index -> LBRA test RBRA .)
    MULT            reduce using rule 97 (list_index -> LBRA test RBRA .)
    DIV             reduce using rule 97 (list_index -> LBRA test RBRA .)
    MOD             reduce using rule 97 (list_index -> LBRA test RBRA .)
    POTENCIA        reduce using rule 97 (list_index -> LBRA test RBRA .)
    NEQ             reduce using rule 97 (list_index -> LBRA test RBRA .)
    EQ              reduce using rule 97 (list_index -> LBRA test RBRA .)
    LT              reduce using rule 97 (list_index -> LBRA test RBRA .)
    GT              reduce using rule 97 (list_index -> LBRA test RBRA .)
    LEQ             reduce using rule 97 (list_index -> LBRA test RBRA .)
    GEQ             reduce using rule 97 (list_index -> LBRA test RBRA .)
    AND             reduce using rule 97 (list_index -> LBRA test RBRA .)
    OR              reduce using rule 97 (list_index -> LBRA test RBRA .)
    COMMA           reduce using rule 97 (list_index -> LBRA test RBRA .)
    ASSIGN          reduce using rule 97 (list_index -> LBRA test RBRA .)
    COLON           reduce using rule 97 (list_index -> LBRA test RBRA .)
    NEWLINE         reduce using rule 97 (list_index -> LBRA test RBRA .)
    SEMICOLON       reduce using rule 97 (list_index -> LBRA test RBRA .)
    RPAR            reduce using rule 97 (list_index -> LBRA test RBRA .)
    RBRA            reduce using rule 97 (list_index -> LBRA test RBRA .)


state 137

    (62) if_stmt -> IF test COLON suite ELSE . COLON suite

    COLON           shift and go to state 154


state 138

    (63) if_stmt -> IF test COLON suite else_if_list .

    ENDMARKER       reduce using rule 63 (if_stmt -> IF test COLON suite else_if_list .)
    NEWLINE         reduce using rule 63 (if_stmt -> IF test COLON suite else_if_list .)
    IF              reduce using rule 63 (if_stmt -> IF test COLON suite else_if_list .)
    DEF             reduce using rule 63 (if_stmt -> IF test COLON suite else_if_list .)
    WHILE           reduce using rule 63 (if_stmt -> IF test COLON suite else_if_list .)
    FOR             reduce using rule 63 (if_stmt -> IF test COLON suite else_if_list .)
    STRUCT          reduce using rule 63 (if_stmt -> IF test COLON suite else_if_list .)
    RETURN          reduce using rule 63 (if_stmt -> IF test COLON suite else_if_list .)
    CONTINUE        reduce using rule 63 (if_stmt -> IF test COLON suite else_if_list .)
    BREAK           reduce using rule 63 (if_stmt -> IF test COLON suite else_if_list .)
    MINUS           reduce using rule 63 (if_stmt -> IF test COLON suite else_if_list .)
    NOT             reduce using rule 63 (if_stmt -> IF test COLON suite else_if_list .)
    LPAR            reduce using rule 63 (if_stmt -> IF test COLON suite else_if_list .)
    NAME            reduce using rule 63 (if_stmt -> IF test COLON suite else_if_list .)
    NUMBER          reduce using rule 63 (if_stmt -> IF test COLON suite else_if_list .)
    FLOAT           reduce using rule 63 (if_stmt -> IF test COLON suite else_if_list .)
    STRING          reduce using rule 63 (if_stmt -> IF test COLON suite else_if_list .)
    DEDENT          reduce using rule 63 (if_stmt -> IF test COLON suite else_if_list .)


state 139

    (64) else_if_list -> ELIF . test COLON suite
    (65) else_if_list -> ELIF . test COLON suite ELSE COLON suite
    (66) else_if_list -> ELIF . test COLON suite else_if_list
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    test                           shift and go to state 155
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 140

    (68) suite -> NEWLINE INDENT . stmts DEDENT
    (69) stmts -> . stmts stmt
    (70) stmts -> . stmt
    (19) stmt -> . simple_stmt
    (20) stmt -> . compound_stmt
    (21) simple_stmt -> . small_stmts NEWLINE
    (22) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (44) compound_stmt -> . if_stmt
    (45) compound_stmt -> . funcdef
    (46) compound_stmt -> . while_loop
    (47) compound_stmt -> . for_loop
    (48) compound_stmt -> . struct_def
    (23) small_stmts -> . small_stmts SEMICOLON small_stmt
    (24) small_stmts -> . small_stmt
    (61) if_stmt -> . IF test COLON suite
    (62) if_stmt -> . IF test COLON suite ELSE COLON suite
    (63) if_stmt -> . IF test COLON suite else_if_list
    (6) funcdef -> . DEF NAME parameters COLON suite
    (49) while_loop -> . WHILE test COLON suite
    (50) for_loop -> . FOR NAME IN range COLON suite
    (55) struct_def -> . STRUCT NAME COLON struct_body
    (25) small_stmt -> . flow_stmt
    (26) small_stmt -> . expr_stmt
    (37) flow_stmt -> . return_stmt
    (38) flow_stmt -> . continue_stmt
    (39) flow_stmt -> . break_stmt
    (27) expr_stmt -> . testlist ASSIGN testlist
    (28) expr_stmt -> . testlist COLON type ASSIGN testlist
    (29) expr_stmt -> . testlist ASSIGN list_def
    (30) expr_stmt -> . testlist COLON type ASSIGN list_def
    (31) expr_stmt -> . testlist
    (40) return_stmt -> . RETURN testlist
    (41) return_stmt -> . RETURN
    (42) continue_stmt -> . CONTINUE
    (43) break_stmt -> . BREAK
    (99) testlist -> . testlist_multi COMMA
    (100) testlist -> . testlist_multi
    (101) testlist_multi -> . testlist_multi COMMA test
    (102) testlist_multi -> . test
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    IF              shift and go to state 14
    DEF             shift and go to state 16
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    STRUCT          shift and go to state 20
    RETURN          shift and go to state 27
    CONTINUE        shift and go to state 28
    BREAK           shift and go to state 29
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    stmts                          shift and go to state 156
    stmt                           shift and go to state 157
    simple_stmt                    shift and go to state 5
    compound_stmt                  shift and go to state 6
    small_stmts                    shift and go to state 7
    if_stmt                        shift and go to state 8
    funcdef                        shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    struct_def                     shift and go to state 12
    small_stmt                     shift and go to state 13
    test                           shift and go to state 15
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    testlist_multi                 shift and go to state 30
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 141

    (6) funcdef -> DEF NAME parameters COLON suite .

    ENDMARKER       reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    NEWLINE         reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    IF              reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    DEF             reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    WHILE           reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    FOR             reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    STRUCT          reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    RETURN          reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    CONTINUE        reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    BREAK           reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    MINUS           reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    NOT             reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    LPAR            reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    NAME            reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    NUMBER          reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    FLOAT           reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    STRING          reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)
    DEDENT          reduce using rule 6 (funcdef -> DEF NAME parameters COLON suite .)


state 142

    (8) parameters -> LPAR varargslist RPAR .

    COLON           reduce using rule 8 (parameters -> LPAR varargslist RPAR .)


state 143

    (9) varargslist -> varargslist COMMA . NAME COLON type
    (10) varargslist -> varargslist COMMA . NAME

    NAME            shift and go to state 158


state 144

    (11) varargslist -> NAME COLON . type
    (13) type -> . STR
    (14) type -> . INT
    (15) type -> . FLOAT
    (16) type -> . BOOL
    (17) type -> . LIST
    (18) type -> . NAME

    STR             shift and go to state 87
    INT             shift and go to state 88
    FLOAT           shift and go to state 89
    BOOL            shift and go to state 90
    LIST            shift and go to state 91
    NAME            shift and go to state 92

    type                           shift and go to state 159

state 145

    (50) for_loop -> FOR NAME IN range COLON . suite
    (67) suite -> . simple_stmt
    (68) suite -> . NEWLINE INDENT stmts DEDENT
    (21) simple_stmt -> . small_stmts NEWLINE
    (22) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (23) small_stmts -> . small_stmts SEMICOLON small_stmt
    (24) small_stmts -> . small_stmt
    (25) small_stmt -> . flow_stmt
    (26) small_stmt -> . expr_stmt
    (37) flow_stmt -> . return_stmt
    (38) flow_stmt -> . continue_stmt
    (39) flow_stmt -> . break_stmt
    (27) expr_stmt -> . testlist ASSIGN testlist
    (28) expr_stmt -> . testlist COLON type ASSIGN testlist
    (29) expr_stmt -> . testlist ASSIGN list_def
    (30) expr_stmt -> . testlist COLON type ASSIGN list_def
    (31) expr_stmt -> . testlist
    (40) return_stmt -> . RETURN testlist
    (41) return_stmt -> . RETURN
    (42) continue_stmt -> . CONTINUE
    (43) break_stmt -> . BREAK
    (99) testlist -> . testlist_multi COMMA
    (100) testlist -> . testlist_multi
    (101) testlist_multi -> . testlist_multi COMMA test
    (102) testlist_multi -> . test
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    NEWLINE         shift and go to state 116
    RETURN          shift and go to state 27
    CONTINUE        shift and go to state 28
    BREAK           shift and go to state 29
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    suite                          shift and go to state 160
    simple_stmt                    shift and go to state 115
    small_stmts                    shift and go to state 7
    small_stmt                     shift and go to state 13
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    testlist_multi                 shift and go to state 30
    test                           shift and go to state 15
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 146

    (54) range -> atom trailer .

    COLON           reduce using rule 54 (range -> atom trailer .)


state 147

    (56) struct_body -> NEWLINE INDENT . struct_fields DEDENT
    (57) struct_fields -> . struct_field struct_fields
    (58) struct_fields -> . struct_field
    (59) struct_field -> . NAME COLON type NEWLINE
    (60) struct_field -> . NAME NEWLINE

    NAME            shift and go to state 163

    struct_fields                  shift and go to state 161
    struct_field                   shift and go to state 162

state 148

    (32) list_def -> LBRA list_elem RBRA .

    NEWLINE         reduce using rule 32 (list_def -> LBRA list_elem RBRA .)
    SEMICOLON       reduce using rule 32 (list_def -> LBRA list_elem RBRA .)
    COLON           reduce using rule 32 (list_def -> LBRA list_elem RBRA .)
    RBRA            reduce using rule 32 (list_def -> LBRA list_elem RBRA .)
    COMMA           reduce using rule 32 (list_def -> LBRA list_elem RBRA .)


state 149

    (33) list_elem -> list_elem COMMA . test
    (34) list_elem -> list_elem COMMA . list_def
    (103) test -> . comparison
    (32) list_def -> . LBRA list_elem RBRA
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    LBRA            shift and go to state 85
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    test                           shift and go to state 164
    list_def                       shift and go to state 165
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 150

    (28) expr_stmt -> testlist COLON type ASSIGN testlist .

    NEWLINE         reduce using rule 28 (expr_stmt -> testlist COLON type ASSIGN testlist .)
    SEMICOLON       reduce using rule 28 (expr_stmt -> testlist COLON type ASSIGN testlist .)


state 151

    (30) expr_stmt -> testlist COLON type ASSIGN list_def .

    NEWLINE         reduce using rule 30 (expr_stmt -> testlist COLON type ASSIGN list_def .)
    SEMICOLON       reduce using rule 30 (expr_stmt -> testlist COLON type ASSIGN list_def .)


state 152

    (98) list_index -> list_index LBRA test RBRA .

    LBRA            reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    PLUS            reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    MINUS           reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    MULT            reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    DIV             reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    MOD             reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    POTENCIA        reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    NEQ             reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    EQ              reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    LT              reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    GT              reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    LEQ             reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    GEQ             reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    AND             reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    OR              reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    COMMA           reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    ASSIGN          reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    COLON           reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    NEWLINE         reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    SEMICOLON       reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    RPAR            reduce using rule 98 (list_index -> list_index LBRA test RBRA .)
    RBRA            reduce using rule 98 (list_index -> list_index LBRA test RBRA .)


state 153

    (104) arglist -> arglist COMMA argument .

    RPAR            reduce using rule 104 (arglist -> arglist COMMA argument .)
    COMMA           reduce using rule 104 (arglist -> arglist COMMA argument .)


state 154

    (62) if_stmt -> IF test COLON suite ELSE COLON . suite
    (67) suite -> . simple_stmt
    (68) suite -> . NEWLINE INDENT stmts DEDENT
    (21) simple_stmt -> . small_stmts NEWLINE
    (22) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (23) small_stmts -> . small_stmts SEMICOLON small_stmt
    (24) small_stmts -> . small_stmt
    (25) small_stmt -> . flow_stmt
    (26) small_stmt -> . expr_stmt
    (37) flow_stmt -> . return_stmt
    (38) flow_stmt -> . continue_stmt
    (39) flow_stmt -> . break_stmt
    (27) expr_stmt -> . testlist ASSIGN testlist
    (28) expr_stmt -> . testlist COLON type ASSIGN testlist
    (29) expr_stmt -> . testlist ASSIGN list_def
    (30) expr_stmt -> . testlist COLON type ASSIGN list_def
    (31) expr_stmt -> . testlist
    (40) return_stmt -> . RETURN testlist
    (41) return_stmt -> . RETURN
    (42) continue_stmt -> . CONTINUE
    (43) break_stmt -> . BREAK
    (99) testlist -> . testlist_multi COMMA
    (100) testlist -> . testlist_multi
    (101) testlist_multi -> . testlist_multi COMMA test
    (102) testlist_multi -> . test
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    NEWLINE         shift and go to state 116
    RETURN          shift and go to state 27
    CONTINUE        shift and go to state 28
    BREAK           shift and go to state 29
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    test                           shift and go to state 15
    suite                          shift and go to state 166
    simple_stmt                    shift and go to state 115
    small_stmts                    shift and go to state 7
    small_stmt                     shift and go to state 13
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    testlist_multi                 shift and go to state 30
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 155

    (64) else_if_list -> ELIF test . COLON suite
    (65) else_if_list -> ELIF test . COLON suite ELSE COLON suite
    (66) else_if_list -> ELIF test . COLON suite else_if_list

    COLON           shift and go to state 167


state 156

    (68) suite -> NEWLINE INDENT stmts . DEDENT
    (69) stmts -> stmts . stmt
    (19) stmt -> . simple_stmt
    (20) stmt -> . compound_stmt
    (21) simple_stmt -> . small_stmts NEWLINE
    (22) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (44) compound_stmt -> . if_stmt
    (45) compound_stmt -> . funcdef
    (46) compound_stmt -> . while_loop
    (47) compound_stmt -> . for_loop
    (48) compound_stmt -> . struct_def
    (23) small_stmts -> . small_stmts SEMICOLON small_stmt
    (24) small_stmts -> . small_stmt
    (61) if_stmt -> . IF test COLON suite
    (62) if_stmt -> . IF test COLON suite ELSE COLON suite
    (63) if_stmt -> . IF test COLON suite else_if_list
    (6) funcdef -> . DEF NAME parameters COLON suite
    (49) while_loop -> . WHILE test COLON suite
    (50) for_loop -> . FOR NAME IN range COLON suite
    (55) struct_def -> . STRUCT NAME COLON struct_body
    (25) small_stmt -> . flow_stmt
    (26) small_stmt -> . expr_stmt
    (37) flow_stmt -> . return_stmt
    (38) flow_stmt -> . continue_stmt
    (39) flow_stmt -> . break_stmt
    (27) expr_stmt -> . testlist ASSIGN testlist
    (28) expr_stmt -> . testlist COLON type ASSIGN testlist
    (29) expr_stmt -> . testlist ASSIGN list_def
    (30) expr_stmt -> . testlist COLON type ASSIGN list_def
    (31) expr_stmt -> . testlist
    (40) return_stmt -> . RETURN testlist
    (41) return_stmt -> . RETURN
    (42) continue_stmt -> . CONTINUE
    (43) break_stmt -> . BREAK
    (99) testlist -> . testlist_multi COMMA
    (100) testlist -> . testlist_multi
    (101) testlist_multi -> . testlist_multi COMMA test
    (102) testlist_multi -> . test
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    DEDENT          shift and go to state 168
    IF              shift and go to state 14
    DEF             shift and go to state 16
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    STRUCT          shift and go to state 20
    RETURN          shift and go to state 27
    CONTINUE        shift and go to state 28
    BREAK           shift and go to state 29
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    stmt                           shift and go to state 169
    simple_stmt                    shift and go to state 5
    compound_stmt                  shift and go to state 6
    small_stmts                    shift and go to state 7
    if_stmt                        shift and go to state 8
    funcdef                        shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    struct_def                     shift and go to state 12
    small_stmt                     shift and go to state 13
    test                           shift and go to state 15
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    testlist_multi                 shift and go to state 30
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 157

    (70) stmts -> stmt .

    DEDENT          reduce using rule 70 (stmts -> stmt .)
    IF              reduce using rule 70 (stmts -> stmt .)
    DEF             reduce using rule 70 (stmts -> stmt .)
    WHILE           reduce using rule 70 (stmts -> stmt .)
    FOR             reduce using rule 70 (stmts -> stmt .)
    STRUCT          reduce using rule 70 (stmts -> stmt .)
    RETURN          reduce using rule 70 (stmts -> stmt .)
    CONTINUE        reduce using rule 70 (stmts -> stmt .)
    BREAK           reduce using rule 70 (stmts -> stmt .)
    MINUS           reduce using rule 70 (stmts -> stmt .)
    NOT             reduce using rule 70 (stmts -> stmt .)
    LPAR            reduce using rule 70 (stmts -> stmt .)
    NAME            reduce using rule 70 (stmts -> stmt .)
    NUMBER          reduce using rule 70 (stmts -> stmt .)
    FLOAT           reduce using rule 70 (stmts -> stmt .)
    STRING          reduce using rule 70 (stmts -> stmt .)


state 158

    (9) varargslist -> varargslist COMMA NAME . COLON type
    (10) varargslist -> varargslist COMMA NAME .

    COLON           shift and go to state 170
    RPAR            reduce using rule 10 (varargslist -> varargslist COMMA NAME .)
    COMMA           reduce using rule 10 (varargslist -> varargslist COMMA NAME .)


state 159

    (11) varargslist -> NAME COLON type .

    RPAR            reduce using rule 11 (varargslist -> NAME COLON type .)
    COMMA           reduce using rule 11 (varargslist -> NAME COLON type .)


state 160

    (50) for_loop -> FOR NAME IN range COLON suite .

    ENDMARKER       reduce using rule 50 (for_loop -> FOR NAME IN range COLON suite .)
    NEWLINE         reduce using rule 50 (for_loop -> FOR NAME IN range COLON suite .)
    IF              reduce using rule 50 (for_loop -> FOR NAME IN range COLON suite .)
    DEF             reduce using rule 50 (for_loop -> FOR NAME IN range COLON suite .)
    WHILE           reduce using rule 50 (for_loop -> FOR NAME IN range COLON suite .)
    FOR             reduce using rule 50 (for_loop -> FOR NAME IN range COLON suite .)
    STRUCT          reduce using rule 50 (for_loop -> FOR NAME IN range COLON suite .)
    RETURN          reduce using rule 50 (for_loop -> FOR NAME IN range COLON suite .)
    CONTINUE        reduce using rule 50 (for_loop -> FOR NAME IN range COLON suite .)
    BREAK           reduce using rule 50 (for_loop -> FOR NAME IN range COLON suite .)
    MINUS           reduce using rule 50 (for_loop -> FOR NAME IN range COLON suite .)
    NOT             reduce using rule 50 (for_loop -> FOR NAME IN range COLON suite .)
    LPAR            reduce using rule 50 (for_loop -> FOR NAME IN range COLON suite .)
    NAME            reduce using rule 50 (for_loop -> FOR NAME IN range COLON suite .)
    NUMBER          reduce using rule 50 (for_loop -> FOR NAME IN range COLON suite .)
    FLOAT           reduce using rule 50 (for_loop -> FOR NAME IN range COLON suite .)
    STRING          reduce using rule 50 (for_loop -> FOR NAME IN range COLON suite .)
    DEDENT          reduce using rule 50 (for_loop -> FOR NAME IN range COLON suite .)


state 161

    (56) struct_body -> NEWLINE INDENT struct_fields . DEDENT

    DEDENT          shift and go to state 171


state 162

    (57) struct_fields -> struct_field . struct_fields
    (58) struct_fields -> struct_field .
    (57) struct_fields -> . struct_field struct_fields
    (58) struct_fields -> . struct_field
    (59) struct_field -> . NAME COLON type NEWLINE
    (60) struct_field -> . NAME NEWLINE

    DEDENT          reduce using rule 58 (struct_fields -> struct_field .)
    NAME            shift and go to state 163

    struct_field                   shift and go to state 162
    struct_fields                  shift and go to state 172

state 163

    (59) struct_field -> NAME . COLON type NEWLINE
    (60) struct_field -> NAME . NEWLINE

    COLON           shift and go to state 173
    NEWLINE         shift and go to state 174


state 164

    (33) list_elem -> list_elem COMMA test .

    RBRA            reduce using rule 33 (list_elem -> list_elem COMMA test .)
    COMMA           reduce using rule 33 (list_elem -> list_elem COMMA test .)


state 165

    (34) list_elem -> list_elem COMMA list_def .

    RBRA            reduce using rule 34 (list_elem -> list_elem COMMA list_def .)
    COMMA           reduce using rule 34 (list_elem -> list_elem COMMA list_def .)


state 166

    (62) if_stmt -> IF test COLON suite ELSE COLON suite .

    ENDMARKER       reduce using rule 62 (if_stmt -> IF test COLON suite ELSE COLON suite .)
    NEWLINE         reduce using rule 62 (if_stmt -> IF test COLON suite ELSE COLON suite .)
    IF              reduce using rule 62 (if_stmt -> IF test COLON suite ELSE COLON suite .)
    DEF             reduce using rule 62 (if_stmt -> IF test COLON suite ELSE COLON suite .)
    WHILE           reduce using rule 62 (if_stmt -> IF test COLON suite ELSE COLON suite .)
    FOR             reduce using rule 62 (if_stmt -> IF test COLON suite ELSE COLON suite .)
    STRUCT          reduce using rule 62 (if_stmt -> IF test COLON suite ELSE COLON suite .)
    RETURN          reduce using rule 62 (if_stmt -> IF test COLON suite ELSE COLON suite .)
    CONTINUE        reduce using rule 62 (if_stmt -> IF test COLON suite ELSE COLON suite .)
    BREAK           reduce using rule 62 (if_stmt -> IF test COLON suite ELSE COLON suite .)
    MINUS           reduce using rule 62 (if_stmt -> IF test COLON suite ELSE COLON suite .)
    NOT             reduce using rule 62 (if_stmt -> IF test COLON suite ELSE COLON suite .)
    LPAR            reduce using rule 62 (if_stmt -> IF test COLON suite ELSE COLON suite .)
    NAME            reduce using rule 62 (if_stmt -> IF test COLON suite ELSE COLON suite .)
    NUMBER          reduce using rule 62 (if_stmt -> IF test COLON suite ELSE COLON suite .)
    FLOAT           reduce using rule 62 (if_stmt -> IF test COLON suite ELSE COLON suite .)
    STRING          reduce using rule 62 (if_stmt -> IF test COLON suite ELSE COLON suite .)
    DEDENT          reduce using rule 62 (if_stmt -> IF test COLON suite ELSE COLON suite .)


state 167

    (64) else_if_list -> ELIF test COLON . suite
    (65) else_if_list -> ELIF test COLON . suite ELSE COLON suite
    (66) else_if_list -> ELIF test COLON . suite else_if_list
    (67) suite -> . simple_stmt
    (68) suite -> . NEWLINE INDENT stmts DEDENT
    (21) simple_stmt -> . small_stmts NEWLINE
    (22) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (23) small_stmts -> . small_stmts SEMICOLON small_stmt
    (24) small_stmts -> . small_stmt
    (25) small_stmt -> . flow_stmt
    (26) small_stmt -> . expr_stmt
    (37) flow_stmt -> . return_stmt
    (38) flow_stmt -> . continue_stmt
    (39) flow_stmt -> . break_stmt
    (27) expr_stmt -> . testlist ASSIGN testlist
    (28) expr_stmt -> . testlist COLON type ASSIGN testlist
    (29) expr_stmt -> . testlist ASSIGN list_def
    (30) expr_stmt -> . testlist COLON type ASSIGN list_def
    (31) expr_stmt -> . testlist
    (40) return_stmt -> . RETURN testlist
    (41) return_stmt -> . RETURN
    (42) continue_stmt -> . CONTINUE
    (43) break_stmt -> . BREAK
    (99) testlist -> . testlist_multi COMMA
    (100) testlist -> . testlist_multi
    (101) testlist_multi -> . testlist_multi COMMA test
    (102) testlist_multi -> . test
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    NEWLINE         shift and go to state 116
    RETURN          shift and go to state 27
    CONTINUE        shift and go to state 28
    BREAK           shift and go to state 29
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    test                           shift and go to state 15
    suite                          shift and go to state 175
    simple_stmt                    shift and go to state 115
    small_stmts                    shift and go to state 7
    small_stmt                     shift and go to state 13
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    testlist_multi                 shift and go to state 30
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 168

    (68) suite -> NEWLINE INDENT stmts DEDENT .

    ELSE            reduce using rule 68 (suite -> NEWLINE INDENT stmts DEDENT .)
    ELIF            reduce using rule 68 (suite -> NEWLINE INDENT stmts DEDENT .)
    ENDMARKER       reduce using rule 68 (suite -> NEWLINE INDENT stmts DEDENT .)
    NEWLINE         reduce using rule 68 (suite -> NEWLINE INDENT stmts DEDENT .)
    IF              reduce using rule 68 (suite -> NEWLINE INDENT stmts DEDENT .)
    DEF             reduce using rule 68 (suite -> NEWLINE INDENT stmts DEDENT .)
    WHILE           reduce using rule 68 (suite -> NEWLINE INDENT stmts DEDENT .)
    FOR             reduce using rule 68 (suite -> NEWLINE INDENT stmts DEDENT .)
    STRUCT          reduce using rule 68 (suite -> NEWLINE INDENT stmts DEDENT .)
    RETURN          reduce using rule 68 (suite -> NEWLINE INDENT stmts DEDENT .)
    CONTINUE        reduce using rule 68 (suite -> NEWLINE INDENT stmts DEDENT .)
    BREAK           reduce using rule 68 (suite -> NEWLINE INDENT stmts DEDENT .)
    MINUS           reduce using rule 68 (suite -> NEWLINE INDENT stmts DEDENT .)
    NOT             reduce using rule 68 (suite -> NEWLINE INDENT stmts DEDENT .)
    LPAR            reduce using rule 68 (suite -> NEWLINE INDENT stmts DEDENT .)
    NAME            reduce using rule 68 (suite -> NEWLINE INDENT stmts DEDENT .)
    NUMBER          reduce using rule 68 (suite -> NEWLINE INDENT stmts DEDENT .)
    FLOAT           reduce using rule 68 (suite -> NEWLINE INDENT stmts DEDENT .)
    STRING          reduce using rule 68 (suite -> NEWLINE INDENT stmts DEDENT .)
    DEDENT          reduce using rule 68 (suite -> NEWLINE INDENT stmts DEDENT .)


state 169

    (69) stmts -> stmts stmt .

    DEDENT          reduce using rule 69 (stmts -> stmts stmt .)
    IF              reduce using rule 69 (stmts -> stmts stmt .)
    DEF             reduce using rule 69 (stmts -> stmts stmt .)
    WHILE           reduce using rule 69 (stmts -> stmts stmt .)
    FOR             reduce using rule 69 (stmts -> stmts stmt .)
    STRUCT          reduce using rule 69 (stmts -> stmts stmt .)
    RETURN          reduce using rule 69 (stmts -> stmts stmt .)
    CONTINUE        reduce using rule 69 (stmts -> stmts stmt .)
    BREAK           reduce using rule 69 (stmts -> stmts stmt .)
    MINUS           reduce using rule 69 (stmts -> stmts stmt .)
    NOT             reduce using rule 69 (stmts -> stmts stmt .)
    LPAR            reduce using rule 69 (stmts -> stmts stmt .)
    NAME            reduce using rule 69 (stmts -> stmts stmt .)
    NUMBER          reduce using rule 69 (stmts -> stmts stmt .)
    FLOAT           reduce using rule 69 (stmts -> stmts stmt .)
    STRING          reduce using rule 69 (stmts -> stmts stmt .)


state 170

    (9) varargslist -> varargslist COMMA NAME COLON . type
    (13) type -> . STR
    (14) type -> . INT
    (15) type -> . FLOAT
    (16) type -> . BOOL
    (17) type -> . LIST
    (18) type -> . NAME

    STR             shift and go to state 87
    INT             shift and go to state 88
    FLOAT           shift and go to state 89
    BOOL            shift and go to state 90
    LIST            shift and go to state 91
    NAME            shift and go to state 92

    type                           shift and go to state 176

state 171

    (56) struct_body -> NEWLINE INDENT struct_fields DEDENT .

    ENDMARKER       reduce using rule 56 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    NEWLINE         reduce using rule 56 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    IF              reduce using rule 56 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    DEF             reduce using rule 56 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    WHILE           reduce using rule 56 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    FOR             reduce using rule 56 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    STRUCT          reduce using rule 56 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    RETURN          reduce using rule 56 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    CONTINUE        reduce using rule 56 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    BREAK           reduce using rule 56 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    MINUS           reduce using rule 56 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    NOT             reduce using rule 56 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    LPAR            reduce using rule 56 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    NAME            reduce using rule 56 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    NUMBER          reduce using rule 56 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    FLOAT           reduce using rule 56 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    STRING          reduce using rule 56 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)
    DEDENT          reduce using rule 56 (struct_body -> NEWLINE INDENT struct_fields DEDENT .)


state 172

    (57) struct_fields -> struct_field struct_fields .

    DEDENT          reduce using rule 57 (struct_fields -> struct_field struct_fields .)


state 173

    (59) struct_field -> NAME COLON . type NEWLINE
    (13) type -> . STR
    (14) type -> . INT
    (15) type -> . FLOAT
    (16) type -> . BOOL
    (17) type -> . LIST
    (18) type -> . NAME

    STR             shift and go to state 87
    INT             shift and go to state 88
    FLOAT           shift and go to state 89
    BOOL            shift and go to state 90
    LIST            shift and go to state 91
    NAME            shift and go to state 92

    type                           shift and go to state 177

state 174

    (60) struct_field -> NAME NEWLINE .

    NAME            reduce using rule 60 (struct_field -> NAME NEWLINE .)
    DEDENT          reduce using rule 60 (struct_field -> NAME NEWLINE .)


state 175

    (64) else_if_list -> ELIF test COLON suite .
    (65) else_if_list -> ELIF test COLON suite . ELSE COLON suite
    (66) else_if_list -> ELIF test COLON suite . else_if_list
    (64) else_if_list -> . ELIF test COLON suite
    (65) else_if_list -> . ELIF test COLON suite ELSE COLON suite
    (66) else_if_list -> . ELIF test COLON suite else_if_list

    ENDMARKER       reduce using rule 64 (else_if_list -> ELIF test COLON suite .)
    NEWLINE         reduce using rule 64 (else_if_list -> ELIF test COLON suite .)
    IF              reduce using rule 64 (else_if_list -> ELIF test COLON suite .)
    DEF             reduce using rule 64 (else_if_list -> ELIF test COLON suite .)
    WHILE           reduce using rule 64 (else_if_list -> ELIF test COLON suite .)
    FOR             reduce using rule 64 (else_if_list -> ELIF test COLON suite .)
    STRUCT          reduce using rule 64 (else_if_list -> ELIF test COLON suite .)
    RETURN          reduce using rule 64 (else_if_list -> ELIF test COLON suite .)
    CONTINUE        reduce using rule 64 (else_if_list -> ELIF test COLON suite .)
    BREAK           reduce using rule 64 (else_if_list -> ELIF test COLON suite .)
    MINUS           reduce using rule 64 (else_if_list -> ELIF test COLON suite .)
    NOT             reduce using rule 64 (else_if_list -> ELIF test COLON suite .)
    LPAR            reduce using rule 64 (else_if_list -> ELIF test COLON suite .)
    NAME            reduce using rule 64 (else_if_list -> ELIF test COLON suite .)
    NUMBER          reduce using rule 64 (else_if_list -> ELIF test COLON suite .)
    FLOAT           reduce using rule 64 (else_if_list -> ELIF test COLON suite .)
    STRING          reduce using rule 64 (else_if_list -> ELIF test COLON suite .)
    DEDENT          reduce using rule 64 (else_if_list -> ELIF test COLON suite .)
    ELSE            shift and go to state 178
    ELIF            shift and go to state 139

    else_if_list                   shift and go to state 179

state 176

    (9) varargslist -> varargslist COMMA NAME COLON type .

    RPAR            reduce using rule 9 (varargslist -> varargslist COMMA NAME COLON type .)
    COMMA           reduce using rule 9 (varargslist -> varargslist COMMA NAME COLON type .)


state 177

    (59) struct_field -> NAME COLON type . NEWLINE

    NEWLINE         shift and go to state 180


state 178

    (65) else_if_list -> ELIF test COLON suite ELSE . COLON suite

    COLON           shift and go to state 181


state 179

    (66) else_if_list -> ELIF test COLON suite else_if_list .

    ENDMARKER       reduce using rule 66 (else_if_list -> ELIF test COLON suite else_if_list .)
    NEWLINE         reduce using rule 66 (else_if_list -> ELIF test COLON suite else_if_list .)
    IF              reduce using rule 66 (else_if_list -> ELIF test COLON suite else_if_list .)
    DEF             reduce using rule 66 (else_if_list -> ELIF test COLON suite else_if_list .)
    WHILE           reduce using rule 66 (else_if_list -> ELIF test COLON suite else_if_list .)
    FOR             reduce using rule 66 (else_if_list -> ELIF test COLON suite else_if_list .)
    STRUCT          reduce using rule 66 (else_if_list -> ELIF test COLON suite else_if_list .)
    RETURN          reduce using rule 66 (else_if_list -> ELIF test COLON suite else_if_list .)
    CONTINUE        reduce using rule 66 (else_if_list -> ELIF test COLON suite else_if_list .)
    BREAK           reduce using rule 66 (else_if_list -> ELIF test COLON suite else_if_list .)
    MINUS           reduce using rule 66 (else_if_list -> ELIF test COLON suite else_if_list .)
    NOT             reduce using rule 66 (else_if_list -> ELIF test COLON suite else_if_list .)
    LPAR            reduce using rule 66 (else_if_list -> ELIF test COLON suite else_if_list .)
    NAME            reduce using rule 66 (else_if_list -> ELIF test COLON suite else_if_list .)
    NUMBER          reduce using rule 66 (else_if_list -> ELIF test COLON suite else_if_list .)
    FLOAT           reduce using rule 66 (else_if_list -> ELIF test COLON suite else_if_list .)
    STRING          reduce using rule 66 (else_if_list -> ELIF test COLON suite else_if_list .)
    DEDENT          reduce using rule 66 (else_if_list -> ELIF test COLON suite else_if_list .)


state 180

    (59) struct_field -> NAME COLON type NEWLINE .

    NAME            reduce using rule 59 (struct_field -> NAME COLON type NEWLINE .)
    DEDENT          reduce using rule 59 (struct_field -> NAME COLON type NEWLINE .)


state 181

    (65) else_if_list -> ELIF test COLON suite ELSE COLON . suite
    (67) suite -> . simple_stmt
    (68) suite -> . NEWLINE INDENT stmts DEDENT
    (21) simple_stmt -> . small_stmts NEWLINE
    (22) simple_stmt -> . small_stmts SEMICOLON NEWLINE
    (23) small_stmts -> . small_stmts SEMICOLON small_stmt
    (24) small_stmts -> . small_stmt
    (25) small_stmt -> . flow_stmt
    (26) small_stmt -> . expr_stmt
    (37) flow_stmt -> . return_stmt
    (38) flow_stmt -> . continue_stmt
    (39) flow_stmt -> . break_stmt
    (27) expr_stmt -> . testlist ASSIGN testlist
    (28) expr_stmt -> . testlist COLON type ASSIGN testlist
    (29) expr_stmt -> . testlist ASSIGN list_def
    (30) expr_stmt -> . testlist COLON type ASSIGN list_def
    (31) expr_stmt -> . testlist
    (40) return_stmt -> . RETURN testlist
    (41) return_stmt -> . RETURN
    (42) continue_stmt -> . CONTINUE
    (43) break_stmt -> . BREAK
    (99) testlist -> . testlist_multi COMMA
    (100) testlist -> . testlist_multi
    (101) testlist_multi -> . testlist_multi COMMA test
    (102) testlist_multi -> . test
    (103) test -> . comparison
    (71) comparison -> . comparison PLUS comparison
    (72) comparison -> . comparison MINUS comparison
    (73) comparison -> . comparison MULT comparison
    (74) comparison -> . comparison DIV comparison
    (75) comparison -> . comparison MOD comparison
    (76) comparison -> . comparison POTENCIA comparison
    (77) comparison -> . MINUS comparison
    (78) comparison -> . comparison NEQ comparison
    (79) comparison -> . comparison EQ comparison
    (80) comparison -> . comparison LT comparison
    (81) comparison -> . comparison GT comparison
    (82) comparison -> . comparison LEQ comparison
    (83) comparison -> . comparison GEQ comparison
    (84) comparison -> . comparison AND comparison
    (85) comparison -> . comparison OR comparison
    (86) comparison -> . NOT comparison
    (87) comparison -> . LPAR comparison RPAR
    (88) comparison -> . power
    (89) power -> . atom
    (90) power -> . atom trailer
    (91) power -> . atom list_index
    (92) atom -> . NAME
    (93) atom -> . NUMBER
    (94) atom -> . FLOAT
    (95) atom -> . STRING

    NEWLINE         shift and go to state 116
    RETURN          shift and go to state 27
    CONTINUE        shift and go to state 28
    BREAK           shift and go to state 29
    MINUS           shift and go to state 32
    NOT             shift and go to state 33
    LPAR            shift and go to state 34
    NAME            shift and go to state 17
    NUMBER          shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    test                           shift and go to state 15
    suite                          shift and go to state 182
    simple_stmt                    shift and go to state 115
    small_stmts                    shift and go to state 7
    small_stmt                     shift and go to state 13
    flow_stmt                      shift and go to state 21
    expr_stmt                      shift and go to state 22
    return_stmt                    shift and go to state 23
    continue_stmt                  shift and go to state 24
    break_stmt                     shift and go to state 25
    testlist                       shift and go to state 26
    testlist_multi                 shift and go to state 30
    comparison                     shift and go to state 31
    power                          shift and go to state 35
    atom                           shift and go to state 36

state 182

    (65) else_if_list -> ELIF test COLON suite ELSE COLON suite .

    ENDMARKER       reduce using rule 65 (else_if_list -> ELIF test COLON suite ELSE COLON suite .)
    NEWLINE         reduce using rule 65 (else_if_list -> ELIF test COLON suite ELSE COLON suite .)
    IF              reduce using rule 65 (else_if_list -> ELIF test COLON suite ELSE COLON suite .)
    DEF             reduce using rule 65 (else_if_list -> ELIF test COLON suite ELSE COLON suite .)
    WHILE           reduce using rule 65 (else_if_list -> ELIF test COLON suite ELSE COLON suite .)
    FOR             reduce using rule 65 (else_if_list -> ELIF test COLON suite ELSE COLON suite .)
    STRUCT          reduce using rule 65 (else_if_list -> ELIF test COLON suite ELSE COLON suite .)
    RETURN          reduce using rule 65 (else_if_list -> ELIF test COLON suite ELSE COLON suite .)
    CONTINUE        reduce using rule 65 (else_if_list -> ELIF test COLON suite ELSE COLON suite .)
    BREAK           reduce using rule 65 (else_if_list -> ELIF test COLON suite ELSE COLON suite .)
    MINUS           reduce using rule 65 (else_if_list -> ELIF test COLON suite ELSE COLON suite .)
    NOT             reduce using rule 65 (else_if_list -> ELIF test COLON suite ELSE COLON suite .)
    LPAR            reduce using rule 65 (else_if_list -> ELIF test COLON suite ELSE COLON suite .)
    NAME            reduce using rule 65 (else_if_list -> ELIF test COLON suite ELSE COLON suite .)
    NUMBER          reduce using rule 65 (else_if_list -> ELIF test COLON suite ELSE COLON suite .)
    FLOAT           reduce using rule 65 (else_if_list -> ELIF test COLON suite ELSE COLON suite .)
    STRING          reduce using rule 65 (else_if_list -> ELIF test COLON suite ELSE COLON suite .)
    DEDENT          reduce using rule 65 (else_if_list -> ELIF test COLON suite ELSE COLON suite .)

